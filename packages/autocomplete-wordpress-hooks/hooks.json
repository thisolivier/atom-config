[
    {
        "text": "pre_get_col_charset",
        "description": "Filters the column charset value before the DB is checked.",
        "arguments": [
            {
                "type": "string",
                "name": "$charset",
                "description": "The character set to use. Default null."
            },
            {
                "type": "string",
                "name": "$table",
                "description": "The name of the table being checked."
            },
            {
                "type": "string",
                "name": "$column",
                "description": "The name of the column being checked."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_table_charset",
        "description": "Filters the table charset value before the DB is checked.",
        "arguments": [
            {
                "type": "string",
                "name": "$charset",
                "description": "The character set to use. Default null."
            },
            {
                "type": "string",
                "name": "$table",
                "description": "The name of the table being checked."
            }
        ],
        "type": "filter"
    },
    {
        "text": "query",
        "description": "Filters the database query.",
        "arguments": [
            {
                "type": "string",
                "name": "$query",
                "description": "Database query."
            }
        ],
        "type": "filter"
    },
    {
        "text": "incompatible_sql_modes",
        "description": "Filters the list of incompatible SQL modes to exclude.",
        "arguments": [
            {
                "type": "array",
                "name": "$incompatible_modes",
                "description": "An array of incompatible modes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widgets_init",
        "description": "Fires after all default WordPress widgets have been registered.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "the_widget",
        "description": "Fires before rendering the requested widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$widget",
                "description": "The widget's class name."
            },
            {
                "type": "array",
                "name": "$instance",
                "description": "The current widget instance's settings."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of the widget's sidebar arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "sidebars_widgets",
        "description": "Filters the list of sidebars and their widgets.",
        "arguments": [
            {
                "type": "array",
                "name": "$sidebars_widgets",
                "description": "An associative array of sidebars and their widgets."
            }
        ],
        "type": "filter"
    },
    {
        "text": "is_active_sidebar",
        "description": "Filters whether a dynamic sidebar is considered \"active\".",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_active_sidebar",
                "description": "Whether or not the sidebar should be considered &quot;active&quot;.                                      In other words, whether the sidebar contains any widgets."
            },
            {
                "type": "int|string",
                "name": "$index",
                "description": "Index, name, or ID of the dynamic sidebar."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dynamic_sidebar_before",
        "description": "This action is documented in wp-includes\/widget.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "dynamic_sidebar_after",
        "description": "This action is documented in wp-includes\/widget.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "dynamic_sidebar_has_widgets",
        "description": "This filter is documented in wp-includes\/widget.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "dynamic_sidebar_before",
        "description": "Fires before widgets are rendered in a dynamic sidebar.",
        "arguments": [
            {
                "type": "int|string",
                "name": "$index",
                "description": "Index, name, or ID of the dynamic sidebar."
            },
            {
                "type": "bool",
                "name": "$has_widgets",
                "description": "Whether the sidebar is populated with widgets.                                Default true."
            }
        ],
        "type": "action"
    },
    {
        "text": "dynamic_sidebar_params",
        "description": "Filters the parameters passed to a widget's display callback.",
        "arguments": [
            {
                "type": "array",
                "name": "$params",
                "description": "{     @type array $args  {         An array of widget display arguments.         @type string $name          Name of the sidebar the widget is assigned to.         @type string $id            ID of the sidebar the widget is assigned to.         @type string $description   The sidebar description.         @type string $class         CSS class applied to the sidebar container.         @type string $before_widget HTML markup to prepend to each widget in the sidebar.         @type string $after_widget  HTML markup to append to each widget in the sidebar.         @type string $before_title  HTML markup to prepend to the widget title when displayed.         @type string $after_title   HTML markup to append to the widget title when displayed.         @type string $widget_id     ID of the widget.         @type string $widget_name   Name of the widget.     }     @type array $widget_args {         An array of multi-widget arguments.         @type int $number Number increment used for multiples of the same widget.     } }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "dynamic_sidebar",
        "description": "Fires before a widget's display callback is called.",
        "arguments": [
            {
                "type": "array",
                "name": "$widget_id",
                "description": "{     An associative array of widget arguments.     @type string $name                Name of the widget.     @type string $id                  Widget ID.     @type array|callable $callback    When the hook is fired on the front end, $callback is an array                                       containing the widget object. Fired on the back end, $callback                                       is 'wp_widget_control', see $_callback.     @type array          $params      An associative array of multi-widget arguments.     @type string         $classname   CSS class applied to the widget container.     @type string         $description The widget description.     @type array          $_callback   When the hook is fired on the back end, $_callback is populated                                       with an array containing the widget object, see $callback. }"
            }
        ],
        "type": "action"
    },
    {
        "text": "dynamic_sidebar_after",
        "description": "Fires after widgets are rendered in a dynamic sidebar.",
        "arguments": [
            {
                "type": "int|string",
                "name": "$index",
                "description": "Index, name, or ID of the dynamic sidebar."
            },
            {
                "type": "bool",
                "name": "$has_widgets",
                "description": "Whether the sidebar is populated with widgets.                                Default true."
            }
        ],
        "type": "action"
    },
    {
        "text": "dynamic_sidebar_has_widgets",
        "description": "Filters whether a sidebar has widgets.",
        "arguments": [
            {
                "type": "bool",
                "name": "$did_one",
                "description": "Whether at least one widget was rendered in the sidebar.                            Default false."
            },
            {
                "type": "int|string",
                "name": "$index",
                "description": "Index, name, or ID of the dynamic sidebar."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unregister_sidebar_widget",
        "description": "Fires just before a widget is removed from a sidebar.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "The widget ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_register_sidebar_widget",
        "description": "Fires once for each registered widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$widget",
                "description": "An array of default widget arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "register_sidebar",
        "description": "Fires once a sidebar has been registered.",
        "arguments": [
            {
                "type": "array",
                "name": "$sidebar",
                "description": "Parsed arguments for the registered sidebar."
            }
        ],
        "type": "action"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_text",
        "description": "Filters the content of the Text widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$widget_text",
                "description": "The widget content."
            },
            {
                "type": "array",
                "name": "$instance",
                "description": "Array of settings for the current widget."
            },
            {
                "type": "\\WP_Widget_Text",
                "name": "$this",
                "description": "Current Text widget instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_tag_cloud_args",
        "description": "Filters the taxonomy used in the Tag Cloud widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$current_taxonomy",
                "description": "The taxonomy to use in the tag cloud. Default 'tags'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_posts_args",
        "description": "Filters the arguments for the Recent Posts widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to retrieve the recent posts."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_comments_args",
        "description": "Filters the arguments for the Recent Comments widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$comment_args",
                "description": "An array of arguments used to retrieve the recent comments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "show_recent_comments_widget_style",
        "description": "Filters the Recent Comments default widget styles.",
        "arguments": [
            {
                "type": "bool",
                "name": "$active",
                "description": "Whether the widget is active. Default true."
            },
            {
                "type": "string",
                "name": "$id_base",
                "description": "The widget ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "Filters the widget title.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "The widget title. Default 'Pages'."
            },
            {
                "type": "array",
                "name": "$instance",
                "description": "An array of the widget's settings."
            },
            {
                "type": "mixed",
                "name": "$id_base",
                "description": "The widget ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_pages_args",
        "description": "Filters the arguments for the Pages widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to retrieve the pages list."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_meta_poweredby",
        "description": "Filters the \"Powered by WordPress\" text in the Meta widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$title_text",
                "description": "Default title text for the WordPress.org link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_links_args",
        "description": "Filters the arguments for the Links widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$widget_links_args",
                "description": "An array of arguments to retrieve the links list."
            },
            {
                "type": "array",
                "name": "$instance",
                "description": "The settings for the particular instance of the widget."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_categories_dropdown_args",
        "description": "Filters the arguments for the Categories widget drop-down.",
        "arguments": [
            {
                "type": "array",
                "name": "$cat_args",
                "description": "An array of Categories widget drop-down arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_categories_args",
        "description": "Filters the arguments for the Categories widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$cat_args",
                "description": "An array of Categories widget options."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_archives_dropdown_args",
        "description": "Filters the arguments for the Archives widget drop-down.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of Archives widget drop-down arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_archives_args",
        "description": "Filters the arguments for the Archives widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of Archives option arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_title",
        "description": "This filter is documented in wp-includes\/widgets\/class-wp-widget-pages.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "widget_nav_menu_args",
        "description": "Filters the arguments for the Custom Menu widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$nav_menu_args",
                "description": "{     An array of arguments passed to wp_nav_menu() to retrieve a custom menu.     @type callable|bool $fallback_cb Callback to fire if the menu doesn't exist. Default empty.     @type mixed         $menu        Menu ID, slug, or name. }"
            },
            {
                "type": "\\WP_Term",
                "name": "$nav_menu",
                "description": "Nav menu object for the current menu."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Display arguments for the current widget."
            },
            {
                "type": "array",
                "name": "$instance",
                "description": "Array of settings for the current widget."
            }
        ],
        "type": "filter"
    },
    {
        "text": "use_google_chrome_frame",
        "description": "Filters whether Google Chrome Frame should be used, if available.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_admin",
                "description": "Whether to use the Google Chrome Frame. Default is the value of is_admin()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "determine_current_user",
        "description": "Filters the current user.",
        "arguments": [
            {
                "type": "int|bool",
                "name": "$user_id",
                "description": "User ID if one has been determined, false otherwise."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_registration_email",
        "description": "Filters the email address of a user being registered.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_email",
                "description": "The email address of the new user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "illegal_user_logins",
        "description": "This filter is documented in wp-includes\/user.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "register_post",
        "description": "Fires when submitting registration form data, before the user is created.",
        "arguments": [
            {
                "type": "string",
                "name": "$sanitized_user_login",
                "description": "The submitted username after being sanitized."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "The submitted email."
            },
            {
                "type": "\\WP_Error",
                "name": "$errors",
                "description": "Contains any errors with submitted username and email,                                       e.g., an empty field, an invalid username or email,                                       or an existing username or email."
            }
        ],
        "type": "action"
    },
    {
        "text": "registration_errors",
        "description": "Filters the errors encountered when a new user is being registered.",
        "arguments": [
            {
                "type": "\\WP_Error",
                "name": "$errors",
                "description": "A WP_Error object containing any errors encountered                                       during registration."
            },
            {
                "type": "string",
                "name": "$sanitized_user_login",
                "description": "User's username after it has been sanitized."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User's email."
            }
        ],
        "type": "filter"
    },
    {
        "text": "register_new_user",
        "description": "Fires after a new user registration has been recorded.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly registered user."
            }
        ],
        "type": "action"
    },
    {
        "text": "password_reset",
        "description": "Fires before the user's password is reset.",
        "arguments": [
            {
                "type": "object",
                "name": "$user",
                "description": "The user."
            },
            {
                "type": "string",
                "name": "$new_pass",
                "description": "New user password."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_password_reset",
        "description": "Fires after the user's password is reset.",
        "arguments": [
            {
                "type": "object",
                "name": "$user",
                "description": "The user."
            },
            {
                "type": "string",
                "name": "$new_pass",
                "description": "New user password."
            }
        ],
        "type": "action"
    },
    {
        "text": "password_reset_expiration",
        "description": "Filters the expiration time of password reset keys.",
        "arguments": [
            {
                "type": "int",
                "name": "$expiration",
                "description": "The expiration time in seconds."
            }
        ],
        "type": "filter"
    },
    {
        "text": "password_reset_key_expired",
        "description": "Filters the return value of check_password_reset_key() when an old-style key is used.",
        "arguments": [
            {
                "type": "\\WP_Error",
                "name": "$return",
                "description": "A WP_Error object denoting an expired key.                          Return a WP_User object to validate the key."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The matched user ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "retreive_password",
        "description": "Fires before a new password is retrieved.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "The user login name."
            }
        ],
        "type": "action"
    },
    {
        "text": "retrieve_password",
        "description": "Fires before a new password is retrieved.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "The user login name."
            }
        ],
        "type": "action"
    },
    {
        "text": "allow_password_reset",
        "description": "Filters whether to allow a password to be reset.",
        "arguments": [
            {
                "type": "bool",
                "name": "$allow",
                "description": "Whether to allow the password to be reset. Default true."
            },
            {
                "type": "int",
                "name": "$user_data->ID",
                "description": "The ID of the user attempting to reset a password."
            }
        ],
        "type": "filter"
    },
    {
        "text": "retrieve_password_key",
        "description": "Fires when a password reset key is generated.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "The username for the user."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "The generated password reset key."
            }
        ],
        "type": "action"
    },
    {
        "text": "password_hint",
        "description": "Filters the text describing the site's password complexity policy.",
        "arguments": [
            {
                "type": "string",
                "name": "$hint",
                "description": "The password hint text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_contactmethods",
        "description": "Filters the user contact methods.",
        "arguments": [
            {
                "type": "array",
                "name": "$methods",
                "description": "Array of contact methods and their labels."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "send_password_change_email",
        "description": "Filters whether to send the password change email.",
        "arguments": [
            {
                "type": "bool",
                "name": "$send",
                "description": "Whether to send the email."
            },
            {
                "type": "array",
                "name": "$user",
                "description": "The original user array."
            },
            {
                "type": "array",
                "name": "$userdata",
                "description": "The updated user array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "send_email_change_email",
        "description": "Filters whether to send the email change email.",
        "arguments": [
            {
                "type": "bool",
                "name": "$send",
                "description": "Whether to send the email."
            },
            {
                "type": "array",
                "name": "$user",
                "description": "The original user array."
            },
            {
                "type": "array",
                "name": "$userdata",
                "description": "The updated user array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "password_change_email",
        "description": "Filters the contents of the email sent when the user's password is changed.",
        "arguments": [
            {
                "type": "array",
                "name": "$pass_change_email",
                "description": "{            Used to build wp_mail().            @type string $to      The intended recipients. Add emails in a comma separated string.            @type string $subject The subject of the email.            @type string $message The content of the email.                The following strings have a special meaning and will get replaced dynamically:                - ###USERNAME###    The current user's username.                - ###ADMIN_EMAIL### The admin email in case this was unexpected.                - ###EMAIL###       The old email.                - ###SITENAME###    The name of the site.                - ###SITEURL###     The URL to the site.            @type string $headers Headers. Add headers in a newline (\\r\\n) separated string.        }"
            },
            {
                "type": "array",
                "name": "$user",
                "description": "The original user array."
            },
            {
                "type": "array",
                "name": "$userdata",
                "description": "The updated user array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "email_change_email",
        "description": "Filters the contents of the email sent when the user's email is changed.",
        "arguments": [
            {
                "type": "array",
                "name": "$email_change_email",
                "description": "{            Used to build wp_mail().            @type string $to      The intended recipients.            @type string $subject The subject of the email.            @type string $message The content of the email.                The following strings have a special meaning and will get replaced dynamically:                - ###USERNAME###    The current user's username.                - ###ADMIN_EMAIL### The admin email in case this was unexpected.                - ###EMAIL###       The old email.                - ###SITENAME###    The name of the site.                - ###SITEURL###     The URL to the site.            @type string $headers Headers.        }"
            },
            {
                "type": "array",
                "name": "$user",
                "description": "The original user array."
            },
            {
                "type": "array",
                "name": "$userdata",
                "description": "The updated user array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_cookie_expiration",
        "description": "This filter is documented in wp-includes\/pluggable.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_user_login",
        "description": "Filters a username after it has been sanitized.",
        "arguments": [
            {
                "type": "string",
                "name": "$sanitized_user_login",
                "description": "Username after it has been sanitized."
            }
        ],
        "type": "filter"
    },
    {
        "text": "illegal_user_logins",
        "description": "Filters the list of blacklisted usernames.",
        "arguments": [
            {
                "type": "array",
                "name": "$usernames",
                "description": "Array of blacklisted usernames."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_nicename",
        "description": "Filters a user's nicename before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_nicename",
                "description": "The user's nicename."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_url",
        "description": "Filters a user's URL before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$raw_user_url",
                "description": "The user's URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_email",
        "description": "Filters a user's email before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$raw_user_email",
                "description": "The user's email."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_nickname",
        "description": "Filters a user's nickname before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$nickname",
                "description": "The user's nickname."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_first_name",
        "description": "Filters a user's first name before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$first_name",
                "description": "The user's first name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_last_name",
        "description": "Filters a user's last name before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$last_name",
                "description": "The user's last name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_display_name",
        "description": "Filters a user's display name before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$display_name",
                "description": "The user's display name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_description",
        "description": "Filters a user's description before the user is created or updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$description",
                "description": "The user's description."
            }
        ],
        "type": "filter"
    },
    {
        "text": "insert_user_meta",
        "description": "Filters a user's meta values and keys before the user is created or updated.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta",
                "description": "{     Default meta values and keys for the user.     @type string   $nickname             The user's nickname. Default is the user's username.     @type string   $first_name           The user's first name.     @type string   $last_name            The user's last name.     @type string   $description          The user's description.     @type bool     $rich_editing         Whether to enable the rich-editor for the user. False if not empty.     @type bool     $comment_shortcuts    Whether to enable keyboard shortcuts for the user. Default false.     @type string   $admin_color          The color scheme for a user's admin screen. Default 'fresh'.     @type int|bool $use_ssl              Whether to force SSL on the user's admin area. 0|false if SSL is                                          not forced.     @type bool     $show_admin_bar_front Whether to show the admin bar on the front end for the user.                                          Default true. }"
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether the user is being updated rather than created."
            }
        ],
        "type": "filter"
    },
    {
        "text": "profile_update",
        "description": "Fires immediately after an existing user is updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "object",
                "name": "$old_user_data",
                "description": "Object containing user's data prior to update."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_register",
        "description": "Fires immediately after a new user is registered.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "validate_username",
        "description": "Filters whether the provided username is valid or not.",
        "arguments": [
            {
                "type": "bool",
                "name": "$valid",
                "description": "Whether given username is valid."
            },
            {
                "type": "string",
                "name": "$username",
                "description": "Username to check."
            }
        ],
        "type": "filter"
    },
    {
        "text": "clean_user_cache",
        "description": "Fires immediately after the given user's cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_{$field}",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "edit_user_{$field}",
        "description": "Filters a user field value in the 'edit' context.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the prefixed user field."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_{$field}",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_user_{$field}",
        "description": "Filters the value of a user field in the 'db' context.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the prefixed user field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$field}",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "user_{$field}",
        "description": "Filters the value of a user field in a standard context.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The user object value to sanitize."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context to filter within."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_dropdown_users_args",
        "description": "Filters the query arguments for the list of users in the dropdown.",
        "arguments": [
            {
                "type": "array",
                "name": "$query_args",
                "description": "The query arguments for get_users()."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "The arguments passed to wp_dropdown_users() combined with the defaults."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_dropdown_users",
        "description": "Filters the wp_dropdown_users() HTML output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output generated by wp_dropdown_users()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_blogs_of_user",
        "description": "Filters the list of a user's sites before it is populated.",
        "arguments": [
            {
                "type": "null|array",
                "name": "$blogs",
                "description": "An array of WP_Site objects of which the user is a member."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "bool",
                "name": "$all",
                "description": "Whether the returned array should contain all sites, including                            those marked 'deleted', 'archived', or 'spam'. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_blogs_of_user",
        "description": "Filters the list of blogs a user belongs to.",
        "arguments": [
            {
                "type": "array",
                "name": "$blogs",
                "description": "An array of blog objects belonging to the user."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "bool",
                "name": "$all",
                "description": "Whether the returned blogs array should contain all blogs, including                       those marked 'deleted', 'archived', or 'spam'. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_user_option_{$option}",
        "description": "Filters a specific user option value.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$result",
                "description": "Value for the user's option."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option being retrieved."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object of the user whose option is being retrieved."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_usernumposts",
        "description": "Filters the number of posts a user has written.",
        "arguments": [
            {
                "type": "int",
                "name": "$count",
                "description": "The user's post count."
            },
            {
                "type": "int",
                "name": "$userid",
                "description": "User ID."
            },
            {
                "type": "string|array",
                "name": "$post_type",
                "description": "Single post type or array of post types to count the number of posts for."
            },
            {
                "type": "bool",
                "name": "$public_only",
                "description": "Whether to limit counted posts to public posts."
            }
        ],
        "type": "filter"
    },
    {
        "text": "check_is_user_spammed",
        "description": "Filters whether the user has been marked as a spammer.",
        "arguments": [
            {
                "type": "bool",
                "name": "$spammed",
                "description": "Whether the user is considered a spammer."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User to check against."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_authenticate_user",
        "description": "This filter is documented in wp-includes\/user.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_authenticate_user",
        "description": "Filters whether the given user can be authenticated with the provided $password.",
        "arguments": [
            {
                "type": "\\WP_User|\\WP_Error",
                "name": "$user",
                "description": "WP_User or WP_Error object if a previous                                   callback failed authentication."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "Password to check against the user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_authenticate",
        "description": "Fires before the user is authenticated.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "Username, passed by reference."
            },
            {
                "type": "string",
                "name": "$user_password",
                "description": "User password, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "secure_signon_cookie",
        "description": "Filters whether to use a secure sign-on cookie.",
        "arguments": [
            {
                "type": "bool",
                "name": "$secure_cookie",
                "description": "Whether to use a secure sign-on cookie."
            },
            {
                "type": "array",
                "name": "$credentials",
                "description": "{     Array of entered sign-on data.     @type string $user_login    Username.     @type string $user_password Password entered.     @type bool   $remember      Whether to 'remember' the user. Increases the time                                 that the cookie will be kept. Default false. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_login",
        "description": "Fires after the user has successfully logged in.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "Username."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object of the logged-in user."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_get_update_data",
        "description": "Filters the returned array of update data for plugins, themes, and WordPress core.",
        "arguments": [
            {
                "type": "array",
                "name": "$update_data",
                "description": "{     Fetched update data.     @type array   $counts       An array of counts for available plugin, theme, and WordPress updates.     @type string  $update_title Titles of available updates. }"
            },
            {
                "type": "array",
                "name": "$titles",
                "description": "An array of update counts and UI strings for available updates."
            }
        ],
        "type": "filter"
    },
    {
        "text": "themes_update_check_locales",
        "description": "Filters the locales requested for theme translations.",
        "arguments": [
            {
                "type": "array",
                "name": "$locales",
                "description": "Theme locales. Default is all available locales of the site."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugins_update_check_locales",
        "description": "Filters the locales requested for plugin translations.",
        "arguments": [
            {
                "type": "array",
                "name": "$locales",
                "description": "Plugin locales. Default is all available locales of the site."
            }
        ],
        "type": "filter"
    },
    {
        "text": "core_version_check_locale",
        "description": "Filters the locale requested for WordPress core translations.",
        "arguments": [
            {
                "type": "string",
                "name": "$locale",
                "description": "Current locale."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_maybe_auto_update",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "after_switch_theme",
        "description": "Fires on the first WP load after a theme switch if the old theme still exists.",
        "arguments": [
            {
                "type": "string",
                "name": "$old_name",
                "description": "Old theme name."
            },
            {
                "type": "\\WP_Theme",
                "name": "$old_theme",
                "description": "WP_Theme instance of the old theme."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_switch_theme",
        "description": "This action is documented in wp-includes\/theme.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "current_theme_supports-{$feature}",
        "description": "Filters whether the current theme supports a specific feature.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "true     Whether the current theme supports the given feature. Default true."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of arguments for the feature."
            },
            {
                "type": "string",
                "name": "$feature",
                "description": "The theme feature."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editor_stylesheets",
        "description": "Filters the array of stylesheets applied to the editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$stylesheets",
                "description": "Array of stylesheets to be applied to the editor."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_header_image_tag",
        "description": "Filters the markup of header images.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The HTML image tag markup being filtered."
            },
            {
                "type": "object",
                "name": "$header",
                "description": "The custom header object returned by 'get_custom_header()'."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Array of the attributes for the image tag."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_set_theme_mod_{$name}",
        "description": "Filters the theme mod value on save.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The new value of the theme mod."
            },
            {
                "type": "string",
                "name": "$old_value",
                "description": "The current value of the theme mod."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_mod_{$name}",
        "description": "Filters the theme modification, or 'theme_mod', value.",
        "arguments": [
            {
                "type": "string",
                "name": "$current_mod",
                "description": "The value of the current theme modification."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_mod_{$name}",
        "description": "This filter is documented in wp-includes\/theme.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "validate_current_theme",
        "description": "Filters whether to validate the current theme.",
        "arguments": [
            {
                "type": "bool",
                "name": "$validate",
                "description": "Whether to validate the current theme. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "switch_theme",
        "description": "Fires after the theme is switched.",
        "arguments": [
            {
                "type": "string",
                "name": "$new_name",
                "description": "Name of the new theme."
            },
            {
                "type": "\\WP_Theme",
                "name": "$new_theme",
                "description": "WP_Theme instance of the new theme."
            },
            {
                "type": "\\WP_Theme",
                "name": "$old_theme",
                "description": "WP_Theme instance of the old theme."
            }
        ],
        "type": "action"
    },
    {
        "text": "theme_root_uri",
        "description": "Filters the URI for themes directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$theme_root_uri",
                "description": "The URI for themes directory."
            },
            {
                "type": "string",
                "name": "$siteurl",
                "description": "WordPress web address which is set in General Options."
            },
            {
                "type": "string",
                "name": "$stylesheet_or_template",
                "description": "Stylesheet or template name of the theme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_root",
        "description": "Filters the absolute path to the themes directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$theme_root",
                "description": "Absolute path to themes directory."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_cache_themes_persistently",
        "description": "Filters whether to get the cache of the registered theme directories.",
        "arguments": [
            {
                "type": "bool",
                "name": "$cache_expiration",
                "description": "Whether to get the cache of the theme directories. Default false."
            },
            {
                "type": "string",
                "name": "$cache_directory",
                "description": "Directory to be searched for the cache."
            }
        ],
        "type": "filter"
    },
    {
        "text": "template_directory_uri",
        "description": "Filters the current theme directory URI.",
        "arguments": [
            {
                "type": "string",
                "name": "$template_dir_uri",
                "description": "The URI of the current theme directory."
            },
            {
                "type": "string",
                "name": "$template",
                "description": "Directory name of the current theme."
            },
            {
                "type": "string",
                "name": "$theme_root_uri",
                "description": "The themes root URI."
            }
        ],
        "type": "filter"
    },
    {
        "text": "template_directory",
        "description": "Filters the current theme directory path.",
        "arguments": [
            {
                "type": "string",
                "name": "$template_dir",
                "description": "The URI of the current theme directory."
            },
            {
                "type": "string",
                "name": "$template",
                "description": "Directory name of the current theme."
            },
            {
                "type": "string",
                "name": "$theme_root",
                "description": "Absolute path to the themes directory."
            }
        ],
        "type": "filter"
    },
    {
        "text": "template",
        "description": "Filters the name of the current theme.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "Current theme's directory name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "locale_stylesheet_uri",
        "description": "Filters the localized stylesheet URI.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet_uri",
                "description": "Localized stylesheet URI."
            },
            {
                "type": "string",
                "name": "$stylesheet_dir_uri",
                "description": "Stylesheet directory URI."
            }
        ],
        "type": "filter"
    },
    {
        "text": "stylesheet_uri",
        "description": "Filters the URI of the current theme stylesheet.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet_uri",
                "description": "Stylesheet URI for the current theme\/child theme."
            },
            {
                "type": "string",
                "name": "$stylesheet_dir_uri",
                "description": "Stylesheet directory URI for the current theme\/child theme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "stylesheet_directory_uri",
        "description": "Filters the stylesheet directory URI.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet_dir_uri",
                "description": "Stylesheet directory URI."
            },
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Name of the activated theme's directory."
            },
            {
                "type": "string",
                "name": "$theme_root_uri",
                "description": "Themes root URI."
            }
        ],
        "type": "filter"
    },
    {
        "text": "stylesheet_directory",
        "description": "Filters the stylesheet directory path for current theme.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet_dir",
                "description": "Absolute path to the current theme."
            },
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Directory name of the current theme."
            },
            {
                "type": "string",
                "name": "$theme_root",
                "description": "Absolute path to themes directory."
            }
        ],
        "type": "filter"
    },
    {
        "text": "stylesheet",
        "description": "Filters the name of current stylesheet.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Name of the current stylesheet."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_head",
        "description": "Prints scripts or data in the embed template <head> tag.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "embed_footer",
        "description": "Prints scripts or data before the closing body tag in the embed template.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "embed_thumbnail_image_size",
        "description": "Filters the thumbnail image size for use in the embed template.",
        "arguments": [
            {
                "type": "string",
                "name": "$image_size",
                "description": "Thumbnail image size."
            },
            {
                "type": "int",
                "name": "$thumbnail_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_thumbnail_image_shape",
        "description": "Filters the thumbnail shape for use in the embed template.",
        "arguments": [
            {
                "type": "string",
                "name": "$shape",
                "description": "Thumbnail image shape. Either 'rectangular' or 'square'."
            },
            {
                "type": "int",
                "name": "$thumbnail_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_content",
        "description": "Prints additional content after the embed excerpt.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "embed_content_meta",
        "description": "Prints additional meta content in the embed template.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "embed_content",
        "description": "This filter is documented in wp-includes\/theme-compat\/embed-content.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "{$type}_template_hierarchy",
        "description": "Filters the list of template filenames that are searched for when retrieving a template to use.",
        "arguments": [
            {
                "type": "array",
                "name": "$templates",
                "description": "A list of template candidates, in descending order of priority."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$type}_template",
        "description": "Filters the path of the queried template by type.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "Path to the template. See locate_template()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "template_redirect",
        "description": "Fires before determining which template to load.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "exit_on_http_head",
        "description": "Filters whether to allow 'HEAD' requests to generate content.",
        "arguments": [
            {
                "type": "bool",
                "name": "$exit",
                "description": "Whether to exit without generating any content for 'HEAD' requests. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "do_robots",
        "description": "Fired when the template loader determines a robots.txt request.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "template_include",
        "description": "Filters the path of the current template before including it.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "The path of the template to include."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_ancestors",
        "description": "This filter is documented in wp-includes\/taxonomy.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_ancestors",
        "description": "Filters a given object's ancestors.",
        "arguments": [
            {
                "type": "array",
                "name": "$ancestors",
                "description": "An array of object ancestors."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$object_type",
                "description": "Type of object."
            },
            {
                "type": "string",
                "name": "$resource_type",
                "description": "Type of resource $object_type is."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tag_link",
        "description": "Filters the tag link.",
        "arguments": [
            {
                "type": "string",
                "name": "$termlink",
                "description": "Tag link URL."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "category_link",
        "description": "Filters the category link.",
        "arguments": [
            {
                "type": "string",
                "name": "$termlink",
                "description": "Category link URL."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_link",
        "description": "Filters the term link.",
        "arguments": [
            {
                "type": "string",
                "name": "$termlink",
                "description": "Term link URL."
            },
            {
                "type": "object",
                "name": "$term",
                "description": "Term object."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "split_shared_term",
        "description": "Fires after a previously shared taxonomy term is split into two separate terms.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "ID of the formerly shared term."
            },
            {
                "type": "int",
                "name": "$new_term_id",
                "description": "ID of the new term created for the $term_taxonomy_id."
            },
            {
                "type": "int",
                "name": "$term_taxonomy_id",
                "description": "ID for the term_taxonomy row affected by the split."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy for the split term."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_term_taxonomy",
        "description": "This action is documented in wp-includes\/taxonomy.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "edited_term_taxonomy",
        "description": "This action is documented in wp-includes\/taxonomy.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "edit_term_taxonomy",
        "description": "This action is documented in wp-includes\/taxonomy.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "edited_term_taxonomy",
        "description": "This action is documented in wp-includes\/taxonomy.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "clean_term_cache",
        "description": "Fires once after each taxonomy's term cache has been cleaned.",
        "arguments": [
            {
                "type": "array",
                "name": "$ids",
                "description": "An array of term IDs."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "bool",
                "name": "$clean_taxonomy",
                "description": "Whether or not to clean taxonomy-wide caches"
            }
        ],
        "type": "action"
    },
    {
        "text": "clean_object_term_cache",
        "description": "Fires after the object term cache has been cleaned.",
        "arguments": [
            {
                "type": "array",
                "name": "$object_ids",
                "description": "An array of object IDs."
            },
            {
                "type": "string",
                "name": "$objet_type",
                "description": "Object type."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_update_term_parent",
        "description": "Filters the term parent.",
        "arguments": [
            {
                "type": "int",
                "name": "$parent",
                "description": "ID of the parent term."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "array",
                "name": "$parsed_args",
                "description": "An array of potentially altered update arguments for the given term."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of update arguments for the given term."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_terms",
        "description": "Fires immediately before the given terms are edited.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_update_term_data",
        "description": "Filters term data before it is updated in the database.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "Term data to be updated."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to wp_update_term()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edited_terms",
        "description": "Fires immediately after the given terms are edited.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID"
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_term_taxonomy",
        "description": "Fires immediate before a term-taxonomy relationship is updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edited_term_taxonomy",
        "description": "Fires immediately after a term-taxonomy relationship is updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_term",
        "description": "Fires after a term has been updated, but before the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_{$taxonomy}",
        "description": "Fires after a term in a specific taxonomy has been updated, but before the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "term_id_filter",
        "description": "This filter is documented in wp-includes\/taxonomy.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "edited_term",
        "description": "Fires after a term has been updated, and the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edited_{$taxonomy}",
        "description": "Fires after a term for a specific taxonomy has been updated, and the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_unique_term_slug_is_bad_slug",
        "description": "Filters whether the proposed unique term slug is bad.",
        "arguments": [
            {
                "type": "bool",
                "name": "$needs_suffix",
                "description": "Whether the slug needs to be made unique with a suffix."
            },
            {
                "type": "string",
                "name": "$slug",
                "description": "The slug."
            },
            {
                "type": "object",
                "name": "$term",
                "description": "Term object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unique_term_slug",
        "description": "Filters the unique term slug.",
        "arguments": [
            {
                "type": "string",
                "name": "$slug",
                "description": "Unique term slug."
            },
            {
                "type": "object",
                "name": "$term",
                "description": "Term object."
            },
            {
                "type": "string",
                "name": "$original_slug",
                "description": "Slug originally passed to the function for testing."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_term_relationships",
        "description": "Fires immediately before an object-term relationship is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "array",
                "name": "$tt_ids",
                "description": "An array of term taxonomy IDs."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_term_relationships",
        "description": "Fires immediately after an object-term relationship is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "array",
                "name": "$tt_ids",
                "description": "An array of term taxonomy IDs."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_term_relationship",
        "description": "Fires immediately before an object-term relationship is added.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "added_term_relationship",
        "description": "Fires immediately after an object-term relationship is added.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "set_object_terms",
        "description": "Fires after an object's terms have been set.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "array",
                "name": "$terms",
                "description": "An array of object terms."
            },
            {
                "type": "array",
                "name": "$tt_ids",
                "description": "An array of term taxonomy IDs."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "bool",
                "name": "$append",
                "description": "Whether to append new terms to the old terms."
            },
            {
                "type": "array",
                "name": "$old_tt_ids",
                "description": "Old array of term taxonomy IDs."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_insert_term",
        "description": "Filters a term before it is sanitized and inserted into the database.",
        "arguments": [
            {
                "type": "string",
                "name": "$term",
                "description": "The term to add or update."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_insert_term_data",
        "description": "Filters term data before it is inserted into the database.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "Term data to be inserted."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to wp_insert_term()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_terms",
        "description": "This action is documented in wp-includes\/taxonomy.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "edited_terms",
        "description": "This action is documented in wp-includes\/taxonomy.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "create_term",
        "description": "Fires immediately after a new term is created, before the term cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "create_{$taxonomy}",
        "description": "Fires after a new term is created for a specific taxonomy.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "term_id_filter",
        "description": "Filters the term ID after a new term is created.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Taxonomy term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "created_term",
        "description": "Fires after a new term is created, and after the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "created_{$taxonomy}",
        "description": "Fires after a new term in a specific taxonomy is created, and after the term cache has been cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_object_terms",
        "description": "Filters the terms for a given object or objects.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms",
                "description": "An array of terms for the given object or objects."
            },
            {
                "type": "array",
                "name": "$object_id_array",
                "description": "Array of object IDs for which <code>$terms<\/code> were retrieved."
            },
            {
                "type": "array",
                "name": "$taxonomy_array",
                "description": "Array of taxonomies from which <code>$terms<\/code> were retrieved."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments for retrieving terms for the given                               object(s). See wp_get_object_terms() for details."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_object_terms",
        "description": "Filters the terms for a given object or objects.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms",
                "description": "An array of terms for the given object or objects."
            },
            {
                "type": "int|array",
                "name": "$object_ids",
                "description": "Object ID or array of IDs."
            },
            {
                "type": "string",
                "name": "$taxonomies",
                "description": "SQL-formatted (comma-separated and quoted) list of taxonomy names."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments for retrieving terms for the given object(s).                              See wp_get_object_terms() for details."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_delete_term",
        "description": "Fires when deleting a term, before any modifications are made to posts or terms.",
        "arguments": [
            {
                "type": "int",
                "name": "$term",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy Name."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_term_taxonomies",
        "description": "Fires immediately before a term to delete's children are reassigned a parent.",
        "arguments": [
            {
                "type": "array",
                "name": "$edit_tt_ids",
                "description": "An array of term taxonomy IDs for the given term."
            }
        ],
        "type": "action"
    },
    {
        "text": "edited_term_taxonomies",
        "description": "Fires immediately after a term to delete's children are reassigned a parent.",
        "arguments": [
            {
                "type": "array",
                "name": "$edit_tt_ids",
                "description": "An array of term taxonomy IDs for the given term."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_term_taxonomy",
        "description": "Fires immediately before a term taxonomy ID is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_term_taxonomy",
        "description": "Fires immediately after a term taxonomy ID is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_term",
        "description": "Fires after a term is deleted from the database and the cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$term",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "mixed",
                "name": "$deleted_term",
                "description": "Copy of the already-deleted term, in the form specified                              by the parent function. WP_Error otherwise."
            },
            {
                "type": "array",
                "name": "$object_ids",
                "description": "List of term object IDs."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_{$taxonomy}",
        "description": "Fires after a term in a specific taxonomy is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$term",
                "description": "Term ID."
            },
            {
                "type": "int",
                "name": "$tt_id",
                "description": "Term taxonomy ID."
            },
            {
                "type": "mixed",
                "name": "$deleted_term",
                "description": "Copy of the already-deleted term, in the form specified                              by the parent function. WP_Error otherwise."
            },
            {
                "type": "array",
                "name": "$object_ids",
                "description": "List of term object IDs."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_term_{$field}",
        "description": "Filters a term field to edit before it is sanitized.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the term field."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_{$taxonomy}_{$field}",
        "description": "Filters the taxonomy field to edit before it is sanitized.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the taxonomy field to edit."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_term_{$field}",
        "description": "Filters a term field value before it is sanitized.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the term field."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_{$taxonomy}_{$field}",
        "description": "Filters a taxonomy field before it is sanitized.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the taxonomy field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_category_nicename",
        "description": "Filters the category nicename before it is sanitized.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The category nicename."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_{$field}_rss",
        "description": "Filters the term field for use in RSS.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the term field."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$taxonomy}_{$field}_rss",
        "description": "Filters the taxonomy field for use in RSS.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the taxonomy field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_{$field}",
        "description": "Filters the term field sanitized for display.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the term field."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context to retrieve the term field value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$taxonomy}_{$field}",
        "description": "Filters the taxonomy field sanitized for display.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the taxonomy field."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context to retrieve the taxonomy field value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_terms",
        "description": "Filters the found terms.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms",
                "description": "Array of found terms."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of get_terms() arguments."
            },
            {
                "type": "\\WP_Term_Query",
                "name": "$term_query",
                "description": "The WP_Term_Query object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_term",
        "description": "Filters a term.",
        "arguments": [
            {
                "type": "int|\\WP_Term",
                "name": "$_term",
                "description": "Term object or ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$taxonomy}",
        "description": "Filters a taxonomy.",
        "arguments": [
            {
                "type": "int|\\WP_Term",
                "name": "$_term",
                "description": "Term object or ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "taxonomy_labels_{$taxonomy}",
        "description": "Filters the labels of a specific taxonomy.",
        "arguments": [
            {
                "type": "object",
                "name": "$labels",
                "description": "Object with labels for the taxonomy as member variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "unregistered_taxonomy",
        "description": "Fires after a taxonomy is unregistered.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy name."
            }
        ],
        "type": "action"
    },
    {
        "text": "register_taxonomy_args",
        "description": "Filters the arguments for registering a taxonomy.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Array of arguments for registering a taxonomy."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy key."
            },
            {
                "type": "array",
                "name": "$object_type",
                "description": "Array of names of object types for the taxonomy."
            }
        ],
        "type": "filter"
    },
    {
        "text": "registered_taxonomy",
        "description": "Fires after a taxonomy is registered.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy slug."
            },
            {
                "type": "array|string",
                "name": "$object_type",
                "description": "Object type or array of object types."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of taxonomy registration arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_format_rewrite_base",
        "description": "Filters the post formats rewrite base.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "Context of the rewrite base. Default 'type'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "shortcode_atts_{$shortcode}",
        "description": "Filters a shortcode's default attributes.",
        "arguments": [
            {
                "type": "array",
                "name": "$out",
                "description": "The output array of shortcode attributes."
            },
            {
                "type": "array",
                "name": "$pairs",
                "description": "The supported attributes and their defaults."
            },
            {
                "type": "array",
                "name": "$atts",
                "description": "The user defined shortcode attributes."
            },
            {
                "type": "string",
                "name": "$shortcode",
                "description": "The shortcode name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_do_shortcode_tag",
        "description": "Filters whether to call a shortcode callback.",
        "arguments": [
            {
                "type": "bool|string",
                "name": "$return",
                "description": "Short-circuit return value. Either false or the value to replace the shortcode with."
            },
            {
                "type": "string",
                "name": "$tag",
                "description": "Shortcode name."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Shortcode attributes array,"
            },
            {
                "type": "array",
                "name": "$m",
                "description": "Regular expression match array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "print_late_styles",
        "description": "Filters whether to print the styles queued too late for the HTML head.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print the 'late' styles. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "print_admin_styles",
        "description": "Filters whether to print the admin styles.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print the admin styles. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_enqueue_scripts",
        "description": "Fires when scripts and styles are enqueued.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_print_footer_scripts",
        "description": "Fires when footer scripts are printed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_print_scripts",
        "description": "This action is documented in wp-includes\/functions.wp-scripts.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "print_footer_scripts",
        "description": "Filters whether to print the footer scripts.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print the footer scripts. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_print_scripts",
        "description": "This action is documented in wp-includes\/functions.wp-scripts.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "print_head_scripts",
        "description": "Filters whether to print the head scripts.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print the head scripts. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_settings",
        "description": "Filters the Heartbeat settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$settings",
                "description": "Heartbeat settings array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_auth_check_interval",
        "description": "Filters the authentication check interval.",
        "arguments": [
            {
                "type": "int",
                "name": "$interval",
                "description": "The interval in which to check a user's authentication.                      Default 3 minutes in seconds, or 180."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mejs_settings",
        "description": "Filters the MediaElement configuration settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$mejs_settings",
                "description": "MediaElement settings array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_feed_engine",
        "description": "Fires before MagpieRSS is loaded, to optionally replace it.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "url_to_postid",
        "description": "Filters the URL to derive the post ID from.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The URL to derive the post ID from."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_revisions_to_keep",
        "description": "Filters the number of revisions to save for the given post.",
        "arguments": [
            {
                "type": "int",
                "name": "$num",
                "description": "Number of revisions to store."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_delete_post_revision",
        "description": "Fires once a post revision has been deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$revision_id",
                "description": "Post revision ID."
            },
            {
                "type": "object|array",
                "name": "$revision",
                "description": "Post revision object or array."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_restore_post_revision",
        "description": "Fires after a post revision has been restored.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "int",
                "name": "$revision_id",
                "description": "Post revision ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "_wp_put_post_revision",
        "description": "Fires once a revision has been saved.",
        "arguments": [
            {
                "type": "int",
                "name": "$revision_id",
                "description": "Post revision ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_save_post_revision_post_has_changed",
        "description": "Filters whether a post has changed.",
        "arguments": [
            {
                "type": "bool",
                "name": "$post_has_changed",
                "description": "Whether the post has changed."
            },
            {
                "type": "\\WP_Post",
                "name": "$last_revision",
                "description": "The last revision post object."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_save_post_revision_check_for_changes",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "_wp_post_revision_fields",
        "description": "Filters the list of fields saved in post revisions.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "List of fields to revision. Contains 'post_title',                      'post_content', and 'post_excerpt' by default."
            },
            {
                "type": "array",
                "name": "$post",
                "description": "A post array being processed for insertion as a post revision."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_rest_server_class",
        "description": "Filters the REST Server Class.",
        "arguments": [
            {
                "type": "string",
                "name": "$class_name",
                "description": "The name of the server class. Default 'WP_REST_Server'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_api_init",
        "description": "Fires when preparing to serve an API request.",
        "arguments": [
            {
                "type": "\\WP_REST_Server",
                "name": "$wp_rest_server",
                "description": "Server object."
            }
        ],
        "type": "action"
    },
    {
        "text": "rest_url",
        "description": "Filters the REST URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "REST URL."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "REST route."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Sanitization scheme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_url_prefix",
        "description": "Filters the REST URL prefix.",
        "arguments": [
            {
                "type": "string",
                "name": "$prefix",
                "description": "URL prefix. Default 'wp-json'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_endpoints_description",
        "description": "Filters the REST endpoint data.",
        "arguments": [
            {
                "type": "\\WP_REST_Request",
                "name": "$request",
                "description": "Request data. The namespace is passed as the 'namespace' parameter."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_route_data",
        "description": "Filters the publicly-visible data for routes.",
        "arguments": [
            {
                "type": "array",
                "name": "$available",
                "description": "Map of route to route data."
            },
            {
                "type": "array",
                "name": "$routes",
                "description": "Internal route data as an associative array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_namespace_index",
        "description": "Filters the namespace index data.",
        "arguments": [
            {
                "type": "\\WP_REST_Response",
                "name": "$response",
                "description": "Response data."
            },
            {
                "type": "\\WP_REST_Request",
                "name": "$request",
                "description": "Request data. The namespace is passed as the 'namespace' parameter."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_index",
        "description": "Filters the API root index data.",
        "arguments": [
            {
                "type": "\\WP_REST_Response",
                "name": "$response",
                "description": "Response data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_pre_dispatch",
        "description": "Filters the pre-calculated result of a REST dispatch request.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$result",
                "description": "Response to replace the requested version with. Can be anything                                 a normal endpoint can return, or null to not hijack the request."
            },
            {
                "type": "\\WP_REST_Server",
                "name": "$this",
                "description": "Server instance."
            },
            {
                "type": "\\WP_REST_Request",
                "name": "$request",
                "description": "Request used to generate the response."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_dispatch_request",
        "description": "Filters the REST dispatch request result.",
        "arguments": [
            {
                "type": "bool",
                "name": "$dispatch_result",
                "description": "Dispatch result, will be used if not empty."
            },
            {
                "type": "\\WP_REST_Request",
                "name": "$request",
                "description": "Request used to generate the response."
            },
            {
                "type": "string",
                "name": "$route",
                "description": "Route matched for the request."
            },
            {
                "type": "array",
                "name": "$handler",
                "description": "Route handler used for the request."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_endpoints",
        "description": "Filters the array of available endpoints.",
        "arguments": [
            {
                "type": "array",
                "name": "$endpoints",
                "description": "The available endpoints. An array of matching regex patterns, each mapped                         to an array of callbacks for the endpoint. These take the format                         <code>'\/path\/regex' =&gt; array( $callback, $bitmask )<\/code> or                         `'\/path\/regex' =&gt; array( array( $callback, $bitmask )."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_envelope_response",
        "description": "Filters the enveloped form of a response.",
        "arguments": [
            {
                "type": "array",
                "name": "$envelope",
                "description": "Envelope data."
            },
            {
                "type": "\\WP_REST_Response",
                "name": "$response",
                "description": "Original response data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_post_dispatch",
        "description": "This filter is documented in wp-includes\/rest-api\/class-wp-rest-server.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "rest_send_nocache_headers",
        "description": "Send nocache headers on authenticated requests.",
        "arguments": [
            {
                "type": "bool",
                "name": "$rest_send_nocache_headers",
                "description": "Whether to send no-cache headers."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_enabled",
        "description": "Filters whether the REST API is enabled.",
        "arguments": [
            {
                "type": "bool",
                "name": "$rest_enabled",
                "description": "Whether the REST API is enabled. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_jsonp_enabled",
        "description": "Filters whether jsonp is enabled.",
        "arguments": [
            {
                "type": "bool",
                "name": "$jsonp_enabled",
                "description": "Whether jsonp is enabled. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_post_dispatch",
        "description": "Filters the API response.",
        "arguments": [
            {
                "type": "\\WP_HTTP_Response",
                "name": "$result",
                "description": "Result to send to the client. Usually a WP_REST_Response."
            },
            {
                "type": "\\WP_REST_Server",
                "name": "$this",
                "description": "Server instance."
            },
            {
                "type": "\\WP_REST_Request",
                "name": "$request",
                "description": "Request used to generate the response."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_pre_serve_request",
        "description": "Filters whether the request has already been served.",
        "arguments": [
            {
                "type": "bool",
                "name": "$served",
                "description": "Whether the request has already been served.                                           Default false."
            },
            {
                "type": "\\WP_HTTP_Response",
                "name": "$result",
                "description": "Result to send to the client. Usually a WP_REST_Response."
            },
            {
                "type": "\\WP_REST_Request",
                "name": "$request",
                "description": "Request used to generate the response."
            },
            {
                "type": "\\WP_REST_Server",
                "name": "$this",
                "description": "Server instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_authentication_errors",
        "description": "Pass an authentication error to the API",
        "arguments": [
            {
                "type": "\\WP_Error|null|bool",
                "name": "",
                "description": "WP_Error if authentication error, null if authentication                              method wasn't used, true if authentication succeeded."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_response_link_curies",
        "description": "Filters extra CURIEs available on API responses.",
        "arguments": [
            {
                "type": "array",
                "name": "$additional",
                "description": "Additional CURIEs to register with the API."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_request_from_url",
        "description": "Filters the request generated from a URL.",
        "arguments": [
            {
                "type": "\\WP_REST_Request|false",
                "name": "$request",
                "description": "Generated request object, or false if URL                                       could not be parsed."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "URL the request was generated from."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rest_request_parameter_order",
        "description": "Filters the parameter order.",
        "arguments": [
            {
                "type": "array",
                "name": "$order",
                "description": "{    An array of types to check, in order of priority.    @param string $type The type to check. }"
            },
            {
                "type": "\\WP_REST_Request",
                "name": "$this",
                "description": "The request object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "old_slug_redirect_url",
        "description": "Filters the old slug redirect URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The redirect URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_publish_post",
        "description": "Fires when _publish_post_hook() is called during an XML-RPC request.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "private_to_published",
        "description": "Fires when a post's status is transitioned from private to published.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "clean_attachment_cache",
        "description": "Fires after the given attachment's cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "clean_post_cache",
        "description": "Fires immediately after the given post's cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "clean_page_cache",
        "description": "Fires immediately after the given page's cache is cleaned.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_get_lastpostmodified",
        "description": "Pre-filter the return value of get_lastpostmodified() before the query is run.",
        "arguments": [
            {
                "type": "string",
                "name": "$lastpostmodified",
                "description": "Date the last post was modified.                                 Returning anything other than false will short-circuit the function."
            },
            {
                "type": "string",
                "name": "$timezone",
                "description": "Location to use for getting the post modified date.                                 See get_lastpostdate() for accepted <code>$timezone<\/code> values."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type to check."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_lastpostmodified",
        "description": "Filters the date the last post was modified.",
        "arguments": [
            {
                "type": "string",
                "name": "$lastpostmodified",
                "description": "Date the last post was modified."
            },
            {
                "type": "string",
                "name": "$timezone",
                "description": "Location to use for getting the post modified date.                                 See get_lastpostdate() for accepted <code>$timezone<\/code> values."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_lastpostdate",
        "description": "Filters the date the last post was published.",
        "arguments": [
            {
                "type": "string",
                "name": "$date",
                "description": "Date the last post was published."
            },
            {
                "type": "string",
                "name": "$timezone",
                "description": "Location to use for getting the post published date.                         See get_lastpostdate() for accepted <code>$timezone<\/code> values."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pub_priv_sql_capability",
        "description": "Filters the capability to read private posts for a custom post type when generating SQL for getting posts by author.",
        "arguments": [
            {
                "type": "string",
                "name": "$cap",
                "description": "Capability."
            }
        ],
        "type": "filter"
    },
    {
        "text": "icon_dir",
        "description": "Filters the icon directory path.",
        "arguments": [
            {
                "type": "string",
                "name": "$path",
                "description": "Icon directory absolute path."
            }
        ],
        "type": "filter"
    },
    {
        "text": "icon_dir_uri",
        "description": "Filters the icon directory URI.",
        "arguments": [
            {
                "type": "string",
                "name": "$uri",
                "description": "Icon directory URI."
            }
        ],
        "type": "filter"
    },
    {
        "text": "icon_dirs",
        "description": "Filters the list of icon directory URIs.",
        "arguments": [
            {
                "type": "array",
                "name": "$uris",
                "description": "List of icon directory URIs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mime_type_icon",
        "description": "Filters the mime type icon.",
        "arguments": [
            {
                "type": "string",
                "name": "$icon",
                "description": "Path to the mime type icon."
            },
            {
                "type": "string",
                "name": "$mime",
                "description": "Mime type."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID. Will equal 0 if the function passed                        the mime type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_thumb_url",
        "description": "Filters the attachment thumbnail URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "URL for the attachment thumbnail."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_thumb_file",
        "description": "Filters the attachment thumbnail file path.",
        "arguments": [
            {
                "type": "string",
                "name": "$thumbfile",
                "description": "File path to the attachment thumbnail."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_caption",
        "description": "Filters the attachment caption.",
        "arguments": [
            {
                "type": "string",
                "name": "$caption",
                "description": "Caption for the given attachment."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_url",
        "description": "Filters the attachment URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "URL for the given attachment."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_update_attachment_metadata",
        "description": "Filters the updated attachment meta data.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "Array of updated attachment meta data."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_metadata",
        "description": "Filters the attachment meta data.",
        "arguments": [
            {
                "type": "array|bool",
                "name": "$data",
                "description": "Array of meta data for the given attachment, or false                            if the object does not exist."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_attachment",
        "description": "Fires before an attachment is deleted, at the start of wp_delete_attachment().",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_post",
        "description": "This action is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "deleted_post",
        "description": "This action is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_delete_file",
        "description": "This filter is documented in wp-includes\/functions.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_delete_file",
        "description": "This filter is documented in wp-includes\/functions.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_delete_file",
        "description": "This filter is documented in wp-includes\/functions.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_pages",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_pages",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_pages",
        "description": "Filters the retrieved list of pages.",
        "arguments": [
            {
                "type": "array",
                "name": "$pages",
                "description": "List of pages to retrieve."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "Array of get_pages() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_page_uri",
        "description": "Filters the URI for a page.",
        "arguments": [
            {
                "type": "string",
                "name": "$uri",
                "description": "Page URI."
            },
            {
                "type": "\\WP_Post",
                "name": "$page",
                "description": "Page object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_to_ping",
        "description": "Filters the list of URLs yet to ping for the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$to_ping",
                "description": "List of URLs yet to ping."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_pung",
        "description": "Filters the list of already-pinged URLs for the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$pung",
                "description": "Array of URLs already pinged for the given post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_enclosed",
        "description": "Filters the list of enclosures already enclosed for the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$pung",
                "description": "Array of enclosures for the given post."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_ping",
        "description": "Filters the new ping URL to add for the given post.",
        "arguments": [
            {
                "type": "string",
                "name": "$new",
                "description": "New ping URL to add."
            }
        ],
        "type": "filter"
    },
    {
        "text": "transition_post_status",
        "description": "Fires when a post is transitioned from one status to another.",
        "arguments": [
            {
                "type": "string",
                "name": "$new_status",
                "description": "New post status."
            },
            {
                "type": "string",
                "name": "$old_status",
                "description": "Old post status."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$old_status}_to_{$new_status}",
        "description": "Fires when a post is transitioned from one status to another.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$new_status}_{$post->post_type}",
        "description": "Fires when a post is transitioned from one status to another.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_unique_post_slug_is_bad_attachment_slug",
        "description": "Filters whether the post slug would make a bad attachment slug.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bad_slug",
                "description": "Whether the slug would be bad as an attachment slug."
            },
            {
                "type": "string",
                "name": "$slug",
                "description": "The post slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unique_post_slug_is_bad_hierarchical_slug",
        "description": "Filters whether the post slug would make a bad hierarchical post slug.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bad_slug",
                "description": "Whether the post slug would be bad in a hierarchical post context."
            },
            {
                "type": "string",
                "name": "$slug",
                "description": "The post slug."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            },
            {
                "type": "int",
                "name": "$post_parent",
                "description": "Post parent ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unique_post_slug_is_bad_flat_slug",
        "description": "Filters whether the post slug would be bad as a flat slug.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bad_slug",
                "description": "Whether the post slug would be bad as a flat slug."
            },
            {
                "type": "string",
                "name": "$slug",
                "description": "The post slug."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unique_post_slug",
        "description": "Filters the unique post slug.",
        "arguments": [
            {
                "type": "string",
                "name": "$slug",
                "description": "The post slug."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$post_status",
                "description": "The post status."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            },
            {
                "type": "int",
                "name": "$post_parent",
                "description": "Post parent ID"
            },
            {
                "type": "string",
                "name": "$original_slug",
                "description": "The original post slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_post",
        "description": "This action is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "save_post_{$post->post_type}",
        "description": "This action is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "save_post",
        "description": "This action is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_insert_post",
        "description": "This action is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_insert_post_empty_content",
        "description": "Filters whether the post should be considered \"empty\".",
        "arguments": [
            {
                "type": "bool",
                "name": "$maybe_empty",
                "description": "Whether the post should be considered &quot;empty&quot;."
            },
            {
                "type": "array",
                "name": "$postarr",
                "description": "Array of post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_insert_post_parent",
        "description": "Filters the post parent -- used to check for and prevent hierarchy loops.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_parent",
                "description": "Post parent ID."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "array",
                "name": "$new_postarr",
                "description": "Array of parsed post data."
            },
            {
                "type": "array",
                "name": "$postarr",
                "description": "Array of sanitized, but otherwise unmodified post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_insert_attachment_data",
        "description": "Filters attachment post data before it is updated in or added to the database.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "An array of sanitized attachment post data."
            },
            {
                "type": "array",
                "name": "$postarr",
                "description": "An array of unsanitized attachment post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_insert_post_data",
        "description": "Filters slashed post data just before it is inserted into the database.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "An array of slashed post data."
            },
            {
                "type": "array",
                "name": "$postarr",
                "description": "An array of sanitized, but otherwise unmodified post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_post_update",
        "description": "Fires immediately before an existing post is updated in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "array",
                "name": "$data",
                "description": "Array of unslashed post data."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_attachment",
        "description": "Fires once an existing attachment has been updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "attachment_updated",
        "description": "Fires once an existing attachment has been updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post_after",
                "description": "Post object following the update."
            },
            {
                "type": "\\WP_Post",
                "name": "$post_before",
                "description": "Post object before the update."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_attachment",
        "description": "Fires once an attachment has been added.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_post",
        "description": "Fires once an existing post has been updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_updated",
        "description": "Fires once an existing post has been updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post_after",
                "description": "Post object following the update."
            },
            {
                "type": "\\WP_Post",
                "name": "$post_before",
                "description": "Post object before the update."
            }
        ],
        "type": "action"
    },
    {
        "text": "save_post_{$post->post_type}",
        "description": "Fires once a post has been saved.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether this is an existing post being updated or not."
            }
        ],
        "type": "action"
    },
    {
        "text": "save_post",
        "description": "Fires once a post has been saved.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether this is an existing post being updated or not."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_insert_post",
        "description": "Fires once a post has been saved.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether this is an existing post being updated or not."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrash_post_comments",
        "description": "Fires before comments are restored for a post from the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrashed_post_comments",
        "description": "Fires after comments are restored for a post from the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "trash_post_comments",
        "description": "Fires before comments are sent to the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "trashed_post_comments",
        "description": "Fires after comments are sent to the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "array",
                "name": "$statuses",
                "description": "Array of comment statuses."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrash_post",
        "description": "Fires before a post is restored from the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrashed_post",
        "description": "Fires after a post is restored from the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_trash_post",
        "description": "Fires before a post is sent to the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "trashed_post",
        "description": "Fires after a post is sent to the trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_delete_post",
        "description": "Filters whether a post deletion should take place.",
        "arguments": [
            {
                "type": "bool",
                "name": "$delete",
                "description": "Whether to go forward with deletion."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "bool",
                "name": "$force_delete",
                "description": "Whether to bypass the trash."
            }
        ],
        "type": "filter"
    },
    {
        "text": "before_delete_post",
        "description": "Fires before a post is deleted, at the start of wp_delete_post().",
        "arguments": [
            {
                "type": "int",
                "name": "$postid",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_post",
        "description": "Fires immediately before a post is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$postid",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_post",
        "description": "Fires immediately after a post is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$postid",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_delete_post",
        "description": "Fires after a post is deleted, at the conclusion of wp_delete_post().",
        "arguments": [
            {
                "type": "int",
                "name": "$postid",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_mime_types",
        "description": "Filters the default list of post mime types.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_mime_types",
                "description": "Default list of post mime types."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_count_attachments",
        "description": "Modify returned attachment counts by mime type.",
        "arguments": [
            {
                "type": "object",
                "name": "$counts",
                "description": "An object containing the attachment counts by                          mime type."
            },
            {
                "type": "string",
                "name": "$mime_type",
                "description": "The mime type pattern used to filter the attachments                          counted."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_count_posts",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_count_posts",
        "description": "Modify returned post counts by status for the current post type.",
        "arguments": [
            {
                "type": "object",
                "name": "$counts",
                "description": "An object containing the current post_type's post                       counts by status."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Post type."
            },
            {
                "type": "string",
                "name": "$perm",
                "description": "The permission to determine if the posts are 'readable'                       by the current user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_unstuck",
        "description": "Fires once a post has been removed from the sticky list.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "ID of the post that was unstuck."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_stuck",
        "description": "Fires once a post has been added to the sticky list.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "ID of the post that was stuck."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_{$field}",
        "description": "Filters the value of a specific post field to edit.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the post field."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$field_no_prefix}_edit_pre",
        "description": "Filters the value of a specific post field to edit.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the post field."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_post_{$field}",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_{$field}",
        "description": "Filters the value of a specific post field before saving.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the post field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$field_no_prefix}_save_pre",
        "description": "Filters the value of a specific field before saving.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the post field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_post_{$field}",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "{$field}_pre",
        "description": "Filters the value of a specific post field before saving.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the post field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$field}",
        "description": "Filters the value of a specific post field for display.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the prefixed post field."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context for how to sanitize the field. Possible                        values include 'raw', 'edit', 'db', 'display',                        'attribute' and 'js'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_{$field}",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "post_type_labels_{$post_type}",
        "description": "Filters the labels of a specific post type.",
        "arguments": [
            {
                "type": "object",
                "name": "$labels",
                "description": "Object with labels for the post type as member variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "unregistered_post_type",
        "description": "Fires after a post type was unregistered.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type key."
            }
        ],
        "type": "action"
    },
    {
        "text": "registered_post_type",
        "description": "Fires after a post type is registered.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            },
            {
                "type": "\\WP_Post_Type",
                "name": "$post_type_object",
                "description": "Arguments used to register the post type."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_post_status",
        "description": "Filters the post status.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_status",
                "description": "The post status."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_wp_relative_upload_path",
        "description": "Filters the relative path to an uploaded file.",
        "arguments": [
            {
                "type": "string",
                "name": "$new_path",
                "description": "Relative path to the file."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Full path to the file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_attached_file",
        "description": "Filters the path to the attached file to update.",
        "arguments": [
            {
                "type": "string",
                "name": "$file",
                "description": "Path to the attached file to update."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_attached_file",
        "description": "Filters the attached file based on the given ID.",
        "arguments": [
            {
                "type": "string",
                "name": "$file",
                "description": "Path to attached file."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_post_thumbnail_caption",
        "description": "Filters the displayed post thumbnail caption.",
        "arguments": [
            {
                "type": "string",
                "name": "$caption",
                "description": "Caption for the given attachment."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_thumbnail_size",
        "description": "Filters the post thumbnail size.",
        "arguments": [
            {
                "type": "string|array",
                "name": "$size",
                "description": "The post thumbnail size. Image size or array of width and height                           values (in that order). Default 'post-thumbnail'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "begin_fetch_post_thumbnail_html",
        "description": "Fires before fetching the post thumbnail HTML.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            },
            {
                "type": "string",
                "name": "$post_thumbnail_id",
                "description": "The post thumbnail ID."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "The post thumbnail size. Image size or array of width                                        and height values (in that order). Default 'post-thumbnail'."
            }
        ],
        "type": "action"
    },
    {
        "text": "end_fetch_post_thumbnail_html",
        "description": "Fires after fetching the post thumbnail HTML.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            },
            {
                "type": "string",
                "name": "$post_thumbnail_id",
                "description": "The post thumbnail ID."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "The post thumbnail size. Image size or array of width                                        and height values (in that order). Default 'post-thumbnail'."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_thumbnail_html",
        "description": "Filters the post thumbnail HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The post thumbnail HTML."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            },
            {
                "type": "string",
                "name": "$post_thumbnail_id",
                "description": "The post thumbnail ID."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "The post thumbnail size. Image size or array of width and height                                        values (in that order). Default 'post-thumbnail'."
            },
            {
                "type": "string",
                "name": "$attr",
                "description": "Query string of attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_post_revision_title_expanded",
        "description": "Filters the formatted author and date for a revision.",
        "arguments": [
            {
                "type": "string",
                "name": "$revision_date_author",
                "description": "The formatted string."
            },
            {
                "type": "\\WP_Post",
                "name": "$revision",
                "description": "The revision object."
            },
            {
                "type": "bool",
                "name": "$link",
                "description": "Whether to link to the revisions page, as passed into                                      wp_post_revision_title_expanded()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_password_form",
        "description": "Filters the HTML output for the protected post password form.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The password form HTML output."
            }
        ],
        "type": "filter"
    },
    {
        "text": "prepend_attachment",
        "description": "Filters the attachment markup to be prepended to the post content.",
        "arguments": [
            {
                "type": "string",
                "name": "$p",
                "description": "The attachment HTML output."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_link",
        "description": "Filters a retrieved attachment page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link_html",
                "description": "The page link HTML output."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Post ID."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "Size of the image. Image size or array of width and height values (in that order).                                Default 'thumbnail'."
            },
            {
                "type": "bool",
                "name": "$permalink",
                "description": "Whether to add permalink to image. Default false."
            },
            {
                "type": "bool",
                "name": "$icon",
                "description": "Whether to include an icon. Default false."
            },
            {
                "type": "string|bool",
                "name": "$text",
                "description": "If string, will be link text. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_page_menu_args",
        "description": "Filters the arguments used to generate a page-based menu.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of page menu arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_page_menu",
        "description": "Filters the HTML output of a page-based menu.",
        "arguments": [
            {
                "type": "string",
                "name": "$menu",
                "description": "The HTML output."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_list_pages_excludes",
        "description": "Filters the array of pages to exclude from the pages list.",
        "arguments": [
            {
                "type": "array",
                "name": "$exclude_array",
                "description": "An array of page IDs to exclude."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_list_pages",
        "description": "Filters the HTML output of the pages to list.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output of the pages list."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "An array of page-listing arguments."
            },
            {
                "type": "array",
                "name": "$pages",
                "description": "List of WP_Post objects returned by <code>get_pages()<\/code>"
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_dropdown_pages",
        "description": "Filters the HTML output of a list of pages as a drop down.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output for drop down list of pages."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "The parsed arguments array."
            },
            {
                "type": "array",
                "name": "$pages",
                "description": "List of WP_Post objects returned by <code>get_pages()<\/code>"
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_meta_key",
        "description": "Filters the HTML output of the li element in the post custom fields list.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The HTML output for the li element."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Meta key."
            },
            {
                "type": "string",
                "name": "$value",
                "description": "Meta value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_link_pages_args",
        "description": "Filters the arguments used in retrieving page links for paginated posts.",
        "arguments": [
            {
                "type": "array",
                "name": "$params",
                "description": "An array of arguments for page links for paginated posts."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_link_pages_link",
        "description": "Filters the HTML output of individual page number links.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The page number HTML output."
            },
            {
                "type": "int",
                "name": "$i",
                "description": "Page number for paginated posts' page links."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_link_pages_link",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_link_pages_link",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_link_pages",
        "description": "Filters the HTML output of page links for paginated posts.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output of paginated posts' page links."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_password_required",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "post_password_required",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "post_password_required",
        "description": "Filters whether a post requires the user to supply a password.",
        "arguments": [
            {
                "type": "bool",
                "name": "$required",
                "description": "Whether the user needs to supply a password. True if password has not been                          provided or is incorrect, false if password has been supplied or is not required."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "body_class",
        "description": "Filters the list of CSS body classes for the current post or page.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of body classes."
            },
            {
                "type": "array",
                "name": "$class",
                "description": "An array of additional classes added to the body."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_class",
        "description": "Filters the list of CSS classes for the current post.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of post classes."
            },
            {
                "type": "array",
                "name": "$class",
                "description": "An array of additional classes added to the post."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_excerpt",
        "description": "Filters the retrieved post excerpt.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_excerpt",
                "description": "The post excerpt."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_excerpt",
        "description": "Filters the displayed post excerpt.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_excerpt",
                "description": "The post excerpt."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_content_more_link",
        "description": "Filters the Read More link text.",
        "arguments": [
            {
                "type": "string",
                "name": "$more_link_element",
                "description": "Read More link element."
            },
            {
                "type": "string",
                "name": "$more_link_text",
                "description": "Read More text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_content",
        "description": "Filters the post content.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content of the current post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_guid",
        "description": "Filters the Global Unique Identifier (guid) of the post.",
        "arguments": [
            {
                "type": "string",
                "name": "$guid",
                "description": "Global Unique Identifier (guid) of the post."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_guid",
        "description": "Filters the escaped Global Unique Identifier (guid) of the post.",
        "arguments": [
            {
                "type": "string",
                "name": "$guid",
                "description": "Escaped Global Unique Identifier (guid) of the post."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "protected_title_format",
        "description": "Filters the text prepended to the post title for protected posts.",
        "arguments": [
            {
                "type": "string",
                "name": "$prepend",
                "description": "Text displayed before the post title.                         Default 'Protected: %s'."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Current post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "private_title_format",
        "description": "Filters the text prepended to the post title of private posts.",
        "arguments": [
            {
                "type": "string",
                "name": "$prepend",
                "description": "Text displayed before the post title.                         Default 'Private: %s'."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Current post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "Filters the post title.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "The post title."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$tag}",
        "description": "",
        "arguments": [],
        "type": "action_reference"
    },
    {
        "text": "{$tag}",
        "description": "",
        "arguments": [],
        "type": "filter_reference"
    },
    {
        "text": "pre_get_avatar",
        "description": "Filters whether to retrieve the avatar URL early.",
        "arguments": [
            {
                "type": "string",
                "name": "$avatar",
                "description": "HTML for the user's avatar. Default null."
            },
            {
                "type": "mixed",
                "name": "$id_or_email",
                "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,                            user email, WP_User object, WP_Post object, or WP_Comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to get_avatar_url(), after processing."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_avatar",
        "description": "This filter is documented in wp-includes\/pluggable.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_avatar",
        "description": "Filters the avatar to retrieve.",
        "arguments": [
            {
                "type": "string",
                "name": "$avatar",
                "description": "&lt;img&gt; tag for the user's avatar."
            },
            {
                "type": "mixed",
                "name": "$id_or_email",
                "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,                            user email, WP_User object, WP_Post object, or WP_Comment object."
            },
            {
                "type": "int",
                "name": "$size",
                "description": "Square avatar width and height in pixels to retrieve."
            },
            {
                "type": "string",
                "name": "$alt",
                "description": "Alternative text to use in the avatar image tag.                                       Default empty."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to get_avatar_data(), after processing."
            }
        ],
        "type": "filter"
    },
    {
        "text": "random_password",
        "description": "Filters the randomly-generated password.",
        "arguments": [
            {
                "type": "string",
                "name": "$password",
                "description": "The generated password."
            }
        ],
        "type": "filter"
    },
    {
        "text": "check_password",
        "description": "Filters whether the plaintext password matches the encrypted password.",
        "arguments": [
            {
                "type": "bool",
                "name": "$check",
                "description": "Whether the passwords match."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "The plaintext password."
            },
            {
                "type": "string",
                "name": "$hash",
                "description": "The hashed password."
            },
            {
                "type": "string|int",
                "name": "$user_id",
                "description": "User ID. Can be empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "check_password",
        "description": "This filter is documented in wp-includes\/pluggable.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "salt",
        "description": "Filters the WordPress salt.",
        "arguments": [
            {
                "type": "string",
                "name": "$cached_salt",
                "description": "Cached salt for the given scheme."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication scheme. Values include 'auth',                            'secure_auth', 'logged_in', and 'nonce'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "salt",
        "description": "This filter is documented in wp-includes\/pluggable.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "nonce_user_logged_out",
        "description": "This filter is documented in wp-includes\/pluggable.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "nonce_user_logged_out",
        "description": "Filters whether the user who generated the nonce is logged out.",
        "arguments": [
            {
                "type": "int",
                "name": "$uid",
                "description": "ID of the nonce-owning user."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The nonce action."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_verify_nonce_failed",
        "description": "Fires when nonce verification fails.",
        "arguments": [
            {
                "type": "string",
                "name": "$nonce",
                "description": "The invalid nonce."
            },
            {
                "type": "string|int",
                "name": "$action",
                "description": "The nonce action."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "The current user object."
            },
            {
                "type": "string",
                "name": "$token",
                "description": "The user's session token."
            }
        ],
        "type": "action"
    },
    {
        "text": "nonce_life",
        "description": "Filters the lifespan of nonces in seconds.",
        "arguments": [
            {
                "type": "int",
                "name": "$lifespan",
                "description": "Lifespan of nonces in seconds. Default 86,400 seconds, or one day."
            }
        ],
        "type": "filter"
    },
    {
        "text": "retrieve_password_key",
        "description": "This action is documented in wp-login.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "notify_moderator",
        "description": "Filters whether to send the site moderator email notifications, overriding the site setting.",
        "arguments": [
            {
                "type": "bool",
                "name": "$maybe_notify",
                "description": "Whether to notify blog moderator."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The id of the comment for the notification."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_moderation_recipients",
        "description": "Filters the list of recipients for comment moderation emails.",
        "arguments": [
            {
                "type": "array",
                "name": "$emails",
                "description": "List of email addresses to notify for comment moderation."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_moderation_text",
        "description": "Filters the comment moderation email text.",
        "arguments": [
            {
                "type": "string",
                "name": "$notify_message",
                "description": "Text of the comment moderation email."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_moderation_subject",
        "description": "Filters the comment moderation email subject.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the comment moderation email."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_moderation_headers",
        "description": "Filters the comment moderation email headers.",
        "arguments": [
            {
                "type": "string",
                "name": "$message_headers",
                "description": "Headers for the comment moderation email."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_recipients",
        "description": "Filters the list of email addresses to receive a comment notification.",
        "arguments": [
            {
                "type": "array",
                "name": "$emails",
                "description": "An array of email addresses to receive a comment notification."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_notify_author",
        "description": "Filters whether to notify comment authors of their comments on their own posts.",
        "arguments": [
            {
                "type": "bool",
                "name": "$notify",
                "description": "Whether to notify the post author of their own comment.                         Default false."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_text",
        "description": "Filters the comment notification email text.",
        "arguments": [
            {
                "type": "string",
                "name": "$notify_message",
                "description": "The comment notification email text."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_subject",
        "description": "Filters the comment notification email subject.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "The comment notification email subject."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_notification_headers",
        "description": "Filters the comment notification email headers.",
        "arguments": [
            {
                "type": "string",
                "name": "$message_headers",
                "description": "Headers for the comment notification email."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "allowed_redirect_hosts",
        "description": "Filters the whitelist of hosts to redirect to.",
        "arguments": [
            {
                "type": "array",
                "name": "$hosts",
                "description": "An array of allowed hosts."
            },
            {
                "type": "bool|string",
                "name": "$host",
                "description": "The parsed host; empty if not isset."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_safe_redirect_fallback",
        "description": "Filters the redirect fallback URL for when the provided redirect is not safe (local).",
        "arguments": [
            {
                "type": "string",
                "name": "$fallback_url",
                "description": "The fallback URL to use by default."
            },
            {
                "type": "int",
                "name": "$status",
                "description": "The redirect status."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_redirect",
        "description": "Filters the redirect location.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The path to redirect to."
            },
            {
                "type": "int",
                "name": "$status",
                "description": "Status code to use."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_redirect_status",
        "description": "Filters the redirect status code.",
        "arguments": [
            {
                "type": "int",
                "name": "$status",
                "description": "Status code to use."
            },
            {
                "type": "string",
                "name": "$location",
                "description": "The path to redirect to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "check_ajax_referer",
        "description": "Fires once the Ajax request has been validated or not.",
        "arguments": [
            {
                "type": "string",
                "name": "$action",
                "description": "The Ajax nonce action."
            },
            {
                "type": "false|int",
                "name": "$result",
                "description": "False if the nonce is invalid, 1 if the nonce is valid and generated between                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago."
            }
        ],
        "type": "action"
    },
    {
        "text": "check_admin_referer",
        "description": "Fires once the admin request has been validated or not.",
        "arguments": [
            {
                "type": "string",
                "name": "$action",
                "description": "The nonce action."
            },
            {
                "type": "false|int",
                "name": "$result",
                "description": "False if the nonce is invalid, 1 if the nonce is valid and generated between                          0-12 hours ago, 2 if the nonce is valid and generated between 12-24 hours ago."
            }
        ],
        "type": "action"
    },
    {
        "text": "secure_auth_redirect",
        "description": "Filters whether to use a secure authentication redirect.",
        "arguments": [
            {
                "type": "bool",
                "name": "$secure",
                "description": "Whether to use a secure authentication redirect. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_redirect_scheme",
        "description": "Filters the authentication redirect scheme.",
        "arguments": [
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication redirect scheme. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_redirect",
        "description": "Fires before the authentication redirect.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "clear_auth_cookie",
        "description": "Fires just before the authentication cookies are cleared.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "auth_cookie_expiration",
        "description": "Filters the duration of the authentication cookie expiration period.",
        "arguments": [
            {
                "type": "int",
                "name": "$length",
                "description": "Duration of the expiration period in seconds."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "bool",
                "name": "$remember",
                "description": "Whether to remember the user login. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_cookie_expiration",
        "description": "This filter is documented in wp-includes\/pluggable.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "secure_auth_cookie",
        "description": "Filters whether the connection is secure.",
        "arguments": [
            {
                "type": "bool",
                "name": "$secure",
                "description": "Whether the connection is secure."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "secure_logged_in_cookie",
        "description": "Filters whether to use a secure cookie when logged-in.",
        "arguments": [
            {
                "type": "bool",
                "name": "$secure_logged_in_cookie",
                "description": "Whether to use a secure cookie when logged-in."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "bool",
                "name": "$secure",
                "description": "Whether the connection is secure."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set_auth_cookie",
        "description": "Fires immediately before the authentication cookie is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$auth_cookie",
                "description": "Authentication cookie."
            },
            {
                "type": "int",
                "name": "$expire",
                "description": "The time the login grace period expires as a UNIX timestamp.                            Default is 12 hours past the cookie's expiration time."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "The time when the authentication cookie expires as a UNIX timestamp.                            Default is 14 days from now."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication scheme. Values include 'auth', 'secure_auth', or 'logged_in'."
            }
        ],
        "type": "action"
    },
    {
        "text": "set_logged_in_cookie",
        "description": "Fires immediately before the logged-in authentication cookie is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$logged_in_cookie",
                "description": "The logged-in cookie."
            },
            {
                "type": "int",
                "name": "$expire",
                "description": "The time the login grace period expires as a UNIX timestamp.                                 Default is 12 hours past the cookie's expiration time."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "The time when the logged-in authentication cookie expires as a UNIX timestamp.                                 Default is 14 days from now."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication scheme. Default 'logged_in'."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie",
        "description": "Filters the authentication cookie.",
        "arguments": [
            {
                "type": "string",
                "name": "$cookie",
                "description": "Authentication cookie."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "The time the cookie expires as a UNIX timestamp."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Cookie scheme used. Accepts 'auth', 'secure_auth', or 'logged_in'."
            },
            {
                "type": "string",
                "name": "$token",
                "description": "User's session token used."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_cookie_malformed",
        "description": "Fires if an authentication cookie is malformed.",
        "arguments": [
            {
                "type": "string",
                "name": "$cookie",
                "description": "Malformed auth cookie."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Authentication scheme. Values include 'auth', 'secure_auth',                       or 'logged_in'."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_expired",
        "description": "Fires once an authentication cookie has expired.",
        "arguments": [
            {
                "type": "array",
                "name": "$cookie_elements",
                "description": "An array of data for the authentication cookie."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_bad_username",
        "description": "Fires if a bad username is entered in the user authentication process.",
        "arguments": [
            {
                "type": "array",
                "name": "$cookie_elements",
                "description": "An array of data for the authentication cookie."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_bad_hash",
        "description": "Fires if a bad authentication cookie hash is encountered.",
        "arguments": [
            {
                "type": "array",
                "name": "$cookie_elements",
                "description": "An array of data for the authentication cookie."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_cookie_bad_session_token",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "auth_cookie_valid",
        "description": "Fires once an authentication cookie has been validated.",
        "arguments": [
            {
                "type": "array",
                "name": "$cookie_elements",
                "description": "An array of data for the authentication cookie."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_logout",
        "description": "Fires after a user is logged-out.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "authenticate",
        "description": "Filters whether a set of user login credentials are valid.",
        "arguments": [
            {
                "type": "null|\\WP_User|\\WP_Error",
                "name": "$user",
                "description": "WP_User if the user is authenticated.                                        WP_Error or null otherwise."
            },
            {
                "type": "string",
                "name": "$username",
                "description": "Username or email address."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password"
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_login_failed",
        "description": "Fires after a user login has failed.",
        "arguments": [
            {
                "type": "string",
                "name": "$username",
                "description": "Username or email address."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_mail",
        "description": "Filters the wp_mail() arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "A compacted array of wp_mail() arguments, including the &quot;to&quot; email,                    subject, message, headers, and attachments values."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail_from",
        "description": "Filters the email address to send from.",
        "arguments": [
            {
                "type": "string",
                "name": "$from_email",
                "description": "Email address to send from."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail_from_name",
        "description": "Filters the name to associate with the \"from\" email address.",
        "arguments": [
            {
                "type": "string",
                "name": "$from_name",
                "description": "Name associated with the &quot;from&quot; email address."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail_content_type",
        "description": "Filters the wp_mail() content type.",
        "arguments": [
            {
                "type": "string",
                "name": "$content_type",
                "description": "Default wp_mail() content type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail_charset",
        "description": "Filters the default wp_mail() charset.",
        "arguments": [
            {
                "type": "string",
                "name": "$charset",
                "description": "Default email charset."
            }
        ],
        "type": "filter"
    },
    {
        "text": "phpmailer_init",
        "description": "Fires after PHPMailer is initialized.",
        "arguments": [
            {
                "type": "\\PHPMailer",
                "name": "",
                "description": "&amp;$phpmailer The PHPMailer instance, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "wp_mail_failed",
        "description": "Fires after a phpmailerException is caught.",
        "arguments": [
            {
                "type": "\\WP_Error",
                "name": "$error",
                "description": "A WP_Error object with the phpmailerException code, message, and an array                        containing the mail recipient, subject, message, headers, and attachments."
            }
        ],
        "type": "action"
    },
    {
        "text": "set_current_user",
        "description": "Fires after the current user is set.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "pre_set_site_transient_{$transient}",
        "description": "Filters the value of a specific site transient before it is set.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "New value of site transient."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "expiration_of_site_transient_{$transient}",
        "description": "Filters the expiration for a site transient before its value is set.",
        "arguments": [
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds. Use 0 for no expiration."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "New value of site transient."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set_site_transient_{$transient}",
        "description": "Fires after the value for a specific site transient has been set.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Site transient value."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "action"
    },
    {
        "text": "setted_site_transient",
        "description": "Fires after the value for a site transient has been set.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "The name of the site transient."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Site transient value."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_site_transient_{$transient}",
        "description": "Filters the value of an existing site transient.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$pre_site_transient",
                "description": "The default value to return if the site transient does not exist.                                   Any value other than false will short-circuit the retrieval                                   of the transient, and return the returned value."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_transient_{$transient}",
        "description": "Filters the value of an existing site transient.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of site transient."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_site_transient_{$transient}",
        "description": "Fires immediately before a specific site transient is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_site_transient",
        "description": "Fires after a transient is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "Deleted transient name."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_update_site_option_{$option}",
        "description": "Filters a specific network option before its value is updated.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "New value of the network option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "Old value of the network option."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_site_option_{$option}",
        "description": "Fires after the value of a specific network option has been successfully updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the network option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Current value of the network option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "Old value of the network option."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_site_option",
        "description": "Fires after the value of a network option has been successfully updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the network option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Current value of the network option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "Old value of the network option."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_delete_site_option_{$option}",
        "description": "Fires immediately before a specific network option is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_site_option_{$option}",
        "description": "Fires after a specific network option has been deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the network option."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_site_option",
        "description": "Fires after a network option has been deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the network option."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_add_site_option_{$option}",
        "description": "Filters the value of a specific network option before it is added.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of network option."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_site_option_{$option}",
        "description": "Fires after a specific network option has been successfully added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the network option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the network option."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_site_option",
        "description": "Fires after a network option has been successfully added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the network option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the network option."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_site_option_{$option}",
        "description": "Filters an existing network option before it is retrieved.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$pre_option",
                "description": "The default value to return if the option does not exist."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_site_option_{$option}",
        "description": "Filters a specific default network option.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$default",
                "description": "The value to return if the site option does not exist                        in the database."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_site_option_{$option}",
        "description": "This filter is documented in wp-includes\/option.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "default_site_option_{$option}",
        "description": "This filter is documented in wp-includes\/option.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "site_option_{$option}",
        "description": "Filters the value of an existing network option.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of network option."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_set_transient_{$transient}",
        "description": "Filters a specific transient before its value is set.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "New value of transient."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "expiration_of_transient_{$transient}",
        "description": "Filters the expiration for a transient before its value is set.",
        "arguments": [
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds. Use 0 for no expiration."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "New value of transient."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set_transient_{$transient}",
        "description": "Fires after the value for a specific transient has been set.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Transient value."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "The name of the transient."
            }
        ],
        "type": "action"
    },
    {
        "text": "setted_transient",
        "description": "Fires after the value for a transient has been set.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "The name of the transient."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Transient value."
            },
            {
                "type": "int",
                "name": "$expiration",
                "description": "Time until expiration in seconds."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_transient_{$transient}",
        "description": "Filters the value of an existing transient.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$pre_transient",
                "description": "The default value to return if the transient does not exist.                              Any value other than false will short-circuit the retrieval                              of the transient, and return the returned value."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "transient_{$transient}",
        "description": "Filters an existing transient's value.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of transient."
            },
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_transient_{$transient}",
        "description": "Fires immediately before a specific transient is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "Transient name."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_transient",
        "description": "Fires after a transient is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$transient",
                "description": "Deleted transient name."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_option",
        "description": "Fires immediately before an option is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to delete."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_option_{$option}",
        "description": "Fires after a specific option has been deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the deleted option."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_option",
        "description": "Fires after an option has been deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the deleted option."
            }
        ],
        "type": "action"
    },
    {
        "text": "default_option_{$option}",
        "description": "This filter is documented in wp-includes\/option.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "add_option",
        "description": "Fires before an option is added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to add."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the option."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_option_{$option}",
        "description": "Fires after a specific option has been added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to add."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the option."
            }
        ],
        "type": "action"
    },
    {
        "text": "added_option",
        "description": "Fires after an option has been added.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the added option."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the option."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_update_option_{$option}",
        "description": "Filters a specific option before its value is (maybe) serialized and updated.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new, unserialized option value."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_update_option",
        "description": "Filters an option before its value is (maybe) serialized and updated.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new, unserialized option value."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_option_{$option}",
        "description": "This filter is documented in wp-includes\/option.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "update_option",
        "description": "Fires immediately before an option value is updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the option to update."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_option_{$option}",
        "description": "Fires after the value of a specific option has been successfully updated.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "action"
    },
    {
        "text": "updated_option",
        "description": "Fires after the value of an option has been successfully updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$option",
                "description": "Name of the updated option."
            },
            {
                "type": "mixed",
                "name": "$old_value",
                "description": "The old option value."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "The new option value."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_option_{$option}",
        "description": "Filters the value of an existing option before it is retrieved.",
        "arguments": [
            {
                "type": "bool|mixed",
                "name": "$pre_option",
                "description": "Value to return instead of the option value.                               Default false to skip it."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_option_{$option}",
        "description": "Filters the default value for an option.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$default",
                "description": "The default value to return if the option does not exist                        in the database."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_option_{$option}",
        "description": "This filter is documented in wp-includes\/option.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "default_option_{$option}",
        "description": "This filter is documented in wp-includes\/option.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "option_{$option}",
        "description": "Filters the value of an existing option.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the option. If stored serialized, it will be                       unserialized prior to being returned."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "Option name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "nav_menu_attr_title",
        "description": "Filters a navigation menu item's title attribute.",
        "arguments": [
            {
                "type": "string",
                "name": "$item_title",
                "description": "The menu item title attribute."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_description",
        "description": "Filters a navigation menu item's description.",
        "arguments": [
            {
                "type": "string",
                "name": "$description",
                "description": "The menu item description."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_attr_title",
        "description": "This filter is documented in wp-includes\/nav-menu.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "nav_menu_description",
        "description": "This filter is documented in wp-includes\/nav-menu.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_setup_nav_menu_item",
        "description": "Filters a navigation menu item object.",
        "arguments": [
            {
                "type": "object",
                "name": "$menu_item",
                "description": "The menu item object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_nav_menu_items",
        "description": "Filters the navigation menu items being returned.",
        "arguments": [
            {
                "type": "array",
                "name": "$items",
                "description": "An array of menu item post objects."
            },
            {
                "type": "object",
                "name": "$menu",
                "description": "The menu object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to retrieve menu item objects."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_nav_menus",
        "description": "Filters the navigation menu objects being returned.",
        "arguments": [
            {
                "type": "array",
                "name": "$menus",
                "description": "An array of menu objects."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to retrieve menu objects."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_add_nav_menu_item",
        "description": "Fires immediately after a new navigation menu item has been added.",
        "arguments": [
            {
                "type": "int",
                "name": "$menu_id",
                "description": "ID of the updated menu."
            },
            {
                "type": "int",
                "name": "$menu_item_db_id",
                "description": "ID of the new menu item."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to update\/add the menu item."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_update_nav_menu_item",
        "description": "Fires after a navigation menu item has been updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$menu_id",
                "description": "ID of the updated menu."
            },
            {
                "type": "int",
                "name": "$menu_item_db_id",
                "description": "ID of the updated menu item."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments used to update a menu item."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_create_nav_menu",
        "description": "Fires after a navigation menu is successfully created.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "ID of the new menu."
            },
            {
                "type": "array",
                "name": "$menu_data",
                "description": "An array of menu data."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_update_nav_menu",
        "description": "Fires after a navigation menu has been successfully updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$menu_id",
                "description": "ID of the updated menu."
            },
            {
                "type": "array",
                "name": "$menu_data",
                "description": "An array of menu data."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_delete_nav_menu",
        "description": "Fires after a navigation menu has been successfully deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$term_id",
                "description": "ID of the deleted menu."
            }
        ],
        "type": "action"
    },
    {
        "text": "has_nav_menu",
        "description": "Filters whether a nav menu is assigned to the specified location.",
        "arguments": [
            {
                "type": "bool",
                "name": "$has_nav_menu",
                "description": "Whether there is a menu assigned to a location."
            },
            {
                "type": "string",
                "name": "$location",
                "description": "Menu location."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_nav_menu_object",
        "description": "Filters the nav_menu term retrieved for wp_get_nav_menu_object().",
        "arguments": [
            {
                "type": "object|false",
                "name": "$menu_obj",
                "description": "Term from nav_menu taxonomy, or false if nothing had been found."
            },
            {
                "type": "string",
                "name": "$menu",
                "description": "The menu ID, slug, or name passed to wp_get_nav_menu_object()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu_args",
        "description": "Filters the arguments used to display a navigation menu.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Array of wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_wp_nav_menu",
        "description": "Filters whether to short-circuit the wp_nav_menu() output.",
        "arguments": [
            {
                "type": "string|null",
                "name": "$output",
                "description": "Nav menu output to short-circuit with. Default null."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu_container_allowedtags",
        "description": "Filters the list of HTML tags that are valid for use as menu containers.",
        "arguments": [
            {
                "type": "array",
                "name": "$tags",
                "description": "The acceptable HTML tags for use as menu containers.                    Default is array containing 'div' and 'nav'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu_objects",
        "description": "Filters the sorted list of menu item objects before generating the menu's HTML.",
        "arguments": [
            {
                "type": "array",
                "name": "$sorted_menu_items",
                "description": "The menu items, sorted by each menu item's menu order."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu_items",
        "description": "Filters the HTML list content for navigation menus.",
        "arguments": [
            {
                "type": "string",
                "name": "$items",
                "description": "The HTML list content for the menu items."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu_{$menu->slug}_items",
        "description": "Filters the HTML list content for a specific navigation menu.",
        "arguments": [
            {
                "type": "string",
                "name": "$items",
                "description": "The HTML list content for the menu items."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_nav_menu",
        "description": "Filters the HTML content for navigation menus.",
        "arguments": [
            {
                "type": "string",
                "name": "$nav_menu",
                "description": "The HTML content for the navigation menu."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object containing wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ms_loaded",
        "description": "Fires after the current site and network have been detected and loaded in multisite's bootstrap.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "ms_network_not_found",
        "description": "Fires when a network cannot be found based on the requested domain and path.",
        "arguments": [
            {
                "type": "string",
                "name": "$domain",
                "description": "The domain used to search for a network."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The path used to search for a path."
            }
        ],
        "type": "action"
    },
    {
        "text": "ms_network_not_found",
        "description": "This action is documented in wp-includes\/ms-settings.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "ms_site_not_found",
        "description": "Fires when a network can be determined but a site cannot.",
        "arguments": [
            {
                "type": "object",
                "name": "$current_site",
                "description": "The network that had been determined."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The domain used to search for a site."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The path used to search for a site."
            }
        ],
        "type": "action"
    },
    {
        "text": "site_by_path_segments_count",
        "description": "Filters the number of path segments to consider when searching for a site.",
        "arguments": [
            {
                "type": "int|null",
                "name": "$segments",
                "description": "The number of path segments to consider. WordPress by default looks at                           one path segment following the network path. The function default of                           null only makes sense when you know the requested path should match a site."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path, in full."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_site_by_path",
        "description": "Determine a site by its domain and path.",
        "arguments": [
            {
                "type": "null|bool|object",
                "name": "$site",
                "description": "Site value to return by path."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path, in full."
            },
            {
                "type": "int|null",
                "name": "$segments",
                "description": "The suggested number of paths to consult.                                   Default null, meaning the entire path was to be consulted."
            },
            {
                "type": "array",
                "name": "$paths",
                "description": "The paths to search for, based on $path and $segments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ms_site_check",
        "description": "Filters checking the status of the current blog.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "null Whether to skip the blog status check. Default null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "subdirectory_reserved_names",
        "description": "Filters reserved site names on a sub-directory Multisite install.",
        "arguments": [
            {
                "type": "array",
                "name": "$subdirectory_reserved_names",
                "description": "Array of reserved names."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_is_large_network",
        "description": "Filters whether the network is considered large.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_large_network",
                "description": "Whether the network has more than 10000 users or sites."
            },
            {
                "type": "string",
                "name": "$component",
                "description": "The component to count. Accepts 'users', or 'sites'."
            },
            {
                "type": "int",
                "name": "$count",
                "description": "The count of items for the component."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_is_large_network",
        "description": "This filter is documented in wp-includes\/ms-functions.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_space_allowed",
        "description": "Filters the upload quota for the current site.",
        "arguments": [
            {
                "type": "int",
                "name": "$space_allowed",
                "description": "Upload quota in megabytes for the current blog."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_space_used",
        "description": "Filters the amount of storage space used by the current site.",
        "arguments": [
            {
                "type": "int|bool",
                "name": "$space_used",
                "description": "The amount of used space, in megabytes. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "enable_live_network_counts",
        "description": "This filter is documented in wp-includes\/ms-functions.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "enable_live_network_counts",
        "description": "Filters whether to update network site or user counts when a new site is created.",
        "arguments": [
            {
                "type": "bool",
                "name": "$small_network",
                "description": "Whether the network is considered small."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context. Either 'users' or 'sites'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "added_existing_user",
        "description": "Fires immediately after an existing user is added to a site.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "mixed",
                "name": "$result",
                "description": "True on success or a WP_Error object if the user doesn't exist."
            }
        ],
        "type": "action"
    },
    {
        "text": "blog_redirect_404",
        "description": "Filters the redirect URL for 404s on the main site.",
        "arguments": [
            {
                "type": "string",
                "name": "$no_blog_redirect",
                "description": "The redirect URL defined in NOBLOGREDIRECT."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_welcome_user_notification",
        "description": "Filters whether to bypass the welcome email after user activation.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_welcome_user_email",
        "description": "Filters the content of the welcome email after user activation.",
        "arguments": [
            {
                "type": "string",
                "name": "$welcome_email",
                "description": "The message body of the account activation success email."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_welcome_user_subject",
        "description": "Filters the subject of the welcome email after user activation.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the email."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_welcome_notification",
        "description": "Filters whether to bypass the welcome email after site activation.",
        "arguments": [
            {
                "type": "int|bool",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_welcome_email",
        "description": "Filters the content of the welcome email after site activation.",
        "arguments": [
            {
                "type": "string",
                "name": "$welcome_email",
                "description": "Message body of the email."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_welcome_subject",
        "description": "Filters the subject of the welcome email after site activation.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the email."
            }
        ],
        "type": "filter"
    },
    {
        "text": "domain_exists",
        "description": "Filters whether a blogname is taken.",
        "arguments": [
            {
                "type": "int|null",
                "name": "$result",
                "description": "The blog_id if the blogname exists, null otherwise."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Domain to be checked."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path to be checked."
            },
            {
                "type": "int",
                "name": "$site_id",
                "description": "Site ID. Relevant only on multi-network installs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "newuser_notify_siteadmin",
        "description": "Filters the message body of the new user activation email sent to the network administrator.",
        "arguments": [
            {
                "type": "string",
                "name": "$msg",
                "description": "Email body."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User instance of the new user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "newblog_notify_siteadmin",
        "description": "Filters the message body of the new site activation email sent to the network administrator.",
        "arguments": [
            {
                "type": "string",
                "name": "$msg",
                "description": "Email body."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_new_blog",
        "description": "Fires immediately after a new site is created.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Site domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Site path."
            },
            {
                "type": "int",
                "name": "$site_id",
                "description": "Site ID. Only relevant on multi-network installs."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Meta data. Used to set initial site options."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_new_user",
        "description": "Fires immediately after a new user is created.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_activate_user",
        "description": "Fires immediately after a new user is activated.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "int",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_activate_blog",
        "description": "Fires immediately after a site is activated.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "int",
                "name": "$password",
                "description": "User password."
            },
            {
                "type": "string",
                "name": "$signup_title",
                "description": "Site title."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_signup_user_notification",
        "description": "Filters whether to bypass the email notification for new user sign-up.",
        "arguments": [
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_user()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_user_notification_email",
        "description": "Filters the content of the notification email for new user sign-up.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content of the notification email."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_user()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_user_notification_subject",
        "description": "Filters the subject of the notification email of new user signup.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the notification email."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_user()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Signup meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_blog_notification",
        "description": "Filters whether to bypass the new site email notification.",
        "arguments": [
            {
                "type": "string|bool",
                "name": "$domain",
                "description": "Site domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Site path."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_blog()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "By default, contains the requested privacy setting and lang_id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_blog_notification_email",
        "description": "Filters the message content of the new blog notification email.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content of the notification email."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Site domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Site path."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_blog()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "By default, contains the requested privacy setting and lang_id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_signup_blog_notification_subject",
        "description": "Filters the subject of the new blog notification email.",
        "arguments": [
            {
                "type": "string",
                "name": "$subject",
                "description": "Subject of the notification email."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Site domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Site path."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Site title."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "User login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "Activation key created in wpmu_signup_blog()."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "By default, contains the requested privacy setting and lang_id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "after_signup_user",
        "description": "Fires after a user's signup information has been written to the database.",
        "arguments": [
            {
                "type": "string",
                "name": "$user",
                "description": "The user's requested login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "The user's email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "The user's activation key"
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Additional signup meta. By default, this is an empty array."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_signup_site",
        "description": "Fires after site signup information has been written to the database.",
        "arguments": [
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "The requested site title."
            },
            {
                "type": "string",
                "name": "$user",
                "description": "The user's requested login name."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "The user's email address."
            },
            {
                "type": "string",
                "name": "$key",
                "description": "The user's activation key"
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "By default, contains the requested privacy setting and lang_id."
            }
        ],
        "type": "action"
    },
    {
        "text": "newblogname",
        "description": "Filters the new site name during registration.",
        "arguments": [
            {
                "type": "string",
                "name": "$blogname",
                "description": "Site name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_validate_blog_signup",
        "description": "Filters site details and error messages following registration.",
        "arguments": [
            {
                "type": "array",
                "name": "$result",
                "description": "{     Array of domain, path, blog name, blog title, user and error messages.     @type string         $domain     Domain for the site.     @type string         $path       Path for the site. Used in subdirectory installs.     @type string         $blogname   The unique site name (slug).     @type string         $blog_title Blog title.     @type string|WP_User $user       By default, an empty string. A user object if provided.     @type WP_Error       $errors     WP_Error containing any errors found. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "illegal_user_logins",
        "description": "This filter is documented in wp-includes\/user.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wpmu_validate_user_signup",
        "description": "Filters the validated user registration details.",
        "arguments": [
            {
                "type": "array",
                "name": "$result",
                "description": "{     The array of user name, email and the error messages.     @type string   $user_name     Sanitized and unique username.     @type string   $orig_username Original username.     @type string   $user_email    User email address.     @type WP_Error $errors        WP_Error object containing any errors found. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "is_email_address_unsafe",
        "description": "Filters whether an email address is unsafe.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_email_address_unsafe",
                "description": "Whether the email address is &quot;unsafe&quot;. Default false."
            },
            {
                "type": "string",
                "name": "$user_email",
                "description": "User email address."
            }
        ],
        "type": "filter"
    },
    {
        "text": "remove_user_from_blog",
        "description": "Fires before a user is removed from a site.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_user_to_blog",
        "description": "Fires immediately after a user is added to a site.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$role",
                "description": "User role."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "graceful_fail",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "graceful_fail_template",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "clean_network_cache",
        "description": "Fires immediately after a network has been removed from the object cache.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "Network ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_network",
        "description": "Fires after a network is retrieved.",
        "arguments": [
            {
                "type": "\\WP_Network",
                "name": "$_network",
                "description": "Network data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "make_spam_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "make_ham_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "mature_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "unmature_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "archive_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "unarchive_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "make_delete_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "make_undelete_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "update_blog_public",
        "description": "Fires after the current blog's 'public' setting is updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            },
            {
                "type": "string",
                "name": "$value",
                "description": "The value of blog status."
            }
        ],
        "type": "action"
    },
    {
        "text": "switch_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "switch_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "switch_blog",
        "description": "Fires when the blog is switched.",
        "arguments": [
            {
                "type": "int",
                "name": "$new_blog",
                "description": "New blog ID."
            },
            {
                "type": "int",
                "name": "$new_blog",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "switch_blog",
        "description": "This filter is documented in wp-includes\/ms-blogs.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "blog_option_{$option}",
        "description": "Filters a blog option value.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The option value."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Blog ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_site",
        "description": "Fires after a site is retrieved.",
        "arguments": [
            {
                "type": "\\WP_Site",
                "name": "$_site",
                "description": "Site data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "clean_site_cache",
        "description": "Fires immediately after a site has been removed from the object cache.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "Blog ID."
            },
            {
                "type": "\\WP_Site",
                "name": "$blog",
                "description": "Site object."
            },
            {
                "type": "string",
                "name": "$domain_path_key",
                "description": "md5 hash of domain and path."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_spam_blog",
        "description": "Fires when the blog status is changed to 'spam'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_ham_blog",
        "description": "Fires when the blog status is changed to 'ham'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "mature_blog",
        "description": "Fires when the blog status is changed to 'mature'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "unmature_blog",
        "description": "Fires when the blog status is changed to 'unmature'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "archive_blog",
        "description": "Fires when the blog status is changed to 'archived'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "unarchive_blog",
        "description": "Fires when the blog status is changed to 'unarchived'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_delete_blog",
        "description": "Fires when the blog status is changed to 'deleted'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_undelete_blog",
        "description": "Fires when the blog status is changed to 'undeleted'.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "refresh_blog_details",
        "description": "Fires after the blog details cache is cleared.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Blog ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "blog_details",
        "description": "Filters a blog's details.",
        "arguments": [
            {
                "type": "object",
                "name": "$details",
                "description": "The blog details."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_blog_updated",
        "description": "Fires after the blog details are updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "Site ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "register_meta_args",
        "description": "Filters the registration arguments when registering meta.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Array of meta registration arguments."
            },
            {
                "type": "array",
                "name": "$defaults",
                "description": "Array of default arguments."
            },
            {
                "type": "string",
                "name": "$object_type",
                "description": "Object type."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_{$object_type}_meta_{$meta_key}",
        "description": "Filters the sanitization of a specific meta key of a specific meta type.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value to sanitize."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "string",
                "name": "$object_type",
                "description": "Object type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "is_protected_meta",
        "description": "Filters whether a meta key is protected.",
        "arguments": [
            {
                "type": "bool",
                "name": "$protected",
                "description": "Whether the key is protected. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "string",
                "name": "$meta_type",
                "description": "Meta type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_{$meta_type}_meta",
        "description": "This action is documented in wp-includes\/meta.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "delete_{$meta_type}meta",
        "description": "Fires immediately before deleting post or comment metadata of a specific type.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of the metadata entry to delete."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_{$meta_type}_meta",
        "description": "This action is documented in wp-includes\/meta.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "deleted_{$meta_type}meta",
        "description": "Fires immediately after deleting post or comment metadata of a specific type.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_ids",
                "description": "Deleted metadata entry ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_{$meta_type}_meta",
        "description": "This action is documented in wp-includes\/meta.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "update_postmeta",
        "description": "This action is documented in wp-includes\/meta.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "updated_{$meta_type}_meta",
        "description": "This action is documented in wp-includes\/meta.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "updated_postmeta",
        "description": "This action is documented in wp-includes\/meta.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "get_{$meta_type}_metadata",
        "description": "This filter is documented in wp-includes\/meta.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_{$meta_type}_metadata",
        "description": "Filters whether to retrieve metadata of a specific type.",
        "arguments": [
            {
                "type": "null|array|string",
                "name": "$value",
                "description": "The value get_metadata() should return - a single metadata value,                                     or an array of values."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "bool",
                "name": "$single",
                "description": "Whether to return only the first value of the specified $meta_key."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_{$meta_type}_metadata",
        "description": "Filters whether to delete metadata of a specific type.",
        "arguments": [
            {
                "type": "null|bool",
                "name": "$delete",
                "description": "Whether to allow metadata deletion of the given type."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value. Must be serializable if non-scalar."
            },
            {
                "type": "bool",
                "name": "$delete_all",
                "description": "Whether to delete the matching metadata entries                              for all objects, ignoring the specified $object_id.                              Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_{$meta_type}_meta",
        "description": "Fires immediately before deleting metadata of a specific type.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_ids",
                "description": "An array of metadata entry IDs to delete."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_postmeta",
        "description": "Fires immediately before deleting metadata for a post.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_ids",
                "description": "An array of post metadata entry IDs to delete."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_{$meta_type}_meta",
        "description": "Fires immediately after deleting metadata of a specific type.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_ids",
                "description": "An array of deleted metadata entry IDs."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_postmeta",
        "description": "Fires immediately after deleting metadata for a post.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_ids",
                "description": "An array of deleted post metadata entry IDs."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_{$meta_type}_metadata",
        "description": "Filters whether to update metadata of a specific type.",
        "arguments": [
            {
                "type": "null|bool",
                "name": "$check",
                "description": "Whether to allow updating metadata for the given type."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value. Must be serializable if non-scalar."
            },
            {
                "type": "mixed",
                "name": "$prev_value",
                "description": "Optional. If specified, only update existing                              metadata entries with the specified value.                              Otherwise, update all entries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_{$meta_type}_meta",
        "description": "Fires immediately before updating metadata of a specific type.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of the metadata entry to update."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "update_postmeta",
        "description": "Fires immediately before updating a post's metadata.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of metadata entry to update."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "updated_{$meta_type}_meta",
        "description": "Fires immediately after updating metadata of a specific type.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of updated metadata entry."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "updated_postmeta",
        "description": "Fires immediately after updating a post's metadata.",
        "arguments": [
            {
                "type": "int",
                "name": "$meta_id",
                "description": "ID of updated metadata entry."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_{$meta_type}_metadata",
        "description": "Filters whether to add metadata of a specific type.",
        "arguments": [
            {
                "type": "null|bool",
                "name": "$check",
                "description": "Whether to allow adding metadata for the given type."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value. Must be serializable if non-scalar."
            },
            {
                "type": "bool",
                "name": "$unique",
                "description": "Whether the specified meta key should be unique                              for the object. Optional. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_{$meta_type}_meta",
        "description": "Fires immediately before meta of a specific type is added.",
        "arguments": [
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "added_{$meta_type}_meta",
        "description": "Fires immediately after meta of a specific type is added.",
        "arguments": [
            {
                "type": "int",
                "name": "$mid",
                "description": "The meta ID after successful update."
            },
            {
                "type": "int",
                "name": "$object_id",
                "description": "Object ID."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Meta key."
            },
            {
                "type": "mixed",
                "name": "$meta_value",
                "description": "Meta value."
            }
        ],
        "type": "action"
    },
    {
        "text": "attachment_url_to_postid",
        "description": "Filters an attachment id found by URL.",
        "arguments": [
            {
                "type": "int|null",
                "name": "$post_id",
                "description": "The post_id (if any) found by the function."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The URL being looked up."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_post_gallery",
        "description": "Filters the first-found post gallery.",
        "arguments": [
            {
                "type": "array",
                "name": "$gallery",
                "description": "The first-found post gallery."
            },
            {
                "type": "int|\\WP_Post",
                "name": "$post",
                "description": "Post ID or object."
            },
            {
                "type": "array",
                "name": "$galleries",
                "description": "Associative array of all found post galleries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_post_galleries",
        "description": "Filters the list of all found galleries in the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$galleries",
                "description": "Associative array of all found post galleries."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_embedded_in_content_allowed_types",
        "description": "Filters the embedded media types that are allowed to be returned from the content blob.",
        "arguments": [
            {
                "type": "array",
                "name": "$allowed_media_types",
                "description": "An array of allowed media types. Default media types are                                   'audio', 'video', 'object', 'embed', and 'iframe'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_attached_media_args",
        "description": "Filters arguments used to retrieve media attached to the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Post query arguments."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Mime type of the desired media."
            },
            {
                "type": "mixed",
                "name": "$post",
                "description": "Post ID or object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_attached_media",
        "description": "Filters the list of media attached to the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$children",
                "description": "Associative array of media attached to the given post."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Mime type of the media desired."
            },
            {
                "type": "mixed",
                "name": "$post",
                "description": "Post ID or object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_tabs",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "disable_captions",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "media_view_settings",
        "description": "Filters the media view settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$settings",
                "description": "List of media view settings."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_view_strings",
        "description": "Filters the media view strings.",
        "arguments": [
            {
                "type": "array",
                "name": "$strings",
                "description": "List of media view strings."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_enqueue_media",
        "description": "Fires at the conclusion of wp_enqueue_media().",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "image_size_names_choose",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "image_downsize",
        "description": "This filter is documented in wp-includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_prepare_attachment_for_js",
        "description": "Filters the attachment data prepared for JavaScript.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "Array of prepared attachment data."
            },
            {
                "type": "int|object",
                "name": "$attachment",
                "description": "Attachment ID or object."
            },
            {
                "type": "array",
                "name": "$meta",
                "description": "Array of attachment meta data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plupload_default_settings",
        "description": "Filters the Plupload default settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$defaults",
                "description": "Default Plupload settings array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plupload_default_params",
        "description": "Filters the Plupload default parameters.",
        "arguments": [
            {
                "type": "array",
                "name": "$params",
                "description": "Default Plupload parameters array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_image_editors",
        "description": "Filters the list of image editing library classes.",
        "arguments": [
            {
                "type": "array",
                "name": "$image_editors",
                "description": "List of available image editors. Defaults are                             'WP_Image_Editor_Imagick', 'WP_Image_Editor_GD'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_size_limit",
        "description": "Filters the maximum upload size allowed in php.ini.",
        "arguments": [
            {
                "type": "int",
                "name": "$size",
                "description": "Max upload size limit in bytes."
            },
            {
                "type": "int",
                "name": "$u_bytes",
                "description": "Maximum upload filesize in bytes."
            },
            {
                "type": "int",
                "name": "$p_bytes",
                "description": "Maximum size of POST data in bytes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$adjacent}_image_link",
        "description": "Filters the adjacent image link.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Adjacent image HTML markup."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Attachment ID"
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Image size."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Link text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_shortcode_override",
        "description": "Filters the default video shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Empty variable to be replaced with shortcode markup."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes of the video shortcode."
            },
            {
                "type": "string",
                "name": "$content",
                "description": "Video shortcode content."
            },
            {
                "type": "int",
                "name": "$instance",
                "description": "Unique numeric ID of this video shortcode instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_shortcode_library",
        "description": "Filters the media library used for the video shortcode.",
        "arguments": [
            {
                "type": "string",
                "name": "$library",
                "description": "Media library used for the video shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_shortcode_class",
        "description": "Filters the class attribute for the video shortcode output container.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "CSS class or list of space-separated classes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_shortcode",
        "description": "Filters the output of the video shortcode.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Video shortcode HTML output."
            },
            {
                "type": "array",
                "name": "$atts",
                "description": "Array of video shortcode attributes."
            },
            {
                "type": "string",
                "name": "$video",
                "description": "Video file."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$library",
                "description": "Media library used for the video shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_extensions",
        "description": "Filters the list of supported video formats.",
        "arguments": [
            {
                "type": "array",
                "name": "$extensions",
                "description": "An array of support video formats. Defaults are                          'mp4', 'm4v', 'webm', 'ogv', 'wmv', 'flv'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_shortcode_override",
        "description": "Filters the default audio shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Empty variable to be replaced with shortcode markup."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes of the shortcode. @see wp_audio_shortcode()"
            },
            {
                "type": "string",
                "name": "$content",
                "description": "Shortcode content."
            },
            {
                "type": "int",
                "name": "$instance",
                "description": "Unique numeric ID of this audio shortcode instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_shortcode_library",
        "description": "Filters the media library used for the audio shortcode.",
        "arguments": [
            {
                "type": "string",
                "name": "$library",
                "description": "Media library used for the audio shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_shortcode_class",
        "description": "Filters the class attribute for the audio shortcode output container.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "CSS class or list of space-separated classes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_shortcode",
        "description": "Filters the audio shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Audio shortcode HTML output."
            },
            {
                "type": "array",
                "name": "$atts",
                "description": "Array of audio shortcode attributes."
            },
            {
                "type": "string",
                "name": "$audio",
                "description": "Audio file."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$library",
                "description": "Media library used for the audio shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_id3_keys",
        "description": "Filters the editable list of keys to look up data from an attachment's metadata.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "Key\/value pairs of field keys to labels."
            },
            {
                "type": "\\WP_Post",
                "name": "$attachment",
                "description": "Attachment object."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context. Accepts 'edit', 'display'. Default 'display'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_extensions",
        "description": "Filters the list of supported audio formats.",
        "arguments": [
            {
                "type": "array",
                "name": "$extensions",
                "description": "An array of support audio formats. Defaults are                          'mp3', 'ogg', 'wma', 'm4a', 'wav'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mediaelement_fallback",
        "description": "Filters the Mediaelement fallback output for no-JS.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Fallback output for no-JS."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "Media file URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_playlist",
        "description": "Filters the playlist output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Playlist output. Default empty."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of shortcode attributes."
            },
            {
                "type": "int",
                "name": "$instance",
                "description": "Unique numeric ID of this playlist shortcode instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_playlist_scripts",
        "description": "Prints and enqueues playlist scripts, styles, and JavaScript templates.",
        "arguments": [
            {
                "type": "string",
                "name": "$type",
                "description": "Type of playlist. Possible values are 'audio' or 'video'."
            },
            {
                "type": "string",
                "name": "$style",
                "description": "The 'theme' for the playlist. Core provides 'light' and 'dark'."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_gallery",
        "description": "Filters the default gallery shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The gallery output. Default empty."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes of the gallery shortcode."
            },
            {
                "type": "int",
                "name": "$instance",
                "description": "Unique numeric ID of this gallery shortcode instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "use_default_gallery_style",
        "description": "Filters whether to print default gallery styles.",
        "arguments": [
            {
                "type": "bool",
                "name": "$print",
                "description": "Whether to print default gallery styles.                    Defaults to false if the theme supports HTML5 galleries.                    Otherwise, defaults to true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "gallery_style",
        "description": "Filters the default gallery shortcode CSS styles.",
        "arguments": [
            {
                "type": "string",
                "name": "$gallery_style",
                "description": "Default CSS styles and opening HTML div container                              for the gallery shortcode output."
            }
        ],
        "type": "filter"
    },
    {
        "text": "img_caption_shortcode",
        "description": "Filters the default caption shortcode output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The caption output. Default empty."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes of the caption shortcode."
            },
            {
                "type": "string",
                "name": "$content",
                "description": "The image element, possibly wrapped in a hyperlink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "img_caption_shortcode_width",
        "description": "Filters the width of an image's caption.",
        "arguments": [
            {
                "type": "int",
                "name": "$width",
                "description": "Width of the caption in pixels. To remove this inline style,                         return zero."
            },
            {
                "type": "array",
                "name": "$atts",
                "description": "Attributes of the caption shortcode."
            },
            {
                "type": "string",
                "name": "$content",
                "description": "The image element, possibly wrapped in a hyperlink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_calculate_image_sizes",
        "description": "Filters the output of 'wp_calculate_image_sizes()'.",
        "arguments": [
            {
                "type": "string",
                "name": "$sizes",
                "description": "A source size value for use in a 'sizes' attribute."
            },
            {
                "type": "array|string",
                "name": "$size",
                "description": "Requested size. Image size or array of width and height values                                    in pixels (in that order)."
            },
            {
                "type": "string|null",
                "name": "$image_src",
                "description": "The URL to the image file or null."
            },
            {
                "type": "array|null",
                "name": "$image_meta",
                "description": "The image meta data as returned by wp_get_attachment_metadata() or null."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Image attachment ID of the original image or 0."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_calculate_image_srcset_meta",
        "description": "Let plugins pre-filter the image meta to be able to fix inconsistencies in the stored data.",
        "arguments": [
            {
                "type": "array",
                "name": "$image_meta",
                "description": "The image meta data as returned by 'wp_get_attachment_metadata()'."
            },
            {
                "type": "array",
                "name": "$size_array",
                "description": "Array of width and height values in pixels (in that order)."
            },
            {
                "type": "string",
                "name": "$image_src",
                "description": "The 'src' of the image."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "The image attachment ID or 0 if not supplied."
            }
        ],
        "type": "filter"
    },
    {
        "text": "max_srcset_image_width",
        "description": "Filters the maximum image width to be included in a 'srcset' attribute.",
        "arguments": [
            {
                "type": "int",
                "name": "$max_width",
                "description": "The maximum image width to be included in the 'srcset'. Default '1600'."
            },
            {
                "type": "array",
                "name": "$size_array",
                "description": "Array of width and height values in pixels (in that order)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_calculate_image_srcset",
        "description": "Filters an image's 'srcset' sources.",
        "arguments": [
            {
                "type": "array",
                "name": "$sources",
                "description": "{     One or more arrays of source data to include in the 'srcset'.     @type array $width {         @type string $url        The URL of an image source.         @type string $descriptor The descriptor type used in the image candidate string,                                  either 'w' or 'x'.         @type int    $value      The source width if paired with a 'w' descriptor, or a                                  pixel density value if paired with an 'x' descriptor.     } }"
            },
            {
                "type": "array",
                "name": "$size_array",
                "description": "Array of width and height values in pixels (in that order)."
            },
            {
                "type": "string",
                "name": "$image_src",
                "description": "The 'src' of the image."
            },
            {
                "type": "array",
                "name": "$image_meta",
                "description": "The image meta data as returned by 'wp_get_attachment_metadata()'."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Image attachment ID or 0."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_image_attributes",
        "description": "Filters the list of attachment image attributes.",
        "arguments": [
            {
                "type": "array",
                "name": "$attr",
                "description": "Attributes for the image markup."
            },
            {
                "type": "\\WP_Post",
                "name": "$attachment",
                "description": "Image attachment post."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "Requested size. Image size or array of width and height values                                 (in that order). Default 'thumbnail'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "icon_dir",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_get_attachment_image_src",
        "description": "Filters the image src result.",
        "arguments": [
            {
                "type": "array|false",
                "name": "$image",
                "description": "Either array with src, width &amp; height, icon src, or false."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Image attachment ID."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "Size of image. Image size or array of width and height values                                    (in that order). Default 'thumbnail'."
            },
            {
                "type": "bool",
                "name": "$icon",
                "description": "Whether the image should be treated as an icon. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "intermediate_image_sizes",
        "description": "Filters the list of intermediate image sizes.",
        "arguments": [
            {
                "type": "array",
                "name": "$image_sizes",
                "description": "An array of intermediate image sizes. Defaults                           are 'thumbnail', 'medium', 'medium_large', 'large'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_get_intermediate_size",
        "description": "Filters the output of image_get_intermediate_size()",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "Array of file relative path, width, and height on success. May also include                              file absolute path and URL."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post_id of the image attachment"
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "Registered image size or flat array of initially-requested height and width                              dimensions (in that order)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_resize_dimensions",
        "description": "Filters whether to preempt calculating the image resize dimensions.",
        "arguments": [
            {
                "type": "null|mixed",
                "name": "$null",
                "description": "Whether to preempt output of the resize dimensions."
            },
            {
                "type": "int",
                "name": "$orig_w",
                "description": "Original width in pixels."
            },
            {
                "type": "int",
                "name": "$orig_h",
                "description": "Original height in pixels."
            },
            {
                "type": "int",
                "name": "$dest_w",
                "description": "New width in pixels."
            },
            {
                "type": "int",
                "name": "$dest_h",
                "description": "New height in pixels."
            },
            {
                "type": "bool|array",
                "name": "$crop",
                "description": "Whether to crop image to specified width and height or resize.                           An array can specify positioning of the crop area. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_constrain_dimensions",
        "description": "Filters dimensions to constrain down-sampled images to.",
        "arguments": [
            {
                "type": "array",
                "name": "$dimensions",
                "description": "The image width and height."
            },
            {
                "type": "int",
                "name": "$current_width",
                "description": "The current width of the image."
            },
            {
                "type": "int",
                "name": "$current_height",
                "description": "The current height of the image."
            },
            {
                "type": "int",
                "name": "$max_width",
                "description": "The maximum width permitted."
            },
            {
                "type": "int",
                "name": "$max_height",
                "description": "The maximum height permitted."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_image_tag_class",
        "description": "Filters the value of the attachment's image tag class attribute.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "CSS class name or space-separated list of classes."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$align",
                "description": "Part of the class name for aligning the image."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "Size of image. Image size or array of width and height values (in that order).                            Default 'medium'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_image_tag",
        "description": "Filters the HTML content for the image tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "HTML content for the image."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$alt",
                "description": "Alternate text."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Attachment title."
            },
            {
                "type": "string",
                "name": "$align",
                "description": "Part of the class name for aligning the image."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "Size of image. Image size or array of width and height values (in that order).                            Default 'medium'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_downsize",
        "description": "Filters whether to preempt the output of image_downsize().",
        "arguments": [
            {
                "type": "bool",
                "name": "$downsize",
                "description": "Whether to short-circuit the image downsize. Default false."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Attachment ID for image."
            },
            {
                "type": "array|string",
                "name": "$size",
                "description": "Size of image. Image size or array of width and height values (in that order).                               Default 'medium'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editor_max_image_size",
        "description": "Filters the maximum image size dimensions for the editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$max_image_size",
                "description": "An array with the width as the first element,                                     and the height as the second element."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "Size of what the result image should be."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context the image is being resized for.                                     Possible values are 'display' (like in a theme)                                     or 'edit' (like inserting into an editor)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_ui_over_quota",
        "description": "This action is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "pre-upload-ui",
        "description": "This action is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "pre-plupload-upload-ui",
        "description": "This action is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "post-plupload-upload-ui",
        "description": "This action is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "post-plupload-upload-ui",
        "description": "This action is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "post-upload-ui",
        "description": "This action is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "image_size_names_choose",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "image_size_names_choose",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "disable_captions",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "disable_captions",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "image_size_names_choose",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "print_media_templates",
        "description": "Fires when the custom Backbone media templates are printed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_doing_ajax",
        "description": "Filters whether the current request is a WordPress Ajax request.",
        "arguments": [
            {
                "type": "bool",
                "name": "$wp_doing_ajax",
                "description": "Whether the current request is a WordPress Ajax request."
            }
        ],
        "type": "filter"
    },
    {
        "text": "shutdown",
        "description": "Fires just before PHP shuts down execution.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "enable_wp_debug_mode_checks",
        "description": "Filters whether to allow the debug mode check to occur.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enable_debug_mode",
                "description": "Whether to enable debug mode checks to occur. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "enable_maintenance_mode",
        "description": "Filters whether to enable maintenance mode.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enable_checks",
                "description": "Whether to enable maintenance mode. Default true."
            },
            {
                "type": "int",
                "name": "$upgrading",
                "description": "The timestamp set in the .maintenance file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "parent_theme_file_path",
        "description": "Filters the path to a file in the parent theme.",
        "arguments": [
            {
                "type": "string",
                "name": "$path",
                "description": "The file path."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "The requested file to search for."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_file_path",
        "description": "Filters the path to a file in the theme.",
        "arguments": [
            {
                "type": "string",
                "name": "$path",
                "description": "The file path."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "The requested file to search for."
            }
        ],
        "type": "filter"
    },
    {
        "text": "parent_theme_file_uri",
        "description": "Filters the URL to a file in the parent theme.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The file URL."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "The requested file to search for."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_file_uri",
        "description": "Filters the URL to a file in the theme.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The file URL."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "The requested file to search for."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_avatar_data",
        "description": "Filters whether to retrieve the avatar URL early.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to get_avatar_data(), after processing."
            },
            {
                "type": "mixed",
                "name": "$id_or_email",
                "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,                            user email, WP_User object, WP_Post object, or WP_Comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_avatar_data",
        "description": "This filter is documented in wp-includes\/link-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_avatar_comment_types",
        "description": "Filters the list of allowed comment types for retrieving avatars.",
        "arguments": [
            {
                "type": "array",
                "name": "$types",
                "description": "An array of content types. Default only contains 'comment'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_avatar_data",
        "description": "This filter is documented in wp-includes\/link-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_avatar_url",
        "description": "Filters the avatar URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The URL of the avatar."
            },
            {
                "type": "mixed",
                "name": "$id_or_email",
                "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,                            user email, WP_User object, WP_Post object, or WP_Comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to get_avatar_data(), after processing."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_avatar_data",
        "description": "Filters the avatar data.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to get_avatar_data(), after processing."
            },
            {
                "type": "mixed",
                "name": "$id_or_email",
                "description": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,                            user email, WP_User object, WP_Post object, or WP_Comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_shortlink",
        "description": "Filters the short link anchor tag for a post.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Shortlink anchor tag."
            },
            {
                "type": "string",
                "name": "$shortlink",
                "description": "Shortlink URL."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Shortlink's text."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Shortlink's title attribute."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_shortlink",
        "description": "Filters whether to preempt generating a shortlink for the given post.",
        "arguments": [
            {
                "type": "bool|string",
                "name": "$return",
                "description": "Short-circuit return value. Either false or a URL string."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Post ID, or 0 for the current post."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context for the link. One of 'post' or 'query',"
            },
            {
                "type": "bool",
                "name": "$allow_slugs",
                "description": "Whether to allow post slugs in the shortlink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_shortlink",
        "description": "Filters the shortlink for a post.",
        "arguments": [
            {
                "type": "string",
                "name": "$shortlink",
                "description": "Shortlink URL."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Post ID, or 0 for the current post."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context for the link. One of 'post' or 'query',"
            },
            {
                "type": "bool",
                "name": "$allow_slugs",
                "description": "Whether to allow post slugs in the shortlink. Not used by default."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_canonical_url",
        "description": "Filters the canonical URL for a post.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "The post's canonical URL."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_profile_url",
        "description": "Filters the URL for a user's profile editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL including scheme and path."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Scheme to give the URL context. Accepts 'http', 'https', 'login',                        'login_post', 'admin', 'relative' or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_dashboard_url",
        "description": "Filters the dashboard URL for a user.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL including scheme and path."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL. Blank string if no path is specified."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Scheme to give the URL context. Accepts 'http', 'https', 'login',                        'login_post', 'admin', 'relative' or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set_url_scheme",
        "description": "Filters the resulting URL after setting the scheme.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$scheme",
                "description": "Scheme applied to the URL. One of 'http', 'https', or 'relative'."
            },
            {
                "type": "string|null",
                "name": "$orig_scheme",
                "description": "Scheme requested for the URL. One of 'http', 'https', 'login',                                 'login_post', 'admin', 'relative', 'rest', 'rpc', or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_admin_url",
        "description": "Filters the user admin URL for the current user.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL. Blank string if                     no path is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_admin_url",
        "description": "Filters the network admin URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete network admin URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the network admin URL. Blank string if                     no path is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_home_url",
        "description": "Filters the network home URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete network home URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the network home URL. Blank string                                 if no path is specified."
            },
            {
                "type": "string|null",
                "name": "$orig_scheme",
                "description": "Scheme to give the URL context. Accepts 'http', 'https',                                 'relative' or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_site_url",
        "description": "Filters the network site URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete network site URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the network site URL. Blank string if                            no path is specified."
            },
            {
                "type": "string|null",
                "name": "$scheme",
                "description": "Scheme to give the URL context. Accepts 'http', 'https',                            'relative' or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugins_url",
        "description": "Filters the URL to the plugins directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL to the plugins directory including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL to the plugins directory. Blank string                       if no path is specified."
            },
            {
                "type": "string",
                "name": "$plugin",
                "description": "The plugin file path to be relative to. Blank string if no plugin                       is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "content_url",
        "description": "Filters the URL to the content directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL to the content directory including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL to the content directory. Blank string                     if no path is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "includes_url",
        "description": "Filters the URL to the includes directory.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete URL to the includes directory including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the URL to the wp-includes directory. Blank string                     if no path is specified."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_url",
        "description": "Filters the admin area URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete admin area URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the admin area URL. Blank string if no path is specified."
            },
            {
                "type": "int|null",
                "name": "$blog_id",
                "description": "Site ID, or null for the current site."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_url",
        "description": "Filters the site URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete site URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the site URL. Blank string if no path is specified."
            },
            {
                "type": "string|null",
                "name": "$scheme",
                "description": "Scheme to give the site URL context. Accepts 'http', 'https', 'login',                             'login_post', 'admin', 'relative' or null."
            },
            {
                "type": "int|null",
                "name": "$blog_id",
                "description": "Site ID, or null for the current site."
            }
        ],
        "type": "filter"
    },
    {
        "text": "home_url",
        "description": "Filters the home URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The complete home URL including scheme and path."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path relative to the home URL. Blank string if no path is specified."
            },
            {
                "type": "string|null",
                "name": "$orig_scheme",
                "description": "Scheme to give the home URL context. Accepts 'http', 'https',                                 'relative', 'rest', or null."
            },
            {
                "type": "int|null",
                "name": "$blog_id",
                "description": "Site ID, or null for the current site."
            }
        ],
        "type": "filter"
    },
    {
        "text": "shortcut_link",
        "description": "Filters the Press This bookmarklet link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The Press This bookmarklet link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "previous_comments_link_attributes",
        "description": "Filters the anchor tag attributes for the previous comments page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "Attributes for the anchor tag."
            }
        ],
        "type": "filter"
    },
    {
        "text": "next_comments_link_attributes",
        "description": "Filters the anchor tag attributes for the next comments page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "Attributes for the anchor tag."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comments_pagenum_link",
        "description": "Filters the comments page number link for the current request.",
        "arguments": [
            {
                "type": "string",
                "name": "$result",
                "description": "The comments page number link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "navigation_markup_template",
        "description": "Filters the navigation markup template.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "The default template."
            },
            {
                "type": "string",
                "name": "$class",
                "description": "The class passed by the calling function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "previous_posts_link_attributes",
        "description": "Filters the anchor tag attributes for the previous posts page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "Attributes for the anchor tag."
            }
        ],
        "type": "filter"
    },
    {
        "text": "next_posts_link_attributes",
        "description": "Filters the anchor tag attributes for the next posts page link.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "Attributes for the anchor tag."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_pagenum_link",
        "description": "Filters the page number link for the current request.",
        "arguments": [
            {
                "type": "string",
                "name": "$result",
                "description": "The page number link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "{$adjacent}_post_link",
        "description": "Filters the adjacent post link.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The adjacent post link."
            },
            {
                "type": "string",
                "name": "$format",
                "description": "Link anchor format."
            },
            {
                "type": "string",
                "name": "$link",
                "description": "Link permalink format."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The adjacent post."
            },
            {
                "type": "string",
                "name": "$adjacent",
                "description": "Whether the post is previous or next."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$adjacent}_post_rel_link",
        "description": "Filters the adjacent post relational link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The relational link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$adjacent}_post_excluded_terms",
        "description": "Filters the IDs of terms excluded from adjacent post queries.",
        "arguments": [
            {
                "type": "string",
                "name": "$excluded_terms",
                "description": "Array of excluded term IDs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$adjacent}_post_join",
        "description": "Filters the JOIN clause in the SQL for an adjacent post query.",
        "arguments": [
            {
                "type": "string",
                "name": "$join",
                "description": "The JOIN clause in the SQL."
            },
            {
                "type": "bool",
                "name": "$in_same_term",
                "description": "Whether post should be in a same taxonomy term."
            },
            {
                "type": "array",
                "name": "$excluded_terms",
                "description": "Array of excluded term IDs."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy. Used to identify the term used when <code>$in_same_term<\/code> is true."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$adjacent}_post_where",
        "description": "Filters the WHERE clause in the SQL for an adjacent post query.",
        "arguments": [
            {
                "type": "string",
                "name": "$where",
                "description": "The <code>WHERE<\/code> clause in the SQL."
            },
            {
                "type": "bool",
                "name": "$in_same_term",
                "description": "Whether post should be in a same taxonomy term."
            },
            {
                "type": "array",
                "name": "$excluded_terms",
                "description": "Array of excluded term IDs."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy. Used to identify the term used when <code>$in_same_term<\/code> is true."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_{$adjacent}_post_sort",
        "description": "Filters the ORDER BY clause in the SQL for an adjacent post query.",
        "arguments": [
            {
                "type": "string",
                "name": "$order_by",
                "description": "The <code>ORDER BY<\/code> clause in the SQL."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_user_link",
        "description": "Filters the user edit link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The edit link."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_bookmark_link",
        "description": "Filters the bookmark edit link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Anchor tag for the edit link."
            },
            {
                "type": "int",
                "name": "$link_id",
                "description": "Bookmark ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_bookmark_link",
        "description": "Filters the bookmark edit link.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The edit link."
            },
            {
                "type": "int",
                "name": "$link_id",
                "description": "Bookmark ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_comment_link",
        "description": "Filters the comment edit link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Anchor tag for the edit link."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Anchor text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_comment_link",
        "description": "Filters the comment edit link.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The edit link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_delete_post_link",
        "description": "Filters the post delete link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The delete link."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "bool",
                "name": "$force_delete",
                "description": "Whether to bypass the trash and force deletion. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_post_link",
        "description": "Filters the post edit link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Anchor tag for the edit link."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Anchor text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_post_link",
        "description": "Filters the post edit link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The edit link."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The link context. If set to 'display' then ampersands                        are encoded."
            }
        ],
        "type": "filter"
    },
    {
        "text": "preview_post_link",
        "description": "Filters the URL used for a post preview.",
        "arguments": [
            {
                "type": "string",
                "name": "$preview_link",
                "description": "URL used for the post preview."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_type_archive_feed_link",
        "description": "Filters the post type archive feed link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The post type archive feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_type_archive_link",
        "description": "This filter is documented in wp-includes\/link-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "post_type_archive_link",
        "description": "Filters the post type archive permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The post type archive permalink."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "search_feed_link",
        "description": "This filter is documented in wp-includes\/link-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "search_feed_link",
        "description": "Filters the search feed link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Search feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The search type. One of 'posts' or 'comments'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "search_link",
        "description": "Filters the search permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "Search permalink."
            },
            {
                "type": "string",
                "name": "$search",
                "description": "The URL-encoded search term."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_term_link",
        "description": "Filters the anchor tag for the edit link of a term.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The anchor tag for the edit link."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_term_link",
        "description": "Filters the edit link for a term.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The edit link."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy name."
            },
            {
                "type": "string",
                "name": "$object_type",
                "description": "The object type (eg. the post type)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_tag_link",
        "description": "Filters the anchor tag for the edit link for a tag (or term in another taxonomy).",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The anchor tag for the edit link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_edit_tag_link",
        "description": "Filters the edit link for a tag (or term in another taxonomy).",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The term edit link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "category_feed_link",
        "description": "Filters the category feed link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The category feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tag_feed_link",
        "description": "Filters the post tag feed link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The tag feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "taxonomy_feed_link",
        "description": "Filters the feed link for a taxonomy other than 'category' or 'post_tag'.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The taxonomy feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "The taxonomy name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "author_feed_link",
        "description": "Filters the feed link for a given author.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The author feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_comments_feed_link_html",
        "description": "Filters the post comment feed link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The complete anchor tag for the comment feed link."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "The feed type, or an empty string for the default feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_comments_feed_link",
        "description": "Filters the post comments feed permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "Post comments feed permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "feed_link",
        "description": "Filters the feed type permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The feed permalink."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "Feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_feed_link",
        "description": "Filters the feed link anchor tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The complete anchor tag for a feed link."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "The feed type, or an empty string for the                     default feed type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "day_link",
        "description": "Filters the day archive permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$daylink",
                "description": "Permalink for the day archive."
            },
            {
                "type": "int",
                "name": "$year",
                "description": "Year for the archive."
            },
            {
                "type": "int",
                "name": "$month",
                "description": "Month for the archive."
            },
            {
                "type": "int",
                "name": "$day",
                "description": "The day for the archive."
            }
        ],
        "type": "filter"
    },
    {
        "text": "month_link",
        "description": "Filters the month archive permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$monthlink",
                "description": "Permalink for the month archive."
            },
            {
                "type": "int",
                "name": "$year",
                "description": "Year for the archive."
            },
            {
                "type": "int",
                "name": "$month",
                "description": "The month for the archive."
            }
        ],
        "type": "filter"
    },
    {
        "text": "year_link",
        "description": "Filters the year archive permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$yearlink",
                "description": "Permalink for the year archive."
            },
            {
                "type": "int",
                "name": "$year",
                "description": "Year for the archive."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_link",
        "description": "Filters the permalink for an attachment.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The attachment's permalink."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_get_page_link",
        "description": "Filters the permalink for a non-page_on_front page.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The page's permalink."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The ID of the page."
            }
        ],
        "type": "filter"
    },
    {
        "text": "page_link",
        "description": "Filters the permalink for a page.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The page's permalink."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The ID of the page."
            },
            {
                "type": "bool",
                "name": "$sample",
                "description": "Is it a sample permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_type_link",
        "description": "Filters the permalink for a post of a custom post type.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_link",
                "description": "The post's permalink."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post in question."
            },
            {
                "type": "bool",
                "name": "$leavename",
                "description": "Whether to keep the post name."
            },
            {
                "type": "bool",
                "name": "$sample",
                "description": "Is it a sample permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_post_link",
        "description": "Filters the permalink structure for a post before token replacement occurs.",
        "arguments": [
            {
                "type": "string",
                "name": "$permalink",
                "description": "The site's permalink structure."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post in question."
            },
            {
                "type": "bool",
                "name": "$leavename",
                "description": "Whether to keep the post name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_link_category",
        "description": "Filters the category that gets used in the %category% permalink token.",
        "arguments": [
            {
                "type": "\\WP_Term",
                "name": "$cat",
                "description": "The category to use in the permalink."
            },
            {
                "type": "array",
                "name": "$cats",
                "description": "Array of all categories (WP_Term objects) associated with the post."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post in question."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_link",
        "description": "Filters the permalink for a post.",
        "arguments": [
            {
                "type": "string",
                "name": "$permalink",
                "description": "The post's permalink."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post in question."
            },
            {
                "type": "bool",
                "name": "$leavename",
                "description": "Whether to keep the post name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_trailingslashit",
        "description": "Filters the trailing-slashed string, depending on whether the site is set to use trailing slashes.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "URL with or without a trailing slash."
            },
            {
                "type": "string",
                "name": "$type_of_url",
                "description": "The type of URL being considered. Accepts 'single', 'single_trackback',                            'single_feed', 'single_paged', 'feed', 'category', 'page', 'year',                            'month', 'day', 'paged', 'post_type_archive'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_permalink",
        "description": "Filters the display of the permalink for the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$permalink",
                "description": "The permalink for the current post."
            },
            {
                "type": "int|\\WP_Post",
                "name": "$post",
                "description": "Post ID, WP_Post object, or 0. Default 0."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_locale",
        "description": "Filters a theme's locale.",
        "arguments": [
            {
                "type": "string",
                "name": "$locale",
                "description": "The theme's current locale."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugin_locale",
        "description": "This filter is documented in wp-includes\/l10n.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "plugin_locale",
        "description": "Filters a plugin's locale.",
        "arguments": [
            {
                "type": "string",
                "name": "$locale",
                "description": "The plugin's current locale."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "override_unload_textdomain",
        "description": "Filters whether to override the text domain unloading.",
        "arguments": [
            {
                "type": "bool",
                "name": "$override",
                "description": "Whether to override the text domain unloading. Default false."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "unload_textdomain",
        "description": "Fires before the text domain is unloaded.",
        "arguments": [
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "action"
    },
    {
        "text": "override_load_textdomain",
        "description": "Filters whether to override the .mo file loading.",
        "arguments": [
            {
                "type": "bool",
                "name": "$override",
                "description": "Whether to override the .mo file loading. Default false."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            },
            {
                "type": "string",
                "name": "$mofile",
                "description": "Path to the MO file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_textdomain",
        "description": "Fires before the MO translation file is loaded.",
        "arguments": [
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            },
            {
                "type": "string",
                "name": "$mofile",
                "description": "Path to the .mo file."
            }
        ],
        "type": "action"
    },
    {
        "text": "load_textdomain_mofile",
        "description": "Filters MO file path for loading translations for a specific text domain.",
        "arguments": [
            {
                "type": "string",
                "name": "$mofile",
                "description": "Path to the MO file."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ngettext_with_context",
        "description": "Filters the singular or plural form of a string with gettext context.",
        "arguments": [
            {
                "type": "string",
                "name": "$translation",
                "description": "Translated text."
            },
            {
                "type": "string",
                "name": "$single",
                "description": "The text to be used if the number is singular."
            },
            {
                "type": "string",
                "name": "$plural",
                "description": "The text to be used if the number is plural."
            },
            {
                "type": "string",
                "name": "$number",
                "description": "The number to compare against to use either the singular or plural form."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context information for the translators."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ngettext",
        "description": "Filters the singular or plural form of a string.",
        "arguments": [
            {
                "type": "string",
                "name": "$translation",
                "description": "Translated text."
            },
            {
                "type": "string",
                "name": "$single",
                "description": "The text to be used if the number is singular."
            },
            {
                "type": "string",
                "name": "$plural",
                "description": "The text to be used if the number is plural."
            },
            {
                "type": "string",
                "name": "$number",
                "description": "The number to compare against to use either the singular or plural form."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "gettext_with_context",
        "description": "Filters text with its translation based on context information.",
        "arguments": [
            {
                "type": "string",
                "name": "$translation",
                "description": "Translated text."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Text to translate."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context information for the translators."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "gettext",
        "description": "Filters text with its translation.",
        "arguments": [
            {
                "type": "string",
                "name": "$translation",
                "description": "Translated text."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Text to translate."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "Text domain. Unique identifier for retrieving translated strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "locale",
        "description": "Filters WordPress install's locale ID.",
        "arguments": [
            {
                "type": "string",
                "name": "$locale",
                "description": "The locale ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "locale",
        "description": "This filter is documented in wp-includes\/l10n.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "safe_style_css",
        "description": "Filters list of allowed CSS attributes.",
        "arguments": [
            {
                "type": "array",
                "name": "$attr",
                "description": "List of allowed CSS attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_kses",
        "description": "Filters content to be run through kses.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "Content to run through kses."
            },
            {
                "type": "array",
                "name": "$allowed_html",
                "description": "Allowed HTML elements."
            },
            {
                "type": "array",
                "name": "$allowed_protocols",
                "description": "Allowed protocol in links."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_kses_allowed_html",
        "description": "Filters HTML elements allowed for a given context.",
        "arguments": [
            {
                "type": "string",
                "name": "$tags",
                "description": "Allowed tags, attributes, and\/or entities."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context to judge allowed tags by. Allowed values are 'post',                        'data', 'strip', 'entities', 'explicit', or the name of a filter."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_kses_allowed_html",
        "description": "This filter is documented in wp-includes\/kses.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_kses_allowed_html",
        "description": "This filter is documented in wp-includes\/kses.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_kses_allowed_html",
        "description": "This filter is documented in wp-includes\/kses.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_kses_allowed_html",
        "description": "This filter is documented in wp-includes\/kses.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_kses_allowed_html",
        "description": "This filter is documented in wp-includes\/kses.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "xmlrpc_element_limit",
        "description": "Filters the number of elements to parse in an XML-RPC response.",
        "arguments": [
            {
                "type": "int",
                "name": "$element_limit",
                "description": "Default elements limit."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_chunk_parsing_size",
        "description": "Filters the chunk size that can be used to parse an XML-RPC reponse message.",
        "arguments": [
            {
                "type": "int",
                "name": "$chunk_size",
                "description": "Chunk size to parse in bytes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_request_host_is_external",
        "description": "Check if HTTP request is external or not.",
        "arguments": [
            {
                "type": "bool",
                "name": "",
                "description": "false Whether HTTP request is external or not."
            },
            {
                "type": "string",
                "name": "$host",
                "description": "IP of the requested host."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "URL of the requested host."
            }
        ],
        "type": "filter"
    },
    {
        "text": "allowed_http_origin",
        "description": "Change the allowed HTTP origin result.",
        "arguments": [
            {
                "type": "string",
                "name": "$origin",
                "description": "Origin URL if allowed, empty string if not."
            },
            {
                "type": "string",
                "name": "$origin_arg",
                "description": "Original origin string passed into is_allowed_http_origin function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "allowed_http_origins",
        "description": "Change the origin types allowed for HTTP requests.",
        "arguments": [
            {
                "type": "array",
                "name": "$allowed_origins",
                "description": "{     Default allowed HTTP origins.     @type string Non-secure URL for admin origin.     @type string Secure URL for admin origin.     @type string Non-secure URL for home origin.     @type string Secure URL for home origin. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_origin",
        "description": "Change the origin of an HTTP request.",
        "arguments": [
            {
                "type": "string",
                "name": "$origin",
                "description": "The original origin for the request."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_generator_{$type}",
        "description": "Filters the HTML for the retrieved generator type.",
        "arguments": [
            {
                "type": "string",
                "name": "$gen",
                "description": "The HTML markup output to wp_head()."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of generator. Accepts 'html', 'xhtml', 'atom',                     'rss2', 'rdf', 'comment', 'export'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_generator",
        "description": "Filters the output of the XHTML generator tag for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$generator_type",
                "description": "The generator output."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of generator to output. Accepts 'html',                               'xhtml', 'atom', 'rss2', 'rdf', 'comment', 'export'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_generator_type",
        "description": "Filters the output of the XHTML generator tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$generator_type",
                "description": "The XHTML generator."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_admin_css",
        "description": "Filters the stylesheet link to the specified CSS file.",
        "arguments": [
            {
                "type": "string",
                "name": "$file",
                "description": "Style handle name or filename (without &quot;.css&quot; extension)                     relative to wp-admin\/. Defaults to 'wp-admin'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_admin_css",
        "description": "This filter is documented in wp-includes\/general-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_admin_css_uri",
        "description": "Filters the URI of a WordPress admin CSS file.",
        "arguments": [
            {
                "type": "string",
                "name": "$_file",
                "description": "Relative path to the file with query arguments attached."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "Relative path to the file, minus its &quot;.css&quot; extension."
            }
        ],
        "type": "filter"
    },
    {
        "text": "paginate_links",
        "description": "Filters the paginated links for the given archive pages.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The paginated link URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "paginate_links",
        "description": "This filter is documented in wp-includes\/general-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "paginate_links",
        "description": "This filter is documented in wp-includes\/general-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "language_attributes",
        "description": "Filters the language attributes for display in the html tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "A space-separated list of language attributes."
            },
            {
                "type": "string",
                "name": "$doctype",
                "description": "The type of html document (xhtml|html)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_search_query",
        "description": "Filters the contents of the search query variable for display.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$search",
                "description": "Contents of the search query variable."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_search_query",
        "description": "Filters the contents of the search query variable.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$search",
                "description": "Contents of the search query variable."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_default_editor",
        "description": "Filters which editor should be displayed by default.",
        "arguments": [
            {
                "type": "array",
                "name": "$r",
                "description": "An array of editors. Accepts 'tinymce', 'html', 'test'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_can_richedit",
        "description": "Filters whether the user can access the rich (Visual) editor.",
        "arguments": [
            {
                "type": "bool",
                "name": "$wp_rich_edit",
                "description": "Whether the user can access to the rich (Visual) editor."
            }
        ],
        "type": "filter"
    },
    {
        "text": "emoji_svg_url",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_resource_hints",
        "description": "Filters domains and URLs for resource hints of relation type.",
        "arguments": [
            {
                "type": "array",
                "name": "$urls",
                "description": "URLs to print for resource hints."
            },
            {
                "type": "string",
                "name": "$relation_type",
                "description": "The relation type the URLs are printed for, e.g. 'preconnect' or 'prerender'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_icon_meta_tags",
        "description": "Filters the site icon meta tags, so Plugins can add their own.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta_tags",
                "description": "Site Icon meta elements."
            }
        ],
        "type": "filter"
    },
    {
        "text": "feed_links_show_posts_feed",
        "description": "Filters whether to display the posts feed link.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to display the posts feed link. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "feed_links_show_comments_feed",
        "description": "Filters whether to display the comments feed link.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to display the comments feed link. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_footer",
        "description": "Prints scripts or data before the closing body tag on the front end.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_head",
        "description": "Prints scripts or data in the head tag on the front end.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "the_weekday_date",
        "description": "Filters the localized date on which the post was written, for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_weekday_date",
                "description": ""
            },
            {
                "type": "string",
                "name": "$before",
                "description": "The HTML to output before the date."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "The HTML to output after the date."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_weekday",
        "description": "Filters the weekday on which the post was written, for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_weekday",
                "description": ""
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_post_modified_time",
        "description": "Filters the localized time a post was last modified.",
        "arguments": [
            {
                "type": "string",
                "name": "$time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "The date format. Accepts 'G', 'U', or php date format. Default 'U'."
            },
            {
                "type": "bool",
                "name": "$gmt",
                "description": "Whether to return the GMT time. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_modified_time",
        "description": "Filters the localized time a post was last modified.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "Format to use for retrieving the time the post was                         written. Accepts 'G', 'U', or php date format. Defaults                         to value specified in 'time_format' option."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_modified_time",
        "description": "Filters the localized time a post was last modified, for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$get_the_modified_time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "The time format. Accepts 'G', 'U',                                      or php date format. Defaults to value                                      specified in 'time_format' option."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_post_time",
        "description": "Filters the localized time a post was written.",
        "arguments": [
            {
                "type": "string",
                "name": "$time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "Format to use for retrieving the time the post was written.                     Accepts 'G', 'U', or php date format. Default 'U'."
            },
            {
                "type": "bool",
                "name": "$gmt",
                "description": "Whether to retrieve the GMT time. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_time",
        "description": "Filters the time a post was written.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "Format to use for retrieving the time the post was written.                              Accepts 'G', 'U', or php date format value specified                              in 'time_format' option. Default empty."
            },
            {
                "type": "int|\\WP_Post",
                "name": "$post",
                "description": "WP_Post object or ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_time",
        "description": "Filters the time a post was written for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$get_the_time",
                "description": "The formatted time."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "The time format. Accepts 'G', 'U',                             or php date format."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_modified_date",
        "description": "Filters the date a post was last modified.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_time",
                "description": "The formatted date."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "PHP date format. Defaults to value specified in                          'date_format' option."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_modified_date",
        "description": "Filters the date a post was last modified for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_modified_date",
                "description": "The last modified date."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "PHP date format. Defaults to 'date_format' option                                  if not specified."
            },
            {
                "type": "string",
                "name": "$before",
                "description": "HTML output before the date."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "HTML output after the date."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_date",
        "description": "Filters the date a post was published.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_date",
                "description": "The formatted date."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "PHP date format. Defaults to 'date_format' option                              if not specified."
            },
            {
                "type": "int|\\WP_Post",
                "name": "$post",
                "description": "The post object or ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_date",
        "description": "Filters the date a post was published for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_date",
                "description": "The formatted date string."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "PHP date format. Defaults to 'date_format' option                         if not specified."
            },
            {
                "type": "string",
                "name": "$before",
                "description": "HTML output before the date."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "HTML output after the date."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_calendar",
        "description": "This filter is documented in wp-includes\/general-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_calendar",
        "description": "Filters the HTML calendar output.",
        "arguments": [
            {
                "type": "string",
                "name": "$calendar_output",
                "description": "HTML output of the calendar."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_calendar",
        "description": "This filter is documented in wp-includes\/general-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "getarchives_where",
        "description": "Filters the SQL WHERE clause for retrieving archives.",
        "arguments": [
            {
                "type": "string",
                "name": "$sql_where",
                "description": "Portion of SQL query containing the WHERE clause."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "An array of default arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "getarchives_join",
        "description": "Filters the SQL JOIN clause for retrieving archives.",
        "arguments": [
            {
                "type": "string",
                "name": "$sql_join",
                "description": "Portion of SQL query containing JOIN clause."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "An array of default arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_archives_link",
        "description": "Filters the archive link content.",
        "arguments": [
            {
                "type": "string",
                "name": "$link_html",
                "description": "The archive HTML link content."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "URL to archive."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Archive text description."
            },
            {
                "type": "string",
                "name": "$format",
                "description": "Link format. Can be 'link', 'option', 'html', or custom."
            },
            {
                "type": "string",
                "name": "$before",
                "description": "Content to prepend to the description."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "Content to append to the description."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_archive_description",
        "description": "Filters the archive description.",
        "arguments": [
            {
                "type": "string",
                "name": "$description",
                "description": "Archive description to be displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_archive_title",
        "description": "Filters the archive title.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Archive title to be displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "single_cat_title",
        "description": "Filters the category archive page title.",
        "arguments": [
            {
                "type": "string",
                "name": "$term_name",
                "description": "Category name for archive being displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "single_tag_title",
        "description": "Filters the tag archive page title.",
        "arguments": [
            {
                "type": "string",
                "name": "$term_name",
                "description": "Tag name for archive being displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "single_term_title",
        "description": "Filters the custom taxonomy archive page title.",
        "arguments": [
            {
                "type": "string",
                "name": "$term_name",
                "description": "Term name for archive being displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_type_archive_title",
        "description": "Filters the post type archive title.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type_name",
                "description": "Post type 'name' label."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "single_post_title",
        "description": "Filters the page title for a single post.",
        "arguments": [
            {
                "type": "string",
                "name": "$_post_title",
                "description": "The single post page title."
            },
            {
                "type": "object",
                "name": "$_post",
                "description": "The current queried object as returned by get_queried_object()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_title_parts",
        "description": "Filters the parts of the page title.",
        "arguments": [
            {
                "type": "array",
                "name": "$title_array",
                "description": "Parts of the page title."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_title",
        "description": "Filters the text of the page title.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Page title."
            },
            {
                "type": "string",
                "name": "$sep",
                "description": "Title separator."
            },
            {
                "type": "string",
                "name": "$seplocation",
                "description": "Location of the separator (left or right)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_document_title",
        "description": "Filters the document title before it is generated.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "The document title. Default empty string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "document_title_separator",
        "description": "Filters the separator for the document title.",
        "arguments": [
            {
                "type": "string",
                "name": "$sep",
                "description": "Document title separator. Default '-'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "document_title_parts",
        "description": "Filters the parts of the document title.",
        "arguments": [
            {
                "type": "array",
                "name": "$title",
                "description": "{     The document title parts.     @type string $title   Title of the viewed page.     @type string $page    Optional. Page number if paginated.     @type string $tagline Optional. Site description when on home page.     @type string $site    Optional. Site title when not on home page. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_custom_logo",
        "description": "Filters the custom logo output.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Custom logo HTML output."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "ID of the blog to get the custom logo for."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_site_icon_url",
        "description": "Filters the site icon URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "Site icon URL."
            },
            {
                "type": "int",
                "name": "$size",
                "description": "Size of the site icon."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "ID of the blog to get the site icon for."
            }
        ],
        "type": "filter"
    },
    {
        "text": "bloginfo_url",
        "description": "Filters the URL returned by get_bloginfo().",
        "arguments": [
            {
                "type": "mixed",
                "name": "$output",
                "description": "The URL returned by bloginfo()."
            },
            {
                "type": "mixed",
                "name": "$show",
                "description": "Type of information requested."
            }
        ],
        "type": "filter"
    },
    {
        "text": "bloginfo",
        "description": "Filters the site information returned by get_bloginfo().",
        "arguments": [
            {
                "type": "mixed",
                "name": "$output",
                "description": "The requested non-URL site information."
            },
            {
                "type": "mixed",
                "name": "$show",
                "description": "Type of information requested."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_meta",
        "description": "Fires before displaying echoed content in the sidebar.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "register",
        "description": "Filters the HTML link to the Registration or Admin page.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The HTML code for the link to the Registration or Admin page."
            }
        ],
        "type": "filter"
    },
    {
        "text": "lostpassword_url",
        "description": "Filters the Lost Password URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$lostpassword_url",
                "description": "The lost password page URL."
            },
            {
                "type": "string",
                "name": "$redirect",
                "description": "The path to redirect to on login."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_form_defaults",
        "description": "Filters the default login form output arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$defaults",
                "description": "An array of default login form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_form_top",
        "description": "Filters content to display at the top of the login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content to display. Default empty."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of login form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_form_middle",
        "description": "Filters content to display in the middle of the login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content to display. Default empty."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of login form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_form_bottom",
        "description": "Filters content to display at the bottom of the login form.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Content to display. Default empty."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Array of login form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "register_url",
        "description": "Filters the user registration URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$register",
                "description": "The user registration URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "login_url",
        "description": "Filters the login URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$login_url",
                "description": "The login URL. Not HTML-encoded."
            },
            {
                "type": "string",
                "name": "$redirect",
                "description": "The path to redirect to on login, if supplied."
            },
            {
                "type": "bool",
                "name": "$force_reauth",
                "description": "Whether to force reauthorization, even if a cookie is present."
            }
        ],
        "type": "filter"
    },
    {
        "text": "logout_url",
        "description": "Filters the logout URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$logout_url",
                "description": "The HTML-encoded logout URL."
            },
            {
                "type": "string",
                "name": "$redirect",
                "description": "Path to redirect to on logout."
            }
        ],
        "type": "filter"
    },
    {
        "text": "loginout",
        "description": "Filters the HTML output for the Log In\/Log Out link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The HTML link content."
            }
        ],
        "type": "filter"
    },
    {
        "text": "loginout",
        "description": "This filter is documented in wp-includes\/general-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_get_search_form",
        "description": "Fires before the search form is retrieved, at the start of get_search_form().",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "search_form_format",
        "description": "Filters the HTML format of the search form.",
        "arguments": [
            {
                "type": "string",
                "name": "$format",
                "description": "The type of markup to use in the search form.                       Accepts 'html5', 'xhtml'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_search_form",
        "description": "Filters the HTML output of the search form.",
        "arguments": [
            {
                "type": "string",
                "name": "$form",
                "description": "The search form HTML output."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_template_part_{$slug}",
        "description": "Fires before the specified template part file is loaded.",
        "arguments": [
            {
                "type": "string",
                "name": "$slug",
                "description": "The slug name for the generic template."
            },
            {
                "type": "string|null",
                "name": "$name",
                "description": "The name of the specialized template."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_sidebar",
        "description": "Fires before the sidebar template file is loaded.",
        "arguments": [
            {
                "type": "string|null",
                "name": "$name",
                "description": "Name of the specific sidebar file to use. null for the default sidebar."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_footer",
        "description": "Fires before the footer template file is loaded.",
        "arguments": [
            {
                "type": "string|null",
                "name": "$name",
                "description": "Name of the specific footer file to use. null for the default footer."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_header",
        "description": "Fires before the header template file is loaded.",
        "arguments": [
            {
                "type": "string|null",
                "name": "$name",
                "description": "Name of the specific header file to use. null for the default header."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_print_styles",
        "description": "Fires before styles in the $handles queue are printed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_print_scripts",
        "description": "Fires before scripts in the $handles queue are printed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_memory_limit",
        "description": "Filters the maximum memory limit available for administration screens.",
        "arguments": [
            {
                "type": "int|string",
                "name": "$filtered_limit",
                "description": "The maximum WordPress memory limit. Accepts an integer                                   (bytes), or a shorthand string notation, such as '256M'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_memory_limit",
        "description": "Filters the memory limit allocated for image manipulation.",
        "arguments": [
            {
                "type": "int|string",
                "name": "$filtered_limit",
                "description": "Maximum memory limit to allocate for images.                                   Default <code>WP_MAX_MEMORY_LIMIT<\/code> or the original                                   php.ini <code>memory_limit<\/code>, whichever is higher.                                   Accepts an integer (bytes), or a shorthand string                                   notation, such as '256M'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$context}_memory_limit",
        "description": "Filters the memory limit allocated for arbitrary contexts.",
        "arguments": [
            {
                "type": "int|string",
                "name": "$filtered_limit",
                "description": "Maximum memory limit to allocate for images.                                   Default '256M' or the original php.ini <code>memory_limit<\/code>,                                   whichever is higher. Accepts an integer (bytes), or a                                   shorthand string notation, such as '256M'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_delete_file",
        "description": "Filters the path of the file to delete.",
        "arguments": [
            {
                "type": "string",
                "name": "$medium",
                "description": "Path to the file to delete."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_auth_check_same_domain",
        "description": "Filters whether the authentication check originated at the same domain.",
        "arguments": [
            {
                "type": "bool",
                "name": "$same_domain",
                "description": "Whether the authentication check originated at the same domain."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_auth_check_load",
        "description": "Filters whether to load the authentication check.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to load the authentication check."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "The current screen object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_checkdate",
        "description": "Filters whether the given date is valid for the Gregorian calendar.",
        "arguments": [
            {
                "type": "bool",
                "name": "$checkdate",
                "description": "Whether the given date is valid."
            },
            {
                "type": "string",
                "name": "$source_date",
                "description": "Date to check."
            }
        ],
        "type": "filter"
    },
    {
        "text": "kses_allowed_protocols",
        "description": "Filters the list of protocols allowed in HTML attributes.",
        "arguments": [
            {
                "type": "array",
                "name": "$protocols",
                "description": "Array of allowed protocols e.g. 'http', 'ftp', 'tel', and more."
            }
        ],
        "type": "filter"
    },
    {
        "text": "extra_{$context}_headers",
        "description": "Filters extra file headers by context.",
        "arguments": [
            {
                "type": "array",
                "name": "$extra_context_headers",
                "description": "Empty array by default."
            }
        ],
        "type": "filter"
    },
    {
        "text": "global_terms_enabled",
        "description": "Filters whether global terms are enabled.",
        "arguments": [
            {
                "type": "null",
                "name": "$enabled",
                "description": "Whether global terms are enabled."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_main_network_id",
        "description": "Filters the main network ID.",
        "arguments": [
            {
                "type": "int",
                "name": "$main_network_id",
                "description": "The ID of the main network."
            }
        ],
        "type": "filter"
    },
    {
        "text": "iis7_supports_permalinks",
        "description": "Filters whether IIS 7+ supports pretty permalinks.",
        "arguments": [
            {
                "type": "bool",
                "name": "$supports_permalinks",
                "description": "Whether IIS7 supports permalinks. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "doing_it_wrong_run",
        "description": "Fires when the given function is being used incorrectly.",
        "arguments": [
            {
                "type": "string",
                "name": "$function",
                "description": "The function that was called."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "A message explaining what has been done incorrectly."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress where the message was added."
            }
        ],
        "type": "action"
    },
    {
        "text": "doing_it_wrong_trigger_error",
        "description": "Filters whether to trigger an error for _doing_it_wrong() calls.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for _doing_it_wrong() calls. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deprecated_hook_run",
        "description": "Fires when a deprecated hook is called.",
        "arguments": [
            {
                "type": "string",
                "name": "$hook",
                "description": "The hook that was called."
            },
            {
                "type": "string",
                "name": "$replacement",
                "description": "The hook that should be used as a replacement."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress that deprecated the argument used."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "A message regarding the change."
            }
        ],
        "type": "action"
    },
    {
        "text": "deprecated_hook_trigger_error",
        "description": "Filters whether to trigger deprecated hook errors.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger deprecated hook errors. Requires                      <code>WP_DEBUG<\/code> to be defined true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deprecated_argument_run",
        "description": "Fires when a deprecated argument is called.",
        "arguments": [
            {
                "type": "string",
                "name": "$function",
                "description": "The function that was called."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "A message regarding the change."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress that deprecated the argument used."
            }
        ],
        "type": "action"
    },
    {
        "text": "deprecated_argument_trigger_error",
        "description": "Filters whether to trigger an error for deprecated arguments.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for deprecated arguments. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deprecated_file_included",
        "description": "Fires when a deprecated file is called.",
        "arguments": [
            {
                "type": "string",
                "name": "$file",
                "description": "The file that was called."
            },
            {
                "type": "string",
                "name": "$replacement",
                "description": "The file that should have been included based on ABSPATH."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress that deprecated the file."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "A message regarding the change."
            }
        ],
        "type": "action"
    },
    {
        "text": "deprecated_file_trigger_error",
        "description": "Filters whether to trigger an error for deprecated files.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for deprecated files. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deprecated_constructor_run",
        "description": "Fires when a deprecated constructor is called.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "The class containing the deprecated constructor."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress that deprecated the function."
            },
            {
                "type": "string",
                "name": "$parent_class",
                "description": "The parent class calling the deprecated constructor."
            }
        ],
        "type": "action"
    },
    {
        "text": "deprecated_constructor_trigger_error",
        "description": "Filters whether to trigger an error for deprecated functions.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for deprecated functions. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deprecated_function_run",
        "description": "Fires when a deprecated function is called.",
        "arguments": [
            {
                "type": "string",
                "name": "$function",
                "description": "The function that was called."
            },
            {
                "type": "string",
                "name": "$replacement",
                "description": "The function that should have been called."
            },
            {
                "type": "string",
                "name": "$version",
                "description": "The version of WordPress that deprecated the function."
            }
        ],
        "type": "action"
    },
    {
        "text": "deprecated_function_trigger_error",
        "description": "Filters whether to trigger an error for deprecated functions.",
        "arguments": [
            {
                "type": "bool",
                "name": "$trigger",
                "description": "Whether to trigger the error for deprecated functions. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_default_widgets",
        "description": "Filters whether to load the Widgets library.",
        "arguments": [
            {
                "type": "bool",
                "name": "$wp_maybe_load_widgets",
                "description": "Whether to load the Widgets library.                                    Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "smilies",
        "description": "Filters all the smilies.",
        "arguments": [
            {
                "type": "array",
                "name": "$wpsmiliestrans",
                "description": "List of the smilies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_die_ajax_handler",
        "description": "Filters the callback for killing WordPress execution for Ajax requests.",
        "arguments": [
            {
                "type": "callable",
                "name": "$function",
                "description": "Callback function name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_die_xmlrpc_handler",
        "description": "Filters the callback for killing WordPress execution for XML-RPC requests.",
        "arguments": [
            {
                "type": "callable",
                "name": "$function",
                "description": "Callback function name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_die_handler",
        "description": "Filters the callback for killing WordPress execution for all non-Ajax, non-XML-RPC requests.",
        "arguments": [
            {
                "type": "callable",
                "name": "$function",
                "description": "Callback function name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_mimes",
        "description": "Filters list of allowed mime types and file extensions.",
        "arguments": [
            {
                "type": "array",
                "name": "$t",
                "description": "Mime types keyed by the file extension regex corresponding to                               those types. 'swf' and 'exe' removed from full list. 'htm|html' also                               removed depending on '$user' capabilities."
            },
            {
                "type": "int|\\WP_User|null",
                "name": "$user",
                "description": "User ID, User object or null if not provided (indicates current user)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ext2type",
        "description": "Filters file type based on the extension name.",
        "arguments": [
            {
                "type": "array",
                "name": "$ext2type",
                "description": "Multi-dimensional array with extensions for a default set                        of file types."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mime_types",
        "description": "Filters the list of mime types and file extensions.",
        "arguments": [
            {
                "type": "array",
                "name": "$wp_get_mime_types",
                "description": "Mime types keyed by the file extension regex                                 corresponding to those types."
            }
        ],
        "type": "filter"
    },
    {
        "text": "getimagesize_mimes_to_exts",
        "description": "Filters the list mapping image mime types to their respective extensions.",
        "arguments": [
            {
                "type": "array",
                "name": "$mime_to_ext",
                "description": "Array of image mime types and their matching extensions."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_check_filetype_and_ext",
        "description": "Filters the \"real\" file type of the given file.",
        "arguments": [
            {
                "type": "array",
                "name": "$wp_check_filetype_and_ext",
                "description": "File data array containing 'ext', 'type', and                                          'proper_filename' keys."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "Full path to the file."
            },
            {
                "type": "string",
                "name": "$filename",
                "description": "The name of the file (may differ from $file due to                                          $file being in a tmp directory)."
            },
            {
                "type": "array",
                "name": "$mimes",
                "description": "Key is the file extension with value as the mime type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_upload_bits",
        "description": "Filters whether to treat the upload bits as an error.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$upload_bits_error",
                "description": "An array of upload bits data, or a non-array error to return."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_handle_upload",
        "description": "This filter is documented in wp-admin\/includes\/file.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_unique_filename",
        "description": "Filters the result when generating a unique file name.",
        "arguments": [
            {
                "type": "string",
                "name": "$filename",
                "description": "Unique file name."
            },
            {
                "type": "string",
                "name": "$ext",
                "description": "File extension, eg. &quot;.png&quot;."
            },
            {
                "type": "string",
                "name": "$dir",
                "description": "Directory path."
            },
            {
                "type": "callable|null",
                "name": "$unique_filename_callback",
                "description": "Callback function that generates the unique file name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_unique_filename",
        "description": "This filter is documented in wp-includes\/functions.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "upload_dir",
        "description": "Filters the uploads directory data.",
        "arguments": [
            {
                "type": "array",
                "name": "$uploads",
                "description": "Array of upload directory data with keys of 'path',                       'url', 'subdir, 'basedir', and 'error'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "do_robotstxt",
        "description": "Fires when displaying the robots.txt file.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "robots_txt",
        "description": "Filters the robots.txt output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Robots.txt output."
            },
            {
                "type": "bool",
                "name": "$public",
                "description": "Whether the site is considered &quot;public&quot;."
            }
        ],
        "type": "filter"
    },
    {
        "text": "do_feed_{$feed}",
        "description": "Fires once the given feed is loaded.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_comment_feed",
                "description": "Whether the feed is a comment feed."
            },
            {
                "type": "string",
                "name": "$feed",
                "description": "The feed name."
            }
        ],
        "type": "action"
    },
    {
        "text": "nocache_headers",
        "description": "Filters the cache-controlling headers.",
        "arguments": [
            {
                "type": "array",
                "name": "$headers",
                "description": "{     Header names and field values.     @type string $Expires       Expires header.     @type string $Cache-Control Cache-Control header. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "status_header",
        "description": "Filters an HTTP status header.",
        "arguments": [
            {
                "type": "string",
                "name": "$status_header",
                "description": "HTTP status header."
            },
            {
                "type": "int",
                "name": "$code",
                "description": "HTTP status code."
            },
            {
                "type": "string",
                "name": "$description",
                "description": "Description for the status code."
            },
            {
                "type": "string",
                "name": "$protocol",
                "description": "Server protocol."
            }
        ],
        "type": "filter"
    },
    {
        "text": "removable_query_args",
        "description": "Filters the list of query variables to remove.",
        "arguments": [
            {
                "type": "array",
                "name": "$removable_query_args",
                "description": "An array of query variables to remove from a URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "enclosure_links",
        "description": "Filters the list of enclosure links before querying the database.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_links",
                "description": "An array of enclosure links."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "number_format_i18n",
        "description": "Filters the number formatted based on the locale.",
        "arguments": [
            {
                "type": "string",
                "name": "$formatted",
                "description": "Converted number in string format."
            }
        ],
        "type": "filter"
    },
    {
        "text": "date_i18n",
        "description": "Filters the date formatted based on the locale.",
        "arguments": [
            {
                "type": "string",
                "name": "$j",
                "description": "Formatted date string."
            },
            {
                "type": "string",
                "name": "$req_format",
                "description": "Format to display the date."
            },
            {
                "type": "int",
                "name": "$i",
                "description": "Unix timestamp."
            },
            {
                "type": "bool",
                "name": "$gmt",
                "description": "Whether to convert to GMT for time. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_mail_content_type",
        "description": "This filter is documented in wp-includes\/pluggable.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "emoji_url",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "emoji_ext",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "emoji_url",
        "description": "Filters the URL where emoji png images are hosted.",
        "arguments": [
            {
                "type": "string",
                "name": "",
                "description": "The emoji base URL for png images."
            }
        ],
        "type": "filter"
    },
    {
        "text": "emoji_ext",
        "description": "Filters the extension of the emoji png files.",
        "arguments": [
            {
                "type": "string",
                "name": "",
                "description": "The emoji extension for png files. Default .png."
            }
        ],
        "type": "filter"
    },
    {
        "text": "emoji_svg_url",
        "description": "Filters the URL where emoji SVG images are hosted.",
        "arguments": [
            {
                "type": "string",
                "name": "",
                "description": "The emoji base URL for svg images."
            }
        ],
        "type": "filter"
    },
    {
        "text": "emoji_svg_ext",
        "description": "Filters the extension of the emoji SVG files.",
        "arguments": [
            {
                "type": "string",
                "name": "",
                "description": "The emoji extension for svg files. Default .svg."
            }
        ],
        "type": "filter"
    },
    {
        "text": "script_loader_src",
        "description": "This filter is documented in wp-includes\/class.wp-scripts.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "script_loader_src",
        "description": "This filter is documented in wp-includes\/class.wp-scripts.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "script_loader_src",
        "description": "This filter is documented in wp-includes\/class.wp-scripts.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_spaces_regexp",
        "description": "Filters the regexp for common whitespace characters.",
        "arguments": [
            {
                "type": "string",
                "name": "$spaces",
                "description": "Regexp pattern for matching common whitespace characters."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_trackback_urls",
        "description": "Filters a list of trackback URLs following sanitization.",
        "arguments": [
            {
                "type": "string",
                "name": "$urls_to_ping",
                "description": "Sanitized space or carriage return separated URLs."
            },
            {
                "type": "string",
                "name": "$to_ping",
                "description": "Space or carriage return separated URLs before sanitization."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_mime_type",
        "description": "Filters a mime type following sanitization.",
        "arguments": [
            {
                "type": "string",
                "name": "$sani_mime_type",
                "description": "The sanitized mime type."
            },
            {
                "type": "string",
                "name": "$mime_type",
                "description": "The mime type prior to sanitization."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_text_field",
        "description": "Filters a sanitized text field string.",
        "arguments": [
            {
                "type": "string",
                "name": "$filtered",
                "description": "The sanitized string."
            },
            {
                "type": "string",
                "name": "$str",
                "description": "The string prior to being sanitized."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_sprintf_l",
        "description": "Filters the translated delimiters used by wp_sprintf_l().",
        "arguments": [
            {
                "type": "array",
                "name": "$delimiters",
                "description": "An array of translated delimiters."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_sprintf",
        "description": "Filters a fragment from the pattern passed to wp_sprintf().",
        "arguments": [
            {
                "type": "string",
                "name": "$fragment",
                "description": "A fragment from the pattern."
            },
            {
                "type": "string",
                "name": "$arg",
                "description": "The argument."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_parse_str",
        "description": "Filters the array of variables derived from a parsed string.",
        "arguments": [
            {
                "type": "array",
                "name": "$array",
                "description": "The array populated with variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_option_{$option}",
        "description": "Filters an option value following sanitization.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The sanitized option value."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "The option name."
            },
            {
                "type": "string",
                "name": "$original_value",
                "description": "The original value passed to the function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tag_escape",
        "description": "Filters a string cleaned and escaped for output as an HTML tag.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_tag",
                "description": "The tag name after it has been escaped."
            },
            {
                "type": "string",
                "name": "$tag_name",
                "description": "The text before it was escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "esc_textarea",
        "description": "Filters a string cleaned and escaped for output in a textarea element.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_text",
                "description": "The text after it has been escaped."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to being escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attribute_escape",
        "description": "Filters a string cleaned and escaped for output in an HTML attribute.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_text",
                "description": "The text after it has been escaped."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to being escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "esc_html",
        "description": "Filters a string cleaned and escaped for output in HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_text",
                "description": "The text after it has been escaped."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to being escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "js_escape",
        "description": "Filters a string cleaned and escaped for output in JavaScript.",
        "arguments": [
            {
                "type": "string",
                "name": "$safe_text",
                "description": "The text after it has been escaped."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to being escaped."
            }
        ],
        "type": "filter"
    },
    {
        "text": "clean_url",
        "description": "Filters a string cleaned and escaped for output as a URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$good_protocol_url",
                "description": "The cleaned URL to be returned."
            },
            {
                "type": "string",
                "name": "$original_url",
                "description": "The URL prior to cleaning."
            },
            {
                "type": "string",
                "name": "$_context",
                "description": "If 'display', replace ampersands and single quotes only."
            }
        ],
        "type": "filter"
    },
    {
        "text": "format_for_editor",
        "description": "Filters the text after it is formatted for the editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "The formatted text."
            },
            {
                "type": "string",
                "name": "$default_editor",
                "description": "The default editor for the current user.                               It is usually either 'html' or 'tinymce'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_ent2ncr",
        "description": "Filters text before named entities are converted into numbered entities.",
        "arguments": [
            {
                "type": "null",
                "name": "$converted_text",
                "description": "The text to be converted. Default null."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "The text prior to entity conversion."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_trim_words",
        "description": "Filters the text content after words have been trimmed.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "The trimmed text."
            },
            {
                "type": "int",
                "name": "$num_words",
                "description": "The number of words to trim the text to. Default 5."
            },
            {
                "type": "string",
                "name": "$more",
                "description": "An optional string to append to the end of the trimmed text, e.g. &hellip;."
            },
            {
                "type": "string",
                "name": "$original_text",
                "description": "The text before it was trimmed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_content",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "excerpt_length",
        "description": "Filters the number of words in an excerpt.",
        "arguments": [
            {
                "type": "int",
                "name": "$number",
                "description": "The number of words. Default 55."
            }
        ],
        "type": "filter"
    },
    {
        "text": "excerpt_more",
        "description": "Filters the string in the \"more\" link displayed after a trimmed excerpt.",
        "arguments": [
            {
                "type": "string",
                "name": "$more_string",
                "description": "The string shown within the more link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_trim_excerpt",
        "description": "Filters the trimmed excerpt string.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "The trimmed text."
            },
            {
                "type": "string",
                "name": "$raw_excerpt",
                "description": "The text prior to trimming."
            }
        ],
        "type": "filter"
    },
    {
        "text": "human_time_diff",
        "description": "Filters the human readable difference between two timestamps.",
        "arguments": [
            {
                "type": "string",
                "name": "$since",
                "description": "The difference in human readable text."
            },
            {
                "type": "int",
                "name": "$diff",
                "description": "The difference in seconds."
            },
            {
                "type": "int",
                "name": "$from",
                "description": "Unix timestamp from which the difference begins."
            },
            {
                "type": "int",
                "name": "$to",
                "description": "Unix timestamp to end the time difference."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_email",
        "description": "Filters a sanitized email address.",
        "arguments": [
            {
                "type": "string",
                "name": "$email",
                "description": "The sanitized email address."
            },
            {
                "type": "string",
                "name": "$email",
                "description": "The email address, as provided to sanitize_email()."
            },
            {
                "type": "string",
                "name": "$message",
                "description": "A message to pass to the user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "sanitize_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "sanitize_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "sanitize_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "sanitize_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "sanitize_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "sanitize_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "Filters whether an email address is valid.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_email",
                "description": "Whether the email address has passed the is_email() checks. Default false."
            },
            {
                "type": "string",
                "name": "$email",
                "description": "The email address being checked."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context under which the email was tested."
            }
        ],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "is_email",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "smilies_src",
        "description": "Filters the Smiley image URL before it's used in the image element.",
        "arguments": [
            {
                "type": "string",
                "name": "$smiley_url",
                "description": "URL for the smiley image."
            },
            {
                "type": "string",
                "name": "$img",
                "description": "Filename for the smiley image."
            },
            {
                "type": "string",
                "name": "$site_url",
                "description": "Site URL, as returned by site_url()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "format_to_edit",
        "description": "Filters the text to be formatted for editing.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The text, prior to formatting for editing."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_html_class",
        "description": "Filters a sanitized HTML class string.",
        "arguments": [
            {
                "type": "string",
                "name": "$sanitized",
                "description": "The sanitized HTML class."
            },
            {
                "type": "string",
                "name": "$class",
                "description": "HTML class before sanitization."
            },
            {
                "type": "string",
                "name": "$fallback",
                "description": "The fallback string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_title",
        "description": "Filters a sanitized title string.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Sanitized title."
            },
            {
                "type": "string",
                "name": "$raw_title",
                "description": "The title prior to sanitization."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The context for which the title is being sanitized."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_key",
        "description": "Filters a sanitized key string.",
        "arguments": [
            {
                "type": "string",
                "name": "$key",
                "description": "Sanitized key."
            },
            {
                "type": "string",
                "name": "$raw_key",
                "description": "The key prior to sanitization."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_user",
        "description": "Filters a sanitized username string.",
        "arguments": [
            {
                "type": "string",
                "name": "$username",
                "description": "Sanitized username."
            },
            {
                "type": "string",
                "name": "$raw_username",
                "description": "The username prior to sanitization."
            },
            {
                "type": "bool",
                "name": "$strict",
                "description": "Whether to limit the sanitization to specific characters. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_file_name_chars",
        "description": "Filters the list of characters to remove from a filename.",
        "arguments": [
            {
                "type": "array",
                "name": "$special_chars",
                "description": "Characters to remove."
            },
            {
                "type": "string",
                "name": "$filename_raw",
                "description": "Filename as it was passed into sanitize_file_name()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_file_name",
        "description": "Filters a sanitized filename string.",
        "arguments": [
            {
                "type": "string",
                "name": "$filename",
                "description": "Sanitized filename."
            },
            {
                "type": "string",
                "name": "$filename_raw",
                "description": "The filename prior to sanitization."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sanitize_file_name",
        "description": "This filter is documented in wp-includes\/formatting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "run_wptexturize",
        "description": "Filters whether to skip running wptexturize().",
        "arguments": [
            {
                "type": "bool",
                "name": "$run_texturize",
                "description": "Whether to short-circuit wptexturize()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "no_texturize_tags",
        "description": "Filters the list of HTML elements not to texturize.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_no_texturize_tags",
                "description": "An array of HTML element names."
            }
        ],
        "type": "filter"
    },
    {
        "text": "no_texturize_shortcodes",
        "description": "Filters the list of shortcodes not to texturize.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_no_texturize_shortcodes",
                "description": "An array of shortcode names."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_feed_cache_transient_lifetime",
        "description": "This filter is documented in wp-includes\/class-wp-feed-cache-transient.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_feed_options",
        "description": "Fires just before processing the SimplePie feed object.",
        "arguments": [
            {
                "type": "object",
                "name": "",
                "description": "&amp;$feed SimplePie feed object, passed by reference."
            },
            {
                "type": "mixed",
                "name": "$url",
                "description": "URL of feed to retrieve. If an array of URLs, the feeds are merged."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "feed_content_type",
        "description": "Filters the content type for a specific feed type.",
        "arguments": [
            {
                "type": "string",
                "name": "$content_type",
                "description": "Content type indicating the type of data that a feed contains."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "self_link",
        "description": "Filters the current feed URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$feed_link",
                "description": "The link for the feed with set URL scheme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "atom_enclosure",
        "description": "Filters the atom enclosure HTML link tag for the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$html_link_tag",
                "description": "The HTML link tag with a URI and other attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rss_enclosure",
        "description": "Filters the RSS enclosure HTML link tag for the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$html_link_tag",
                "description": "The HTML link tag with a URI and other attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_category_rss",
        "description": "Filters all of the post categories for display in a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$the_list",
                "description": "All of the RSS post categories."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Type of feed. Possible values include 'rss2', 'atom'.                         Default 'rss2'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_text_rss",
        "description": "Filters the current comment content for use in a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_text",
                "description": "The content of the current comment."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_author_rss",
        "description": "Filters the current comment author for use in a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author",
                "description": "The current comment author."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_link",
        "description": "Filters the current comment's permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_permalink",
                "description": "The current comment permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_link_feed",
        "description": "Filters the comments permalink for the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_permalink",
                "description": "The current comment permalink with                                  '#comments' appended."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_permalink_rss",
        "description": "Filters the permalink to the post for use in feeds.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_permalink",
                "description": "The current post permalink."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_excerpt_rss",
        "description": "Filters the post excerpt for a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The current post excerpt."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_content",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_content_feed",
        "description": "Filters the post content for use in feeds.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The current post content."
            },
            {
                "type": "string",
                "name": "$feed_type",
                "description": "Type of feed. Possible values include 'rss2', 'atom'.                          Default 'rss2'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_title_rss",
        "description": "Filters the post title for use in a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "The current post title."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_title_rss",
        "description": "Filters the blog title for display of the feed title.",
        "arguments": [
            {
                "type": "string",
                "name": "$wp_title_rss",
                "description": "The current blog title."
            },
            {
                "type": "string",
                "name": "$deprecated",
                "description": "Unused."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_wp_title_rss",
        "description": "Filters the blog title for use as the feed title.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "The current blog title."
            },
            {
                "type": "string",
                "name": "$deprecated",
                "description": "Unused."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_feed",
        "description": "Filters the default feed type.",
        "arguments": [
            {
                "type": "string",
                "name": "$feed_type",
                "description": "Type of default feed. Possible values include 'rss2', 'atom'.                          Default 'rss2'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "bloginfo_rss",
        "description": "Filters the bloginfo for display in RSS feeds.",
        "arguments": [
            {
                "type": "string",
                "name": "$rss_container",
                "description": "RSS container for the blog information."
            },
            {
                "type": "string",
                "name": "$show",
                "description": "The type of blog information to retrieve."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_bloginfo_rss",
        "description": "Filters the bloginfo for use in RSS feeds.",
        "arguments": [
            {
                "type": "string",
                "name": "$info",
                "description": "Converted string value of the blog information."
            },
            {
                "type": "string",
                "name": "$show",
                "description": "The type of blog information to retrieve."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rss_tag_pre",
        "description": "Fires between the xml and rss tags in a feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "Type of feed. Possible values include 'rss2', 'rss2-comments',                        'rdf', 'atom', and 'atom-comments'."
            }
        ],
        "type": "action"
    },
    {
        "text": "rss2_ns",
        "description": "Fires at the end of the RSS root to add namespaces.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss_update_period",
        "description": "Filters how often to update the RSS feed.",
        "arguments": [
            {
                "type": "string",
                "name": "$duration",
                "description": "The update period. Accepts 'hourly', 'daily', 'weekly', 'monthly',                         'yearly'. Default 'hourly'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rss_update_frequency",
        "description": "Filters the RSS update frequency.",
        "arguments": [
            {
                "type": "string",
                "name": "$frequency",
                "description": "An integer passed as a string representing the frequency                          of RSS updates within the update period. Default '1'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rss2_head",
        "description": "Fires at the end of the RSS2 Feed Header.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss2_item",
        "description": "Fires at the end of each RSS2 feed item.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss_tag_pre",
        "description": "This action is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss2_ns",
        "description": "This action is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss2_comments_ns",
        "description": "Fires at the end of the RSS root to add namespaces.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss_update_period",
        "description": "This filter is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "rss_update_frequency",
        "description": "This filter is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "commentsrss2_head",
        "description": "Fires at the end of the RSS2 comment feed header.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "the_title_rss",
        "description": "This filter is documented in wp-includes\/feed.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "commentrss2_item",
        "description": "Fires at the end of each RSS2 comment feed item.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment->comment_ID",
                "description": "The ID of the comment being displayed."
            },
            {
                "type": "int",
                "name": "$comment_post->ID",
                "description": "The ID of the post the comment is connected to."
            }
        ],
        "type": "action"
    },
    {
        "text": "rss_head",
        "description": "Fires at the end of the RSS Feed Header.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss_item",
        "description": "Fires at the end of each RSS feed item.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss_tag_pre",
        "description": "This action is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rdf_ns",
        "description": "Fires at the end of the feed root to add namespaces.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss_update_period",
        "description": "This filter is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "rss_update_frequency",
        "description": "This filter is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "rdf_header",
        "description": "Fires at the end of the RDF feed header.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rdf_item",
        "description": "Fires at the end of each RDF feed item.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss_tag_pre",
        "description": "This action is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "atom_ns",
        "description": "Fires at end of the Atom feed root to add namespaces.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "atom_head",
        "description": "Fires just before the first Atom feed entry.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "atom_author",
        "description": "Fires at the end of each Atom feed author entry.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "atom_entry",
        "description": "Fires at the end of each Atom feed item.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "rss_tag_pre",
        "description": "This action is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "atom_ns",
        "description": "This action is documented in wp-includes\/feed-atom.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "atom_comments_ns",
        "description": "Fires inside the feed tag in the Atom comment feed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comments_atom_head",
        "description": "Fires at the end of the Atom comment feed header.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "the_title_rss",
        "description": "This filter is documented in wp-includes\/feed.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "comment_atom_entry",
        "description": "Fires at the end of each Atom comment feed item.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "ID of the current comment."
            },
            {
                "type": "int",
                "name": "$comment_post_id",
                "description": "ID of the post the current comment is connected to."
            }
        ],
        "type": "action"
    },
    {
        "text": "oembed_request_post_id",
        "description": "This filter is documented in wp-includes\/class-wp-oembed-controller.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "embed_site_title_html",
        "description": "Filters the site title HTML in the embed footer.",
        "arguments": [
            {
                "type": "string",
                "name": "$site_title",
                "description": "The site title HTML."
            }
        ],
        "type": "filter"
    },
    {
        "text": "enqueue_embed_scripts",
        "description": "Fires when scripts and styles are enqueued for the embed iframe.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "the_excerpt_embed",
        "description": "Filters the post excerpt for the embed template.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The current post excerpt."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_min_max_width",
        "description": "Filters the allowed minimum and maximum widths for the oEmbed response.",
        "arguments": [
            {
                "type": "array",
                "name": "$min_max_width",
                "description": "{     Minimum and maximum widths for the oEmbed response.     @type int $min Minimum width. Default 200.     @type int $max Maximum width. Default 600. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_response_data",
        "description": "Filters the oEmbed response data.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "The response data."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post object."
            },
            {
                "type": "int",
                "name": "$width",
                "description": "The requested width."
            },
            {
                "type": "int",
                "name": "$height",
                "description": "The calculated height."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_html",
        "description": "Filters the embed HTML output for a given post.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The default HTML."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Current post object."
            },
            {
                "type": "int",
                "name": "$width",
                "description": "Width of the response."
            },
            {
                "type": "int",
                "name": "$height",
                "description": "Height of the response."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_endpoint_url",
        "description": "Filters the oEmbed endpoint URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The URL to the oEmbed endpoint."
            },
            {
                "type": "string",
                "name": "$permalink",
                "description": "The permalink used for the <code>url<\/code> query arg."
            },
            {
                "type": "string",
                "name": "$format",
                "description": "The requested response format."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_embed_url",
        "description": "Filters the URL to embed a specific post.",
        "arguments": [
            {
                "type": "string",
                "name": "$embed_url",
                "description": "The post embed URL."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The corresponding post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_discovery_links",
        "description": "Filters the oEmbed discovery links HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML of the discovery links."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_embed_handler_video",
        "description": "Filters the video embed output.",
        "arguments": [
            {
                "type": "string",
                "name": "$video",
                "description": "Video embed output."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of embed attributes."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The original URL that was matched by the regex."
            },
            {
                "type": "array",
                "name": "$rawattr",
                "description": "The original unmodified attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_embed_handler_audio",
        "description": "Filters the audio embed output.",
        "arguments": [
            {
                "type": "string",
                "name": "$audio",
                "description": "Audio embed output."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of embed attributes."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The original URL that was matched by the regex."
            },
            {
                "type": "array",
                "name": "$rawattr",
                "description": "The original unmodified attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_embed_handler_youtube",
        "description": "Filters the YoutTube embed output.",
        "arguments": [
            {
                "type": "string",
                "name": "$embed",
                "description": "YouTube embed output."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of embed attributes."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The original URL that was matched by the regex."
            },
            {
                "type": "array",
                "name": "$rawattr",
                "description": "The original unmodified attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_default_embeds",
        "description": "Filters whether to load the default embed handlers.",
        "arguments": [
            {
                "type": "bool",
                "name": "$maybe_load_embeds",
                "description": "Whether to load the embeds library. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_audio_embed_handler",
        "description": "Filters the audio embed handler callback.",
        "arguments": [
            {
                "type": "callable",
                "name": "$handler",
                "description": "Audio embed handler callback function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_video_embed_handler",
        "description": "Filters the video embed handler callback.",
        "arguments": [
            {
                "type": "callable",
                "name": "$handler",
                "description": "Video embed handler callback function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_defaults",
        "description": "Filters the default array of embed dimensions.",
        "arguments": [
            {
                "type": "array",
                "name": "$size",
                "description": "An array of embed width and height values                     in pixels (in that order)."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The URL that should be embedded."
            }
        ],
        "type": "filter"
    },
    {
        "text": "htmledit_pre",
        "description": "Filters the text before it is formatted for the HTML editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The HTML-formatted text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "richedit_pre",
        "description": "Filters text returned for the rich text editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Text for the rich text editor."
            }
        ],
        "type": "filter"
    },
    {
        "text": "richedit_pre",
        "description": "This filter is documented in wp-includes\/deprecated.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "extra_theme_headers",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "parent_post_rel_link",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "index_rel_link",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "{$boundary}_post_rel_link",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "update_usermeta",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "added_usermeta",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "updated_usermeta",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "delete_usermeta",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "deleted_usermeta",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "attachment_innerHTML",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "attachment_max_dims",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "attachment_icon",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "icon_dir",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_content_rss",
        "description": "TODO: consult hierarchy",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "link_category",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_date_sql",
        "description": "Filters the date query WHERE clause.",
        "arguments": [
            {
                "type": "string",
                "name": "$where",
                "description": "WHERE clause of the date query."
            },
            {
                "type": "\\WP_Date_Query",
                "name": "$this",
                "description": "The WP_Date_Query instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "date_query_valid_columns",
        "description": "Filters the list of valid date query columns.",
        "arguments": [
            {
                "type": "array",
                "name": "$valid_columns",
                "description": "An array of valid date query columns. Defaults                             are 'post_date', 'post_date_gmt', 'post_modified',                             'post_modified_gmt', 'comment_date', 'comment_date_gmt',                            'user_registered'"
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_render_partials_before",
        "description": "Fires immediately before partials are rendered.",
        "arguments": [
            {
                "type": "\\WP_Customize_Selective_Refresh",
                "name": "$this",
                "description": "Selective refresh component."
            },
            {
                "type": "array",
                "name": "$partials",
                "description": "Placements' context data for the partials rendered in the request.                                                 The array is keyed by partial ID, with each item being an array of                                                 the placements' context data."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_render_partials_after",
        "description": "Fires immediately after partials are rendered.",
        "arguments": [
            {
                "type": "\\WP_Customize_Selective_Refresh",
                "name": "$this",
                "description": "Selective refresh component."
            },
            {
                "type": "array",
                "name": "$partials",
                "description": "Placements' context data for the partials rendered in the request.                                                 The array is keyed by partial ID, with each item being an array of                                                 the placements' context data."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_render_partials_response",
        "description": "Filters the response from rendering the partials.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "{     Response.     @type array $contents Associative array mapping a partial ID its corresponding array of contents                           for the containers requested.     @type array $errors   List of errors triggered during rendering of partials, if <code>WP_DEBUG_DISPLAY<\/code>                           is enabled. }"
            },
            {
                "type": "\\WP_Customize_Selective_Refresh",
                "name": "$this",
                "description": "Selective refresh component."
            },
            {
                "type": "array",
                "name": "$partials",
                "description": "Placements' context data for the partials rendered in the request.                                                 The array is keyed by partial ID, with each item being an array of                                                 the placements' context data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_dynamic_partial_args",
        "description": "Filters a dynamic partial's constructor arguments.",
        "arguments": [
            {
                "type": "false|array",
                "name": "$partial_args",
                "description": "The arguments to the WP_Customize_Partial constructor."
            },
            {
                "type": "string",
                "name": "$partial_id",
                "description": "ID for dynamic partial."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_dynamic_partial_class",
        "description": "Filters the class used to construct partials.",
        "arguments": [
            {
                "type": "string",
                "name": "$partial_class",
                "description": "WP_Customize_Partial or a subclass."
            },
            {
                "type": "string",
                "name": "$partial_id",
                "description": "ID for dynamic partial."
            },
            {
                "type": "array",
                "name": "$partial_args",
                "description": "The arguments to the WP_Customize_Partial constructor."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_dynamic_partial_args",
        "description": "This filter (will be) documented in wp-includes\/class-wp-customize-manager.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "customize_dynamic_partial_class",
        "description": "This filter (will be) documented in wp-includes\/class-wp-customize-manager.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "customize_partial_render",
        "description": "Filters partial rendering.",
        "arguments": [
            {
                "type": "string|array|false",
                "name": "$rendered",
                "description": "The partial value. Default false."
            },
            {
                "type": "\\WP_Customize_Partial",
                "name": "$partial",
                "description": "WP_Customize_Setting instance."
            },
            {
                "type": "array",
                "name": "$container_context",
                "description": "Optional array of context data associated with                                                the target container."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_partial_render_{$partial->id}",
        "description": "Filters partial rendering for a specific partial.",
        "arguments": [
            {
                "type": "string|array|false",
                "name": "$rendered",
                "description": "The partial value. Default false."
            },
            {
                "type": "\\WP_Customize_Partial",
                "name": "$partial",
                "description": "WP_Customize_Setting instance."
            },
            {
                "type": "array",
                "name": "$container_context",
                "description": "Optional array of context data associated with                                                the target container."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_sanitize_{$this->id}",
        "description": "This filter is documented in wp-includes\/class-wp-customize-setting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "title_save_pre",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "excerpt_save_pre",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "content_save_pre",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "customize_sanitize_{$this->id}",
        "description": "This filter is documented in wp-includes\/class-wp-customize-setting.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "nav_menu_attr_title",
        "description": "This filter is documented in wp-includes\/nav-menu.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "nav_menu_description",
        "description": "This filter is documented in wp-includes\/nav-menu.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_setup_nav_menu_item",
        "description": "This filter is documented in wp-includes\/nav-menu.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "cron_schedules",
        "description": "Filters the non-default cron schedules.",
        "arguments": [
            {
                "type": "array",
                "name": "$new_schedules",
                "description": "An array of non-default cron schedules. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "cron_request",
        "description": "Filters the cron request arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$cron_request_array",
                "description": "{     An array of cron request URL arguments.     @type string $url  The cron request URL.     @type int    $key  The 22 digit GMT microtime.     @type array  $args {         An array of cron request arguments.         @type int  $timeout   The request timeout in seconds. Default .01 seconds.         @type bool $blocking  Whether to set blocking for the request. Default false.         @type bool $sslverify Whether SSL should be verified for the request. Default false.     } }"
            },
            {
                "type": "string",
                "name": "$doing_wp_cron",
                "description": "The unix timestamp of the cron lock."
            }
        ],
        "type": "filter"
    },
    {
        "text": "https_local_ssl_verify",
        "description": "This filter is documented in wp-includes\/class-wp-http-streams.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "schedule_event",
        "description": "This filter is documented in wp-includes\/cron.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "schedule_event",
        "description": "Filters a single event before it is scheduled.",
        "arguments": [
            {
                "type": "\\stdClass",
                "name": "$event",
                "description": "{     An object containing an event's data.     @type string       $hook      Action hook to execute when event is run.     @type int          $timestamp Unix timestamp (UTC) for when to run the event.     @type string|false $schedule  How often the event should recur. See <code>wp_get_schedules()<\/code>.     @type array        $args      Arguments to pass to the hook's callback function. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_id_not_found",
        "description": "Fires when a comment is attempted on a post that does not exist.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_closed",
        "description": "Fires when a comment is attempted on a post that has comments closed.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_on_trash",
        "description": "Fires when a comment is attempted on a trashed post.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_on_draft",
        "description": "Fires when a comment is attempted on a post in draft mode.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_on_password_protected",
        "description": "Fires when a comment is attempted on a password-protected post.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_comment_on_post",
        "description": "Fires before a comment is posted.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_post_ID",
                "description": "Post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "close_comments_for_post_types",
        "description": "This filter is documented in wp-includes\/comment.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "close_comments_for_post_types",
        "description": "Filters the list of post types to automatically close comments for.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_types",
                "description": "An array of registered post types. Default array with 'post'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "clean_comment_cache",
        "description": "Fires immediately after a comment has been removed from the object cache.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "Comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_ping",
        "description": "Fires just before pinging back links found in a post.",
        "arguments": [
            {
                "type": "array",
                "name": "",
                "description": "&amp;$post_links An array of post links to be checked, passed by reference."
            },
            {
                "type": "array",
                "name": "",
                "description": "&amp;$pung       Whether a link has already been pinged, passed by reference."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "The post ID."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "pingback_useragent",
        "description": "Filters the user agent sent when pinging-back a URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$concat_useragent",
                "description": "The user agent concatenated with ' -- WordPress\/'                                    and the WordPress version."
            },
            {
                "type": "string",
                "name": "$useragent",
                "description": "The useragent."
            },
            {
                "type": "string",
                "name": "$pingback_server_url",
                "description": "The server URL being linked to."
            },
            {
                "type": "string",
                "name": "$pagelinkedto",
                "description": "URL of page linked to."
            },
            {
                "type": "string",
                "name": "$pagelinkedfrom",
                "description": "URL of page linked from."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_content",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_excerpt",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_wp_update_comment_count_now",
        "description": "Filters a post's comment count before it is updated in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$new",
                "description": "The new comment count. Default null."
            },
            {
                "type": "int",
                "name": "$old",
                "description": "The old comment count."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_update_comment_count",
        "description": "Fires immediately after a post's comment count is updated in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "int",
                "name": "$new",
                "description": "The new comment count."
            },
            {
                "type": "int",
                "name": "$old",
                "description": "The old comment count."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_post",
        "description": "This action is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comment_save_pre",
        "description": "Filters the comment content before it is updated in the database.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_content",
                "description": "The comment data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_comment",
        "description": "Fires immediately after a comment is updated in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "array",
                "name": "$data",
                "description": "Comment data."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_set_comment_status",
        "description": "Fires immediately before transitioning a comment's status from one to another in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "Comment ID."
            },
            {
                "type": "string|bool",
                "name": "$comment_status",
                "description": "Current comment status. Possible values include                                    'hold', 'approve', 'spam', 'trash', or false."
            }
        ],
        "type": "action"
    },
    {
        "text": "notify_post_author",
        "description": "Filters whether to send the post author new comment notification emails, overriding the site setting.",
        "arguments": [
            {
                "type": "bool",
                "name": "$maybe_notify",
                "description": "Whether to notify the post author about the new comment."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The ID of the comment for the notification."
            }
        ],
        "type": "filter"
    },
    {
        "text": "notify_moderator",
        "description": "This filter is documented in wp-includes\/comment.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "preprocess_comment",
        "description": "Filters a comment's data before it is sanitized and inserted into the database.",
        "arguments": [
            {
                "type": "array",
                "name": "$commentdata",
                "description": "Comment data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_post",
        "description": "Fires immediately after a comment is inserted into the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "int|string",
                "name": "$comment_approved",
                "description": "1 if the comment is approved, 0 if not, 'spam' if spam."
            },
            {
                "type": "array",
                "name": "$commentdata",
                "description": "Comment data."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_user_id",
        "description": "Filters the comment author's user id before it is set.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_ID",
                "description": "The comment author's user ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_id",
        "description": "This filter is documented in wp-includes\/comment.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_comment_user_agent",
        "description": "Filters the comment author's browser user agent before it is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_agent",
                "description": "The comment author's browser user agent."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_author_name",
        "description": "This filter is documented in wp-includes\/comment.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_comment_content",
        "description": "Filters the comment content before it is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_content",
                "description": "The comment content."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_user_ip",
        "description": "Filters the comment author's IP before it is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author_ip",
                "description": "The comment author's IP."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_author_url",
        "description": "This filter is documented in wp-includes\/comment.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_comment_author_email",
        "description": "This filter is documented in wp-includes\/comment.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_insert_comment",
        "description": "Fires immediately after a comment is inserted into the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "The comment ID."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_get_current_commenter",
        "description": "Filters the current commenter's name, email, and URL.",
        "arguments": [
            {
                "type": "array",
                "name": "$comment_author_data",
                "description": "{     An array of current commenter variables.     @type string $comment_author       The name of the author of the comment. Default empty.     @type string $comment_author_email The email address of the <code>$comment_author<\/code>. Default empty.     @type string $comment_author_url   The URL address of the <code>$comment_author<\/code>. Default empty. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "transition_comment_status",
        "description": "Fires when the comment status is in transition.",
        "arguments": [
            {
                "type": "int|string",
                "name": "$new_status",
                "description": "The new comment status."
            },
            {
                "type": "int|string",
                "name": "$old_status",
                "description": "The old comment status."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The comment data."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_{$old_status}_to_{$new_status}",
        "description": "Fires when the comment status is in transition from one specific status to another.",
        "arguments": [
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_{$new_status}_{$comment->comment_type}",
        "description": "Fires when the status of a specific comment type is in transition.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "action"
    },
    {
        "text": "unspam_comment",
        "description": "Fires immediately before a comment is unmarked as Spam.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "unspammed_comment",
        "description": "Fires immediately after a comment is unmarked as Spam.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "spam_comment",
        "description": "Fires immediately before a comment is marked as Spam.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "spammed_comment",
        "description": "Fires immediately after a comment is marked as Spam.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrash_comment",
        "description": "Fires immediately before a comment is restored from the Trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "untrashed_comment",
        "description": "Fires immediately after a comment is restored from the Trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "trash_comment",
        "description": "Fires immediately before a comment is sent to the Trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "trashed_comment",
        "description": "Fires immediately after a comment is sent to Trash.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_comment",
        "description": "Fires immediately before a comment is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_comment",
        "description": "Fires immediately after a comment is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_set_comment_status",
        "description": "This action is documented in wp-includes\/comment.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_count_comments",
        "description": "Filters the comments count for a given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$count",
                "description": "An empty array."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_blacklist_check",
        "description": "Fires before the comment is tested for blacklisted characters or words.",
        "arguments": [
            {
                "type": "string",
                "name": "$author",
                "description": "Comment author."
            },
            {
                "type": "string",
                "name": "$email",
                "description": "Comment author's email."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "Comment author's URL."
            },
            {
                "type": "string",
                "name": "$comment",
                "description": "Comment content."
            },
            {
                "type": "string",
                "name": "$user_ip",
                "description": "Comment author's IP address."
            },
            {
                "type": "string",
                "name": "$user_agent",
                "description": "Comment author's browser user agent."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_get_comment_fields_max_lengths",
        "description": "Filters the lengths for the comment form fields.",
        "arguments": [
            {
                "type": "array",
                "name": "$lengths",
                "description": "Associative array <code>'field_name' =&gt; 'maximum length'<\/code>."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_page_of_comment",
        "description": "Filters the calculated page on which a comment appears.",
        "arguments": [
            {
                "type": "int",
                "name": "$page",
                "description": "Comment page."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "{     Arguments used to calculate pagination. These include arguments auto-detected by the function,     based on query vars, system settings, etc. For pristine arguments passed to the function,     see <code>$original_args<\/code>.     @type string $type      Type of comments to count.     @type int    $page      Calculated current page.     @type int    $per_page  Calculated number of comments per page.     @type int    $max_depth Maximum comment threading depth allowed. }"
            },
            {
                "type": "array",
                "name": "$original_args",
                "description": "{     Array of arguments passed to the function. Some or all of these may not be set.     @type string $type      Type of comments to count.     @type int    $page      Current comment page.     @type int    $per_page  Number of comments per page.     @type int    $max_depth Maximum comment threading depth allowed. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_flood_filter",
        "description": "Filters the comment flood status.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bool",
                "description": "Whether a comment flood is occurring. Default false."
            },
            {
                "type": "int",
                "name": "$time_lastcomment",
                "description": "Timestamp of when the last comment was posted."
            },
            {
                "type": "int",
                "name": "$time_newcomment",
                "description": "Timestamp of when the new comment was posted."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_flood_trigger",
        "description": "Fires before the comment flood message is triggered.",
        "arguments": [
            {
                "type": "int",
                "name": "$time_lastcomment",
                "description": "Timestamp of when the last comment was posted."
            },
            {
                "type": "int",
                "name": "$time_newcomment",
                "description": "Timestamp of when the new comment was posted."
            }
        ],
        "type": "action"
    },
    {
        "text": "duplicate_comment_id",
        "description": "Filters the ID, if any, of the duplicate comment found when creating a new comment.",
        "arguments": [
            {
                "type": "int",
                "name": "$dupe_id",
                "description": "ID of the comment identified as a duplicate."
            },
            {
                "type": "array",
                "name": "$commentdata",
                "description": "Data for the comment being created."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_duplicate_trigger",
        "description": "Fires immediately after a duplicate comment is detected.",
        "arguments": [
            {
                "type": "array",
                "name": "$commentdata",
                "description": "Comment data."
            }
        ],
        "type": "action"
    },
    {
        "text": "check_comment_flood",
        "description": "Fires immediately before a comment is marked approved.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author_IP",
                "description": "Comment author's IP address."
            },
            {
                "type": "string",
                "name": "$comment_author_email",
                "description": "Comment author's email."
            },
            {
                "type": "string",
                "name": "$comment_date_gmt",
                "description": "GMT date the comment was posted."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_comment_approved",
        "description": "Filters a comment's approval status before it is set.",
        "arguments": [
            {
                "type": "bool|string",
                "name": "$approved",
                "description": "The approval status. Accepts 1, 0, or 'spam'."
            },
            {
                "type": "array",
                "name": "$commentdata",
                "description": "Comment data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_author_name",
        "description": "Filters the comment author's name cookie before it is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_cookie",
                "description": "The comment author name cookie."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_author_email",
        "description": "Filters the comment author's email cookie before it is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_email_cookie",
                "description": "The comment author email cookie."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_comment_author_url",
        "description": "Filters the comment author's URL cookie before it is set.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_url_cookie",
                "description": "The comment author URL cookie."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_cookie_lifetime",
        "description": "Filters the lifetime of the comment cookie in seconds.",
        "arguments": [
            {
                "type": "int",
                "name": "$seconds",
                "description": "Comment cookie lifetime. Default 30000000."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_default_comment_status",
        "description": "Filters the default comment status for the given post type.",
        "arguments": [
            {
                "type": "string",
                "name": "$status",
                "description": "Default status for the given post type,                             either 'open' or 'closed'."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type. Default is <code>post<\/code>."
            },
            {
                "type": "string",
                "name": "$comment_type",
                "description": "Type of comment. Default is <code>comment<\/code>."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment",
        "description": "Fires after a comment is retrieved.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$_comment",
                "description": "Comment data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_text",
        "description": "This filter is documented in wp-includes\/comment-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "comment_max_links_url",
        "description": "Filters the number of links found in a comment.",
        "arguments": [
            {
                "type": "int",
                "name": "$num_links",
                "description": "The number of links found."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "Comment author's URL. Included in allowed links total."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_default_fields",
        "description": "Filters the default comment form fields.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "The default comment fields."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_permalink",
        "description": "This filter is documented in wp-includes\/link-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_permalink",
        "description": "This filter is documented in wp-includes\/link-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "comment_form_defaults",
        "description": "Filters the comment form default arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$defaults",
                "description": "The default comment form arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_before",
        "description": "Fires before the comment form.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comment_form_must_log_in_after",
        "description": "Fires after the HTML-formatted 'must log in after' message in the comment form.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comment_form_top",
        "description": "Fires at the top of the comment form, inside the form tag.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comment_form_logged_in",
        "description": "Filters the 'logged in' message for the comment form for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$args_logged_in",
                "description": "The logged-in-as HTML-formatted message."
            },
            {
                "type": "array",
                "name": "$commenter",
                "description": "An array containing the comment author's                               username, email, and URL."
            },
            {
                "type": "string",
                "name": "$user_identity",
                "description": "If the commenter is a registered user,                               the display name, blank otherwise."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_logged_in_after",
        "description": "Fires after the is_user_logged_in() check in the comment form.",
        "arguments": [
            {
                "type": "array",
                "name": "$commenter",
                "description": "An array containing the comment author's                              username, email, and URL."
            },
            {
                "type": "string",
                "name": "$user_identity",
                "description": "If the commenter is a registered user,                              the display name, blank otherwise."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_form_fields",
        "description": "Filters the comment form fields, including the textarea.",
        "arguments": [
            {
                "type": "array",
                "name": "$comment_fields",
                "description": "The comment fields."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_field_comment",
        "description": "Filters the content of the comment textarea field for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$args_comment_field",
                "description": "The content of the comment textarea field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_before_fields",
        "description": "Fires before the comment fields in the comment form, excluding the textarea.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comment_form_field_{$name}",
        "description": "Filters a comment form field for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$field",
                "description": "The HTML-formatted output of the comment form field."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_after_fields",
        "description": "Fires after the comment fields in the comment form, excluding the textarea.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comment_form_submit_button",
        "description": "Filters the submit button for the comment form to display.",
        "arguments": [
            {
                "type": "string",
                "name": "$submit_button",
                "description": "HTML markup for the submit button."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to <code>comment_form()<\/code>."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form_submit_field",
        "description": "Filters the submit field for the comment form to display.",
        "arguments": [
            {
                "type": "string",
                "name": "$submit_field",
                "description": "HTML markup for the submit field."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to comment_form()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_form",
        "description": "Fires at the bottom of the comment form, inside the closing <\/form> tag.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_form_after",
        "description": "Fires after the comment form.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comment_form_comments_closed",
        "description": "Fires after the comment form if comments are closed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_list_comments_args",
        "description": "Filters the arguments used in retrieving the comment list.",
        "arguments": [
            {
                "type": "array",
                "name": "$r",
                "description": "An array of arguments for displaying comments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_id_fields",
        "description": "Filters the returned comment id fields.",
        "arguments": [
            {
                "type": "string",
                "name": "$result",
                "description": "The HTML-formatted hidden id field comment elements."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "The post ID."
            },
            {
                "type": "int",
                "name": "$replytoid",
                "description": "The id of the comment being replied to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "cancel_comment_reply_link",
        "description": "Filters the cancel comment reply link HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$formatted_link",
                "description": "The HTML-formatted cancel comment reply link."
            },
            {
                "type": "string",
                "name": "$link",
                "description": "Cancel comment reply link URL."
            },
            {
                "type": "string",
                "name": "$text",
                "description": "Cancel comment reply link text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_comments_link",
        "description": "Filters the formatted post comments link HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$formatted",
                "description": "The HTML-formatted post comments link."
            },
            {
                "type": "int|\\WP_Post",
                "name": "$post",
                "description": "The post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_reply_link_args",
        "description": "Filters the comment reply link arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Comment reply link arguments. See get_comment_reply_link()                            for more information on accepted arguments."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The object of the comment being replied to."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_reply_link",
        "description": "Filters the comment reply link.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The HTML markup for the comment reply link."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments overriding the defaults."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "The object of the comment being replied."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "respond_link",
        "description": "Filters the respond link when a post has no comments.",
        "arguments": [
            {
                "type": "string",
                "name": "$respond_link",
                "description": "The default response link."
            },
            {
                "type": "integer",
                "name": "$id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_popup_link_attributes",
        "description": "Filters the comments link attributes for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$attributes",
                "description": "The comments link attributes. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_template_query_args",
        "description": "Filters the arguments used to query comments in comments_template().",
        "arguments": [
            {
                "type": "array",
                "name": "$comment_args",
                "description": "{     Array of WP_Comment_Query arguments.     @type string|array $orderby                   Field(s) to order by.     @type string       $order                     Order of results. Accepts 'ASC' or 'DESC'.     @type string       $status                    Comment status.     @type array        $include_unapproved        Array of IDs or email addresses whose unapproved comments                                                   will be included in results.     @type int          $post_id                   ID of the post.     @type bool         $no_found_rows             Whether to refrain from querying for found rows.     @type bool         $update_comment_meta_cache Whether to prime cache for comment meta.     @type bool|string  $hierarchical              Whether to query for comments hierarchically.     @type int          $offset                    Comment offset.     @type int          $number                    Number of comments to fetch. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_array",
        "description": "Filters the comments array.",
        "arguments": [
            {
                "type": "array",
                "name": "$comments",
                "description": "Array of comments supplied to the comments template."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_template",
        "description": "Filters the path to the theme template file used for the comments template.",
        "arguments": [
            {
                "type": "string",
                "name": "$theme_template",
                "description": "The path to the theme template file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pings_open",
        "description": "Filters whether the current post is open for pings.",
        "arguments": [
            {
                "type": "bool",
                "name": "$open",
                "description": "Whether the current post is open for pings."
            },
            {
                "type": "int|\\WP_Post",
                "name": "$post_id",
                "description": "The post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_open",
        "description": "Filters whether the current post is open for comments.",
        "arguments": [
            {
                "type": "bool",
                "name": "$open",
                "description": "Whether the current post is open for comments."
            },
            {
                "type": "int|\\WP_Post",
                "name": "$post_id",
                "description": "The post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "trackback_url",
        "description": "Filters the returned trackback URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$tb_url",
                "description": "The trackback URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_type",
        "description": "Filters the returned comment type.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_type",
                "description": "The type of comment, such as 'comment', 'pingback', or 'trackback'."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_time",
        "description": "Filters the returned comment time.",
        "arguments": [
            {
                "type": "string|int",
                "name": "$date",
                "description": "The comment time, formatted as a date string or Unix timestamp."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "Date format."
            },
            {
                "type": "bool",
                "name": "$gmt",
                "description": "Whether the GMT date is in use."
            },
            {
                "type": "bool",
                "name": "$translate",
                "description": "Whether the time is translated."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_text",
        "description": "Filters the text of a comment to be displayed.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_text",
                "description": "Text of the current comment."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_text",
        "description": "Filters the text of a comment.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_content",
                "description": "Text of the comment."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_number",
        "description": "Filters the comments count for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "A translatable string formatted based on whether the count                       is equal to 0, 1, or 1+."
            },
            {
                "type": "int",
                "name": "$number",
                "description": "The number of post comments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comments_number",
        "description": "Filters the returned comment count for a post.",
        "arguments": [
            {
                "type": "int",
                "name": "$count",
                "description": "Number of comments a post has."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comments_link",
        "description": "Filters the returned post comments permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$comments_link",
                "description": "Post comments permalink with '#comments' appended."
            },
            {
                "type": "int|\\WP_Post",
                "name": "$post_id",
                "description": "Post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_link",
        "description": "Filters the returned single comment permalink.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The comment permalink with '#comment-$id' appended."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The current comment object."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to override the defaults."
            },
            {
                "type": "int",
                "name": "$cpage",
                "description": "The calculated 'cpage' value."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_ID",
        "description": "Filters the returned comment ID.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The current comment ID."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_excerpt",
        "description": "Filters the comment excerpt for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_excerpt",
                "description": "The comment excerpt text."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_excerpt_length",
        "description": "Filters the amount of words used in the comment excerpt.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_excerpt_length",
                "description": "The amount of words you want to display in the comment excerpt."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_excerpt",
        "description": "Filters the retrieved comment excerpt.",
        "arguments": [
            {
                "type": "string",
                "name": "$excerpt",
                "description": "The comment excerpt text."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_date",
        "description": "Filters the returned comment date.",
        "arguments": [
            {
                "type": "string|int",
                "name": "$date",
                "description": "Formatted date string or Unix timestamp."
            },
            {
                "type": "string",
                "name": "$d",
                "description": "The format of the date."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_class",
        "description": "Filters the returned CSS classes for the current comment.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of comment classes."
            },
            {
                "type": "string",
                "name": "$class",
                "description": "A comma-separated list of additional classes added to the list."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The comment id."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            },
            {
                "type": "int|\\WP_Post",
                "name": "$post_id",
                "description": "The post ID or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_url_link",
        "description": "Filters the comment author's returned URL link.",
        "arguments": [
            {
                "type": "string",
                "name": "$return",
                "description": "The HTML-formatted comment author URL link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_url",
        "description": "Filters the comment author's URL for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_url",
                "description": "The comment author's URL."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_url",
        "description": "Filters the comment author's URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The comment author's URL."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_IP",
        "description": "Filters the comment author's returned IP address.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author_IP",
                "description": "The comment author's IP address."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_link",
        "description": "Filters the comment author's link for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$return",
                "description": "The HTML-formatted comment author link.                           Empty for an invalid URL."
            },
            {
                "type": "string",
                "name": "$author",
                "description": "The comment author's username."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_email",
        "description": "Filters the comment author's email for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author_email",
                "description": "The comment author's email address."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "author_email",
        "description": "Filters the comment author's email for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_email",
                "description": "The comment author's email address."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author_email",
        "description": "Filters the comment author's returned email address.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_author_email",
                "description": "The comment author's email address."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_author",
        "description": "Filters the comment author's name for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$author",
                "description": "The comment author's username."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_comment_author",
        "description": "Filters the returned comment author name.",
        "arguments": [
            {
                "type": "string",
                "name": "$author",
                "description": "The comment author's username."
            },
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "The comment ID."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "style_loader_src",
        "description": "Filters an enqueued style's fully-qualified URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$src",
                "description": "The source URL of the enqueued style."
            },
            {
                "type": "string",
                "name": "$handle",
                "description": "The style's registered handle."
            }
        ],
        "type": "filter"
    },
    {
        "text": "print_styles_array",
        "description": "Filters the array of enqueued styles before processing for output.",
        "arguments": [
            {
                "type": "array",
                "name": "$to_do",
                "description": "The list of enqueued styles about to be processed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "style_loader_tag",
        "description": "Filters the HTML link tag of an enqueued style.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The link tag for the enqueued style."
            },
            {
                "type": "string",
                "name": "$handle",
                "description": "The style's registered handle."
            },
            {
                "type": "string",
                "name": "$href",
                "description": "The stylesheet's source URL."
            },
            {
                "type": "string",
                "name": "$media",
                "description": "The stylesheet's media attribute."
            }
        ],
        "type": "filter"
    },
    {
        "text": "style_loader_tag",
        "description": "This filter is documented in wp-includes\/class.wp-styles.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_default_styles",
        "description": "Fires when the WP_Styles instance is initialized.",
        "arguments": [
            {
                "type": "\\WP_Styles",
                "name": "",
                "description": "&amp;$this WP_Styles instance, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "print_scripts_array",
        "description": "Filters the list of script dependencies left to print.",
        "arguments": [
            {
                "type": "array",
                "name": "$to_do",
                "description": "An array of script dependencies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "script_loader_src",
        "description": "Filters the script loader source.",
        "arguments": [
            {
                "type": "string",
                "name": "$src",
                "description": "Script loader source path."
            },
            {
                "type": "string",
                "name": "$handle",
                "description": "Script handle."
            }
        ],
        "type": "filter"
    },
    {
        "text": "script_loader_src",
        "description": "This filter is documented in wp-includes\/class.wp-scripts.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "script_loader_tag",
        "description": "Filters the HTML script tag of an enqueued script.",
        "arguments": [
            {
                "type": "string",
                "name": "$tag",
                "description": "The <code>&lt;script&gt;<\/code> tag for the enqueued script."
            },
            {
                "type": "string",
                "name": "$handle",
                "description": "The script's registered handle."
            },
            {
                "type": "string",
                "name": "$src",
                "description": "The script's source URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_default_scripts",
        "description": "Fires when the WP_Scripts instance is initialized.",
        "arguments": [
            {
                "type": "\\WP_Scripts",
                "name": "",
                "description": "&amp;$this WP_Scripts instance, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "wp",
        "description": "Fires once the WordPress environment has been set up.",
        "arguments": [
            {
                "type": "\\WP",
                "name": "",
                "description": "&amp;$this Current WordPress environment instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "pre_handle_404",
        "description": "Filters whether to short-circuit default header status handling.",
        "arguments": [
            {
                "type": "bool",
                "name": "$preempt",
                "description": "Whether to short-circuit default header status handling. Default false."
            },
            {
                "type": "\\WP_Query",
                "name": "$wp_query",
                "description": "WordPress Query object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "query_string",
        "description": "Filters the query string before parsing.",
        "arguments": [
            {
                "type": "string",
                "name": "$query_string",
                "description": "The query string to modify."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_headers",
        "description": "Filters the HTTP headers before they're sent to the browser.",
        "arguments": [
            {
                "type": "array",
                "name": "$headers",
                "description": "The list of headers to be sent."
            },
            {
                "type": "\\WP",
                "name": "$this",
                "description": "Current WordPress environment instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "send_headers",
        "description": "Fires once the requested HTTP headers for caching, content type, etc. have been sent.",
        "arguments": [
            {
                "type": "\\WP",
                "name": "",
                "description": "&amp;$this Current WordPress environment instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "do_parse_request",
        "description": "Filters whether to parse the request.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bool",
                "description": "Whether or not to parse the request. Default true."
            },
            {
                "type": "\\WP",
                "name": "$this",
                "description": "Current WordPress environment instance."
            },
            {
                "type": "array|string",
                "name": "$extra_query_vars",
                "description": "Extra passed query variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "query_vars",
        "description": "Filters the query variables whitelist before processing.",
        "arguments": [
            {
                "type": "array",
                "name": "$public_query_vars",
                "description": "The array of whitelisted query variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "request",
        "description": "Filters the array of parsed query variables.",
        "arguments": [
            {
                "type": "array",
                "name": "$query_vars",
                "description": "The array of requested query variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "parse_request",
        "description": "Fires once all query variables for the current request have been parsed.",
        "arguments": [
            {
                "type": "\\WP",
                "name": "",
                "description": "&amp;$this Current WordPress environment instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "xmlrpc_pingback_error",
        "description": "Filters the XML-RPC pingback error return.",
        "arguments": [
            {
                "type": "\\IXR_Error",
                "name": "$error",
                "description": "An IXR_Error object containing the error code and message."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "pingback_ping_source_uri",
        "description": "Filters the pingback source URI.",
        "arguments": [
            {
                "type": "string",
                "name": "$pagelinkedfrom",
                "description": "URI of the page linked from."
            },
            {
                "type": "string",
                "name": "$pagelinkedto",
                "description": "URI of the page linked to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_headers_useragent",
        "description": "This filter is documented in wp-includes\/class-http.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_remote_source",
        "description": "Filters the pingback remote source.",
        "arguments": [
            {
                "type": "string",
                "name": "$remote_source",
                "description": "Response source for the page linked from."
            },
            {
                "type": "string",
                "name": "$pagelinkedto",
                "description": "URL of the page linked to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pingback_post",
        "description": "Fires after a post pingback has been sent.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "Comment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_text_filters",
        "description": "Filters the MoveableType text filters list for XML-RPC.",
        "arguments": [
            {
                "type": "array",
                "name": "$filters",
                "description": "An array of text filters."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "pre_upload_error",
        "description": "Filters whether to preempt the XML-RPC media upload.",
        "arguments": [
            {
                "type": "bool",
                "name": "$error",
                "description": "Whether to pre-empt the media upload. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call_success_mw_newMediaObject",
        "description": "Fires after a new attachment has been added via the XML-RPC MovableType API.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the new attachment."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to add the attachment."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_mw_editPost",
        "description": "Fires after a post has been successfully updated via the XML-RPC MovableType API.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "ID of the updated post."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to update the post."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_mw_newPost",
        "description": "Fires after a new post has been successfully created via the XML-RPC MovableType API.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "ID of the new post."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to create the new post."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_blogger_deletePost",
        "description": "Fires after a post has been successfully deleted via the XML-RPC Blogger API.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "ID of the deleted post."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to delete the post."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_blogger_editPost",
        "description": "Fires after a post has been successfully updated via the XML-RPC Blogger API.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "ID of the updated post."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments for the post to edit."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_blogger_newPost",
        "description": "Fires after a new post has been successfully created via the XML-RPC Blogger API.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_ID",
                "description": "ID of the new post."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of new post arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_revision_fields",
        "description": "Filters the default revision query fields used by the given XML-RPC method.",
        "arguments": [
            {
                "type": "array",
                "name": "$field",
                "description": "An array of revision query fields."
            },
            {
                "type": "string",
                "name": "$method",
                "description": "The method name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_posttype_fields",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_posttype_fields",
        "description": "Filters the default query fields used by the given XML-RPC method.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "An array of post type query fields for the given method."
            },
            {
                "type": "string",
                "name": "$method",
                "description": "The method name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_allow_anonymous_comments",
        "description": "Filters whether to allow anonymous comments over XML-RPC.",
        "arguments": [
            {
                "type": "bool",
                "name": "$allow",
                "description": "Whether to allow anonymous commenting via XML-RPC.                    Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_wp_newComment",
        "description": "Fires after a new comment has been successfully created via XML-RPC.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "ID of the new comment."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of new comment arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_wp_editComment",
        "description": "Fires after a comment has been successfully updated via XML-RPC.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "ID of the updated comment."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to update the comment."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_wp_deleteComment",
        "description": "Fires after a comment has been successfully deleted via XML-RPC.",
        "arguments": [
            {
                "type": "int",
                "name": "$comment_ID",
                "description": "ID of the deleted comment."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to delete the comment."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_wp_deleteCategory",
        "description": "Fires after a category has been successfully deleted via XML-RPC.",
        "arguments": [
            {
                "type": "int",
                "name": "$category_id",
                "description": "ID of the deleted category."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to delete the category."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_wp_newCategory",
        "description": "Fires after a new category has been successfully created via XML-RPC.",
        "arguments": [
            {
                "type": "int",
                "name": "$cat_id",
                "description": "ID of the new category."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of new category arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call_success_wp_deletePage",
        "description": "Fires after a page has been successfully deleted via XML-RPC.",
        "arguments": [
            {
                "type": "int",
                "name": "$page_id",
                "description": "ID of the deleted page."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments to delete the page."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_user_fields",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_user_fields",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_user_fields",
        "description": "Filters the default user query fields used by the given XML-RPC method.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "User query fields for given method. Default 'all'."
            },
            {
                "type": "string",
                "name": "$method",
                "description": "The method name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_taxonomy_fields",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_taxonomy_fields",
        "description": "Filters the taxonomy query fields used by the given XML-RPC method.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "An array of taxonomy fields to retrieve."
            },
            {
                "type": "string",
                "name": "$method",
                "description": "The method name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_post_fields",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_default_post_fields",
        "description": "Filters the list of post query fields used by the given XML-RPC method.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "Array of post fields. Default array contains 'post', 'terms', and 'custom_fields'."
            },
            {
                "type": "string",
                "name": "$method",
                "description": "Method name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_wp_insert_post_data",
        "description": "Filters post data array to be inserted via XML-RPC.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_data",
                "description": "Parsed array of post data."
            },
            {
                "type": "array",
                "name": "$content_struct",
                "description": "Post data array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "This action is documented in wp-includes\/class-wp-xmlrpc-server.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "xmlrpc_prepare_user",
        "description": "Filters XML-RPC-prepared data for the given user.",
        "arguments": [
            {
                "type": "array",
                "name": "$_user",
                "description": "An array of user data."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object."
            },
            {
                "type": "array",
                "name": "$fields",
                "description": "An array of user fields."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_prepare_comment",
        "description": "Filters XML-RPC-prepared data for the given comment.",
        "arguments": [
            {
                "type": "array",
                "name": "$_comment",
                "description": "An array of prepared comment data."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_prepare_page",
        "description": "Filters XML-RPC-prepared data for the given page.",
        "arguments": [
            {
                "type": "array",
                "name": "$_page",
                "description": "An array of page data."
            },
            {
                "type": "\\WP_Post",
                "name": "$page",
                "description": "Page object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_prepare_media_item",
        "description": "Filters XML-RPC-prepared data for the given media item.",
        "arguments": [
            {
                "type": "array",
                "name": "$_media_item",
                "description": "An array of media item data."
            },
            {
                "type": "object",
                "name": "$media_item",
                "description": "Media item object."
            },
            {
                "type": "string",
                "name": "$thumbnail_size",
                "description": "Image size."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_prepare_post_type",
        "description": "Filters XML-RPC-prepared date for the given post type.",
        "arguments": [
            {
                "type": "array",
                "name": "$_post_type",
                "description": "An array of post type data."
            },
            {
                "type": "\\WP_Post_Type",
                "name": "$post_type",
                "description": "Post type object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_prepare_post",
        "description": "Filters XML-RPC-prepared date for the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$_post",
                "description": "An array of modified post data."
            },
            {
                "type": "array",
                "name": "$post",
                "description": "An array of post data."
            },
            {
                "type": "array",
                "name": "$fields",
                "description": "An array of post fields."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_prepare_term",
        "description": "Filters XML-RPC-prepared data for the given term.",
        "arguments": [
            {
                "type": "array",
                "name": "$_term",
                "description": "An array of term data."
            },
            {
                "type": "array|object",
                "name": "$term",
                "description": "Term object or array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_prepare_taxonomy",
        "description": "Filters XML-RPC-prepared data for the given taxonomy.",
        "arguments": [
            {
                "type": "array",
                "name": "$_taxonomy",
                "description": "An array of taxonomy data."
            },
            {
                "type": "object",
                "name": "$taxonomy",
                "description": "Taxonomy object."
            },
            {
                "type": "array",
                "name": "$fields",
                "description": "The subset of taxonomy fields to return."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_call",
        "description": "Fires after the XML-RPC user has been authenticated but before the rest of the method logic begins.",
        "arguments": [
            {
                "type": "string",
                "name": "$name",
                "description": "The method name."
            }
        ],
        "type": "action"
    },
    {
        "text": "xmlrpc_blog_options",
        "description": "Filters the XML-RPC blog options property.",
        "arguments": [
            {
                "type": "array",
                "name": "$blog_options",
                "description": "An array of XML-RPC blog options."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_option_enable_xmlrpc",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "option_enable_xmlrpc",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "xmlrpc_enabled",
        "description": "Filters whether XML-RPC methods requiring authentication are enabled.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enabled",
                "description": "Whether XML-RPC is enabled. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_login_error",
        "description": "Filters the XML-RPC user login error message.",
        "arguments": [
            {
                "type": "string",
                "name": "$error",
                "description": "The XML-RPC error message."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "xmlrpc_methods",
        "description": "Filters the methods exposed by the XML-RPC server.",
        "arguments": [
            {
                "type": "array",
                "name": "$methods",
                "description": "An array of XML-RPC methods."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_form_callback",
        "description": "Filters the widget instance's settings before displaying the control form.",
        "arguments": [
            {
                "type": "array",
                "name": "$instance",
                "description": "The current widget instance's settings."
            },
            {
                "type": "\\WP_Widget",
                "name": "$this",
                "description": "The current widget instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "in_widget_form",
        "description": "Fires at the end of the widget control form.",
        "arguments": [
            {
                "type": "\\WP_Widget",
                "name": "$this",
                "description": "The widget instance, passed by reference."
            },
            {
                "type": "null",
                "name": "$return",
                "description": "Return null if new fields are added."
            },
            {
                "type": "array",
                "name": "$instance",
                "description": "An array of the widget's settings."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "widget_update_callback",
        "description": "Filters a widget's settings before saving.",
        "arguments": [
            {
                "type": "array",
                "name": "$instance",
                "description": "The current widget instance's settings."
            },
            {
                "type": "array",
                "name": "$new_instance",
                "description": "Array of new widget settings."
            },
            {
                "type": "array",
                "name": "$old_instance",
                "description": "Array of old widget settings."
            },
            {
                "type": "\\WP_Widget",
                "name": "$this",
                "description": "The current widget instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "widget_display_callback",
        "description": "Filters the settings for a particular widget instance.",
        "arguments": [
            {
                "type": "array",
                "name": "$instance",
                "description": "The current widget instance's settings."
            },
            {
                "type": "\\WP_Widget",
                "name": "$this",
                "description": "The current widget instance."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of default widget arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_has_cap",
        "description": "Dynamically filter a user's capabilities.",
        "arguments": [
            {
                "type": "array",
                "name": "$allcaps",
                "description": "An array of all the user's capabilities."
            },
            {
                "type": "array",
                "name": "$caps",
                "description": "Actual capabilities for meta capability."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Optional parameters passed to has_cap(), typically object ID."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "The user object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set_user_role",
        "description": "Fires after the user's role has changed.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            },
            {
                "type": "string",
                "name": "$role",
                "description": "The new role."
            },
            {
                "type": "array",
                "name": "$old_roles",
                "description": "An array of the user's previous roles."
            }
        ],
        "type": "action"
    },
    {
        "text": "remove_user_role",
        "description": "Fires immediately after a role as been removed from a user.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            },
            {
                "type": "string",
                "name": "$role",
                "description": "The removed role."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_user_role",
        "description": "Fires immediately after the user has been given a new role.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            },
            {
                "type": "string",
                "name": "$role",
                "description": "The new role."
            }
        ],
        "type": "action"
    },
    {
        "text": "found_users_query",
        "description": "Filters SELECT FOUND_ROWS() query for the current WP_User_Query instance.",
        "arguments": [
            {
                "type": "string",
                "name": "$sql",
                "description": "The SELECT FOUND_ROWS() query for the current WP_User_Query."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_users",
        "description": "Fires before the WP_User_Query has been parsed.",
        "arguments": [
            {
                "type": "\\WP_User_Query",
                "name": "$this",
                "description": "The current WP_User_Query instance,                            passed by reference."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_search_columns",
        "description": "Filters the columns to search in a WP_User_Query search.",
        "arguments": [
            {
                "type": "array",
                "name": "$search_columns",
                "description": "Array of column names to be searched."
            },
            {
                "type": "string",
                "name": "$search",
                "description": "Text being searched."
            },
            {
                "type": "\\WP_User_Query",
                "name": "$this",
                "description": "The current WP_User_Query instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_query",
        "description": "Fires after the WP_User_Query has been parsed, and before the query is executed.",
        "arguments": [
            {
                "type": "\\WP_User_Query",
                "name": "$this",
                "description": "The current WP_User_Query instance,                            passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "site_allowed_themes",
        "description": "Filters the array of themes allowed on the site.",
        "arguments": [
            {
                "type": "array",
                "name": "$allowed_themes",
                "description": "An array of theme stylesheet names."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "ID of the site. Defaults to current site."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_allowed_themes",
        "description": "This filter is documented in wp-includes\/class-wp-theme.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "allowed_themes",
        "description": "Filters the array of themes allowed on the network.",
        "arguments": [
            {
                "type": "array",
                "name": "$allowed_themes",
                "description": "An array of theme stylesheet names."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_allowed_themes",
        "description": "Filters the array of themes allowed on the network.",
        "arguments": [
            {
                "type": "array",
                "name": "$allowed_themes",
                "description": "An array of theme stylesheet names."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "ID of the site."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_page_templates",
        "description": "Filters list of page templates for a theme.",
        "arguments": [
            {
                "type": "array",
                "name": "$page_templates",
                "description": "Array of page templates. Keys are filenames,                                     values are translated names."
            },
            {
                "type": "\\WP_Theme",
                "name": "$this",
                "description": "The theme object."
            },
            {
                "type": "\\WP_Post|null",
                "name": "$post",
                "description": "The post being edited, provided for context, or null."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_cache_themes_persistently",
        "description": "This action is documented in wp-includes\/theme.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "process_text_diff_html",
        "description": "This filter is documented in wp-includes\/wp-diff.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "process_text_diff_html",
        "description": "This filter is documented in wp-includes\/wp-diff.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "process_text_diff_html",
        "description": "Contextually filters a diffed line.",
        "arguments": [
            {
                "type": "String",
                "name": "$processed_line",
                "description": "The processed diffed line."
            },
            {
                "type": "String",
                "name": "$line",
                "description": "The unprocessed diffed line."
            },
            {
                "type": "string",
                "name": "",
                "description": "null            The line context. Values are 'added', 'deleted' or 'unchanged'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_terms_orderby",
        "description": "Filters the ORDERBY clause of the terms query.",
        "arguments": [
            {
                "type": "string",
                "name": "$orderby",
                "description": "<code>ORDERBY<\/code> clause of the terms query."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of terms query arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_terms",
        "description": "Fires before terms are retrieved.",
        "arguments": [
            {
                "type": "\\WP_Term_Query",
                "name": "$this",
                "description": "Current instance of WP_Term_Query."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_terms_args",
        "description": "Filters the terms query arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of get_terms() arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "list_terms_exclusions",
        "description": "Filters the terms to exclude from the terms query.",
        "arguments": [
            {
                "type": "string",
                "name": "$exclusions",
                "description": "<code>NOT IN<\/code> clause of the terms query."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of terms query arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_terms_fields",
        "description": "Filters the fields to select in the terms query.",
        "arguments": [
            {
                "type": "array",
                "name": "$selects",
                "description": "An array of fields to select for the terms query."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of term query arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "terms_clauses",
        "description": "Filters the terms query SQL clauses.",
        "arguments": [
            {
                "type": "array",
                "name": "$pieces",
                "description": "Terms query SQL clauses."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of terms query arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_terms_defaults",
        "description": "Filters the terms query default arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$defaults",
                "description": "An array of default get_terms() arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_terms_args",
        "description": "Filters the terms query arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of get_terms() arguments."
            },
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of taxonomies."
            }
        ],
        "type": "filter"
    },
    {
        "text": "parse_term_query",
        "description": "Fires after term query vars have been parsed.",
        "arguments": [
            {
                "type": "\\WP_Term_Query",
                "name": "$this",
                "description": "Current instance of WP_Term_Query."
            }
        ],
        "type": "action"
    },
    {
        "text": "site_details",
        "description": "Filters a site's extended properties.",
        "arguments": [
            {
                "type": "\\stdClass",
                "name": "$details",
                "description": "The site details."
            }
        ],
        "type": "filter"
    },
    {
        "text": "found_sites_query",
        "description": "Filters the query used to retrieve found site count.",
        "arguments": [
            {
                "type": "string",
                "name": "$found_sites_query",
                "description": "SQL query. Default 'SELECT FOUND_ROWS()'."
            },
            {
                "type": "\\WP_Site_Query",
                "name": "$site_query",
                "description": "The <code>WP_Site_Query<\/code> instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_search_columns",
        "description": "Filters the columns to search in a WP_Site_Query search.",
        "arguments": [
            {
                "type": "array",
                "name": "$search_columns",
                "description": "Array of column names to be searched."
            },
            {
                "type": "string",
                "name": "$search",
                "description": "Text being searched."
            },
            {
                "type": "\\WP_Site_Query",
                "name": "$this",
                "description": "The current WP_Site_Query instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sites_clauses",
        "description": "Filters the site query clauses.",
        "arguments": [
            {
                "type": "array",
                "name": "$pieces",
                "description": "A compacted array of site query clauses."
            },
            {
                "type": "\\WP_Site_Query",
                "name": "",
                "description": "&amp;$this Current instance of WP_Site_Query, passed by reference."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "pre_get_sites",
        "description": "Fires before sites are retrieved.",
        "arguments": [
            {
                "type": "\\WP_Site_Query",
                "name": "",
                "description": "&amp;$this Current instance of WP_Site_Query, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "the_sites",
        "description": "Filters the site query results.",
        "arguments": [
            {
                "type": "array",
                "name": "$results",
                "description": "An array of sites."
            },
            {
                "type": "\\WP_Site_Query",
                "name": "",
                "description": "&amp;$this   Current instance of WP_Site_Query, passed by reference."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "parse_site_query",
        "description": "Fires after the site query vars have been parsed.",
        "arguments": [
            {
                "type": "\\WP_Site_Query",
                "name": "",
                "description": "&amp;$this The WP_Site_Query instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "session_token_manager",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "attach_session_information",
        "description": "Filters the information attached to the newly created session.",
        "arguments": [
            {
                "type": "array",
                "name": "$session",
                "description": "Array of extra data."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "session_token_manager",
        "description": "Filters the session token manager used.",
        "arguments": [
            {
                "type": "string",
                "name": "$session",
                "description": "Name of class to use as the manager.                        Default 'WP_User_Meta_Session_Tokens'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "role_has_cap",
        "description": "Filters which capabilities a role has.",
        "arguments": [
            {
                "type": "array",
                "name": "$capabilities",
                "description": "Array of role capabilities."
            },
            {
                "type": "string",
                "name": "$cap",
                "description": "Capability name."
            },
            {
                "type": "string",
                "name": "$name",
                "description": "Role name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "permalink_structure_changed",
        "description": "Fires after the permalink structure is updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$old_permalink_structure",
                "description": "The previous permalink structure."
            },
            {
                "type": "string",
                "name": "$permalink_structure",
                "description": "The new permalink structure."
            }
        ],
        "type": "action"
    },
    {
        "text": "flush_rewrite_rules_hard",
        "description": "Filters whether a \"hard\" rewrite rule flush should be performed when requested.",
        "arguments": [
            {
                "type": "bool",
                "name": "$hard",
                "description": "Whether to flush rewrite rules &quot;hard&quot;. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "iis7_url_rewrite_rules",
        "description": "Filters the list of rewrite rules formatted for output to a web.config.",
        "arguments": [
            {
                "type": "string",
                "name": "$rules",
                "description": "Rewrite rules formatted for IIS web.config."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mod_rewrite_rules",
        "description": "Filters the list of rewrite rules formatted for output to an .htaccess file.",
        "arguments": [
            {
                "type": "string",
                "name": "$rules",
                "description": "mod_rewrite Rewrite rules formatted for .htaccess."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rewrite_rules",
        "description": "Filters the list of rewrite rules formatted for output to an .htaccess file.",
        "arguments": [
            {
                "type": "string",
                "name": "$rules",
                "description": "mod_rewrite Rewrite rules formatted for .htaccess."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_rewrite_rules",
        "description": "Filters rewrite rules used for \"post\" archives.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_rewrite",
                "description": "The rewrite rules for posts."
            }
        ],
        "type": "filter"
    },
    {
        "text": "date_rewrite_rules",
        "description": "Filters rewrite rules used for date archives.",
        "arguments": [
            {
                "type": "array",
                "name": "$date_rewrite",
                "description": "The rewrite rules for date archives."
            }
        ],
        "type": "filter"
    },
    {
        "text": "root_rewrite_rules",
        "description": "Filters rewrite rules used for root-level archives.",
        "arguments": [
            {
                "type": "array",
                "name": "$root_rewrite",
                "description": "The root-level rewrite rules."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_rewrite_rules",
        "description": "Filters rewrite rules used for comment feed archives.",
        "arguments": [
            {
                "type": "array",
                "name": "$comments_rewrite",
                "description": "The rewrite rules for the site-wide comments feeds."
            }
        ],
        "type": "filter"
    },
    {
        "text": "search_rewrite_rules",
        "description": "Filters rewrite rules used for search archives.",
        "arguments": [
            {
                "type": "array",
                "name": "$search_rewrite",
                "description": "The rewrite rules for search queries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "author_rewrite_rules",
        "description": "Filters rewrite rules used for author archives.",
        "arguments": [
            {
                "type": "array",
                "name": "$author_rewrite",
                "description": "The rewrite rules for author archives."
            }
        ],
        "type": "filter"
    },
    {
        "text": "page_rewrite_rules",
        "description": "Filters rewrite rules used for \"page\" post type archives.",
        "arguments": [
            {
                "type": "array",
                "name": "$page_rewrite",
                "description": "The rewrite rules for the &quot;page&quot; post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$permastructname}_rewrite_rules",
        "description": "Filters rewrite rules used for individual permastructs.",
        "arguments": [
            {
                "type": "array",
                "name": "$rules",
                "description": "The rewrite rules generated for the current permastruct."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tag_rewrite_rules",
        "description": "Filters rewrite rules used specifically for Tags.",
        "arguments": [
            {
                "type": "array",
                "name": "$rules",
                "description": "The rewrite rules generated for tags."
            }
        ],
        "type": "filter"
    },
    {
        "text": "generate_rewrite_rules",
        "description": "Fires after the rewrite rules are generated.",
        "arguments": [
            {
                "type": "\\WP_Rewrite",
                "name": "$this",
                "description": "Current WP_Rewrite instance, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "rewrite_rules_array",
        "description": "Filters the full set of generated rewrite rules.",
        "arguments": [
            {
                "type": "array",
                "name": "$this->rules",
                "description": "The compiled array of rewrite rules."
            }
        ],
        "type": "filter"
    },
    {
        "text": "content_pagination",
        "description": "Filters the \"pages\" derived from splitting the post content.",
        "arguments": [
            {
                "type": "array",
                "name": "$pages",
                "description": "Array of &quot;pages&quot; derived from the post content.                       of <code>&lt;!-- nextpage --&gt;<\/code> tags.."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Current post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_post",
        "description": "Fires once the post data has been setup.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "",
                "description": "&amp;$post The Post object (passed by reference)."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The current Query object (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "comment_loop_start",
        "description": "Fires once the comment loop is started.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "loop_end",
        "description": "Fires once the loop has ended.",
        "arguments": [
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "loop_start",
        "description": "Fires once the loop is started.",
        "arguments": [
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "found_posts_query",
        "description": "Filters the query to run for retrieving the found posts.",
        "arguments": [
            {
                "type": "string",
                "name": "$found_posts",
                "description": "The query to run to find the found posts."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this       The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "found_posts",
        "description": "Filters the number of found posts for the query.",
        "arguments": [
            {
                "type": "int",
                "name": "$found_posts",
                "description": "The number of posts found."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this       The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "pre_get_posts",
        "description": "Fires after the query variable object is created, but before the actual query is run.",
        "arguments": [
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "posts_search",
        "description": "Filters the search SQL that is used in the WHERE clause of WP_Query.",
        "arguments": [
            {
                "type": "string",
                "name": "$search",
                "description": "Search SQL for WHERE clause."
            },
            {
                "type": "\\WP_Query",
                "name": "$this",
                "description": "The current WP_Query object."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_search_orderby",
        "description": "Filters the ORDER BY used when ordering search results.",
        "arguments": [
            {
                "type": "string",
                "name": "$search_orderby",
                "description": "The ORDER BY clause."
            },
            {
                "type": "\\WP_Query",
                "name": "$this",
                "description": "The current WP_Query instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "posts_where",
        "description": "Filters the WHERE clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$where",
                "description": "The WHERE clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_join",
        "description": "Filters the JOIN clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$where",
                "description": "The JOIN clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_join",
        "description": "Filters the JOIN clause of the comments feed query before sending.",
        "arguments": [
            {
                "type": "string",
                "name": "$cjoin",
                "description": "The JOIN clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_where",
        "description": "Filters the WHERE clause of the comments feed query before sending.",
        "arguments": [
            {
                "type": "string",
                "name": "$cwhere",
                "description": "The WHERE clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this  The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_groupby",
        "description": "Filters the GROUP BY clause of the comments feed query before sending.",
        "arguments": [
            {
                "type": "string",
                "name": "$cgroupby",
                "description": "The GROUP BY clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this    The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_orderby",
        "description": "Filters the ORDER BY clause of the comments feed query before sending.",
        "arguments": [
            {
                "type": "string",
                "name": "$corderby",
                "description": "The ORDER BY clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this    The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_limits",
        "description": "Filters the LIMIT clause of the comments feed query before sending.",
        "arguments": [
            {
                "type": "string",
                "name": "$climits",
                "description": "The JOIN clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this   The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_where_paged",
        "description": "Filters the WHERE clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$where",
                "description": "The WHERE clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_groupby",
        "description": "Filters the GROUP BY clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$groupby",
                "description": "The GROUP BY clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this   The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_join_paged",
        "description": "Filters the JOIN clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$join",
                "description": "The JOIN clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_orderby",
        "description": "Filters the ORDER BY clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$orderby",
                "description": "The ORDER BY clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this   The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_distinct",
        "description": "Filters the DISTINCT clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$distinct",
                "description": "The DISTINCT clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this    The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "post_limits",
        "description": "Filters the LIMIT clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$limits",
                "description": "The LIMIT clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this  The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_fields",
        "description": "Filters the SELECT clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$fields",
                "description": "The SELECT clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this  The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_clauses",
        "description": "Filters all query clauses at once, for convenience.",
        "arguments": [
            {
                "type": "array",
                "name": "$clauses",
                "description": "The list of clauses for the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this   The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_selection",
        "description": "Fires to announce the query's current selection parameters.",
        "arguments": [
            {
                "type": "string",
                "name": "$selection",
                "description": "The assembled selection query."
            }
        ],
        "type": "action"
    },
    {
        "text": "posts_where_request",
        "description": "Filters the WHERE clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$where",
                "description": "The WHERE clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_groupby_request",
        "description": "Filters the GROUP BY clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$groupby",
                "description": "The GROUP BY clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this   The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_join_request",
        "description": "Filters the JOIN clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$join",
                "description": "The JOIN clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_orderby_request",
        "description": "Filters the ORDER BY clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$orderby",
                "description": "The ORDER BY clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this   The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_distinct_request",
        "description": "Filters the DISTINCT clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$distinct",
                "description": "The DISTINCT clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this    The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_fields_request",
        "description": "Filters the SELECT clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$fields",
                "description": "The SELECT clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this  The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "post_limits_request",
        "description": "Filters the LIMIT clause of the query.",
        "arguments": [
            {
                "type": "string",
                "name": "$limits",
                "description": "The LIMIT clause of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this  The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_clauses_request",
        "description": "Filters all query clauses at once, for convenience.",
        "arguments": [
            {
                "type": "array",
                "name": "$pieces",
                "description": "The pieces of the query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this  The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_request",
        "description": "Filters the completed SQL query before sending.",
        "arguments": [
            {
                "type": "string",
                "name": "$request",
                "description": "The complete SQL query."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this   The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "posts_pre_query",
        "description": "Filters the posts array before the query takes place.",
        "arguments": [
            {
                "type": "array|null",
                "name": "$posts",
                "description": "Return an array of post data to short-circuit WP's query,                          or null to allow WP to run its normal queries."
            },
            {
                "type": "\\WP_Query",
                "name": "$this",
                "description": "The WP_Query instance, passed by reference."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "split_the_query",
        "description": "Filters whether to split the query.",
        "arguments": [
            {
                "type": "bool",
                "name": "$split_the_query",
                "description": "Whether or not to split the query."
            },
            {
                "type": "\\WP_Query",
                "name": "$this",
                "description": "The WP_Query instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "posts_request_ids",
        "description": "Filters the Post IDs SQL request before sending.",
        "arguments": [
            {
                "type": "string",
                "name": "$request",
                "description": "The post ID request."
            },
            {
                "type": "\\WP_Query",
                "name": "$this",
                "description": "The WP_Query instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "posts_results",
        "description": "Filters the raw post results array, prior to status checks.",
        "arguments": [
            {
                "type": "array",
                "name": "$posts",
                "description": "The post results array."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_join",
        "description": "This filter is documented in wp-includes\/query.php",
        "arguments": [],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_where",
        "description": "This filter is documented in wp-includes\/query.php",
        "arguments": [],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_groupby",
        "description": "This filter is documented in wp-includes\/query.php",
        "arguments": [],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_orderby",
        "description": "This filter is documented in wp-includes\/query.php",
        "arguments": [],
        "type": "filter_reference"
    },
    {
        "text": "comment_feed_limits",
        "description": "This filter is documented in wp-includes\/query.php",
        "arguments": [],
        "type": "filter_reference"
    },
    {
        "text": "the_preview",
        "description": "Filters the single post for preview mode.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post_preview",
                "description": "The Post object."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this         The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "the_posts",
        "description": "Filters the array of retrieved posts after they've been fetched and internally processed.",
        "arguments": [
            {
                "type": "array",
                "name": "$posts",
                "description": "The array of retrieved posts."
            },
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "wp_search_stopwords",
        "description": "Filters stopwords used when parsing search terms.",
        "arguments": [
            {
                "type": "array",
                "name": "$stopwords",
                "description": "Stopwords."
            }
        ],
        "type": "filter"
    },
    {
        "text": "parse_tax_query",
        "description": "Fires after taxonomy-related query vars have been parsed.",
        "arguments": [
            {
                "type": "\\WP_Query",
                "name": "$this",
                "description": "The WP_Query instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "parse_query",
        "description": "Fires after the main query vars have been parsed.",
        "arguments": [
            {
                "type": "\\WP_Query",
                "name": "",
                "description": "&amp;$this The WP_Query instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "register_post_type_args",
        "description": "Filters the arguments for registering a post type.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Array of arguments for registering a post type."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type key."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_request_post_id",
        "description": "Filters the determined post ID.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The requested URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_default_width",
        "description": "Filters the maxwidth oEmbed parameter.",
        "arguments": [
            {
                "type": "int",
                "name": "$maxwidth",
                "description": "Maximum allowed width. Default 600."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_by_path_segments_count",
        "description": "Filters the number of path segments to consider when searching for a site.",
        "arguments": [
            {
                "type": "int|null",
                "name": "$segments",
                "description": "The number of path segments to consider. WordPress by default looks at                           one path segment. The function default of null only makes sense when you                           know the requested path should match a network."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path, in full."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_get_network_by_path",
        "description": "Determine a network by its domain and path.",
        "arguments": [
            {
                "type": "null|bool|object",
                "name": "$network",
                "description": "Network value to return by path."
            },
            {
                "type": "string",
                "name": "$domain",
                "description": "The requested domain."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "The requested path, in full."
            },
            {
                "type": "int|null",
                "name": "$segments",
                "description": "The suggested number of paths to consult.                                   Default null, meaning the entire path was to be consulted."
            },
            {
                "type": "array",
                "name": "$paths",
                "description": "The paths to search for, based on $path and $segments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "found_networks_query",
        "description": "Filters the query used to retrieve found network count.",
        "arguments": [
            {
                "type": "string",
                "name": "$found_networks_query",
                "description": "SQL query. Default 'SELECT FOUND_ROWS()'."
            },
            {
                "type": "\\WP_Network_Query",
                "name": "$network_query",
                "description": "The <code>WP_Network_Query<\/code> instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "networks_clauses",
        "description": "Filters the network query clauses.",
        "arguments": [
            {
                "type": "array",
                "name": "$pieces",
                "description": "A compacted array of network query clauses."
            },
            {
                "type": "\\WP_Network_Query",
                "name": "",
                "description": "&amp;$this  Current instance of WP_Network_Query, passed by reference."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "pre_get_networks",
        "description": "Fires before networks are retrieved.",
        "arguments": [
            {
                "type": "\\WP_Network_Query",
                "name": "",
                "description": "&amp;$this Current instance of WP_Network_Query, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "the_networks",
        "description": "Filters the network query results.",
        "arguments": [
            {
                "type": "array",
                "name": "$results",
                "description": "An array of networks."
            },
            {
                "type": "\\WP_Network_Query",
                "name": "",
                "description": "&amp;$this    Current instance of WP_Network_Query, passed by reference."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "parse_network_query",
        "description": "Fires after the network query vars have been parsed.",
        "arguments": [
            {
                "type": "\\WP_Network_Query",
                "name": "",
                "description": "&amp;$this The WP_Network_Query instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "metadata_lazyloader_queued_objects",
        "description": "Fires after objects are added to the metadata lazy-load queue.",
        "arguments": [
            {
                "type": "array",
                "name": "$object_ids",
                "description": "Object IDs."
            },
            {
                "type": "string",
                "name": "$object_type",
                "description": "Type of object being queued."
            },
            {
                "type": "\\WP_Metadata_Lazyloader",
                "name": "$lazyloader",
                "description": "The lazy-loader object."
            }
        ],
        "type": "action"
    },
    {
        "text": "meta_query_find_compatible_table_alias",
        "description": "Filters the table alias identified as compatible with the current clause.",
        "arguments": [
            {
                "type": "string|bool",
                "name": "$alias",
                "description": "Table alias, or false if none was found."
            },
            {
                "type": "array",
                "name": "$clause",
                "description": "First-order query clause."
            },
            {
                "type": "array",
                "name": "$parent_query",
                "description": "Parent of $clause."
            },
            {
                "type": "object",
                "name": "$this",
                "description": "WP_Meta_Query object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_meta_sql",
        "description": "Filters the meta query's generated SQL.",
        "arguments": [
            {
                "type": "array",
                "name": "$clauses",
                "description": "Array containing the query's JOIN and WHERE clauses."
            },
            {
                "type": "array",
                "name": "$queries",
                "description": "Array of meta queries."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Type of meta."
            },
            {
                "type": "string",
                "name": "$primary_table",
                "description": "Primary table."
            },
            {
                "type": "string",
                "name": "$primary_id_column",
                "description": "Primary column ID."
            },
            {
                "type": "object",
                "name": "$context",
                "description": "The main query object."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "image_editor_default_mime_type",
        "description": "Filters default mime type prior to getting the file extension.",
        "arguments": [
            {
                "type": "string",
                "name": "$mime_type",
                "description": "Mime type string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_editor_set_quality",
        "description": "Filters the default image compression quality setting.",
        "arguments": [
            {
                "type": "int",
                "name": "$quality",
                "description": "Quality level between 1 (low) and 100 (high)."
            },
            {
                "type": "string",
                "name": "$mime_type",
                "description": "Image mime type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "jpeg_quality",
        "description": "Filters the JPEG compression quality for backward-compatibility.",
        "arguments": [
            {
                "type": "int",
                "name": "$quality",
                "description": "Quality level between 0 (low) and 100 (high) of the JPEG."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context of the filter."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_make_intermediate_size",
        "description": "This filter is documented in wp-includes\/class-wp-image-editor-gd.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "image_strip_meta",
        "description": "Filters whether to strip metadata from images when they're resized.",
        "arguments": [
            {
                "type": "bool",
                "name": "$strip_meta",
                "description": "Whether to strip image metadata during resizing. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_make_intermediate_size",
        "description": "Filters the name of the saved image file.",
        "arguments": [
            {
                "type": "string",
                "name": "$filename",
                "description": "Name of the file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "use_streams_transport",
        "description": "Filters whether streams can be used as a transport for retrieving a URL.",
        "arguments": [
            {
                "type": "bool",
                "name": "$use_class",
                "description": "Whether the class can be used. Default true."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Request arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "https_local_ssl_verify",
        "description": "Filters whether SSL should be verified for local requests.",
        "arguments": [
            {
                "type": "bool",
                "name": "$ssl_verify",
                "description": "Whether to verify the SSL connection. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "https_ssl_verify",
        "description": "Filters whether SSL should be verified for non-local requests.",
        "arguments": [
            {
                "type": "bool",
                "name": "$ssl_verify",
                "description": "Whether to verify the SSL connection. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_http_send_through_proxy",
        "description": "Filters whether to preempt sending the request through the proxy server.",
        "arguments": [
            {
                "type": "null",
                "name": "$override",
                "description": "Whether to override the request result. Default null."
            },
            {
                "type": "string",
                "name": "$uri",
                "description": "URL to check."
            },
            {
                "type": "array",
                "name": "$check",
                "description": "Associative array result of parsing the URI."
            },
            {
                "type": "array",
                "name": "$home",
                "description": "Associative array result of parsing the site URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_http_ixr_client_headers",
        "description": "Filters the headers collection to be sent to the XML-RPC server.",
        "arguments": [
            {
                "type": "array",
                "name": "$headers",
                "description": "Array of headers to be sent."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_http_accept_encoding",
        "description": "Filters the allowed encoding types.",
        "arguments": [
            {
                "type": "array",
                "name": "$type",
                "description": "Encoding types allowed. Accepts 'gzinflate',                     'gzuncompress', 'gzdecode'."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "URL of the HTTP request."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "HTTP request arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "use_curl_transport",
        "description": "Filters whether cURL can be used as a transport for retrieving a URL.",
        "arguments": [
            {
                "type": "bool",
                "name": "$use_class",
                "description": "Whether the class can be used. Default true."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of request arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "https_local_ssl_verify",
        "description": "This filter is documented in wp-includes\/class-wp-http-streams.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "https_ssl_verify",
        "description": "This filter is documented in wp-includes\/class-wp-http-streams.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "http_api_curl",
        "description": "Fires before the cURL request is executed.",
        "arguments": [
            {
                "type": "resource",
                "name": "",
                "description": "&amp;$handle The cURL handle returned by curl_init()."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "The HTTP request arguments."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The request URL."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "wp_http_cookie_value",
        "description": "Filters the header-encoded cookie value.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The cookie value."
            },
            {
                "type": "string",
                "name": "$name",
                "description": "The cookie name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_feed_cache_transient_lifetime",
        "description": "Filters the transient lifetime of the feed cache.",
        "arguments": [
            {
                "type": "int",
                "name": "$lifetime",
                "description": "Cache duration in seconds. Default is 43200 seconds (12 hours)."
            },
            {
                "type": "string",
                "name": "$filename",
                "description": "Unique identifier for the cache object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_maybe_make_link",
        "description": "Filters the returned, maybe-linked embed URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "The linked or original URL."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The original URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_cache_oembed_types",
        "description": "Filters the array of post types to cache oEmbed results for.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_types",
                "description": "Array of post types to cache oEmbed results for. Defaults to post types with <code>show_ui<\/code> set to true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_handler_html",
        "description": "Filters the returned embed handler.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$return",
                "description": "The shortcode callback function to call."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The attempted embed URL."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of shortcode attributes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_ttl",
        "description": "Filters the oEmbed TTL value (time to live).",
        "arguments": [
            {
                "type": "int",
                "name": "$time",
                "description": "Time to live (in seconds)."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The attempted embed URL."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of shortcode attributes."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_oembed_html",
        "description": "Filters the cached oEmbed HTML.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$cache",
                "description": "The cached HTML result, stored in post meta."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The attempted embed URL."
            },
            {
                "type": "array",
                "name": "$attr",
                "description": "An array of shortcode attributes."
            },
            {
                "type": "int",
                "name": "$post_ID",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_oembed_discover",
        "description": "Filters whether to inspect the given URL for discoverable link tags.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enable",
                "description": "Whether to enable <code>&lt;link&gt;<\/code> tag discovery. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "embed_oembed_html",
        "description": "This filter is documented in wp-includes\/class-wp-embed.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_link_query_args",
        "description": "Filters the link query arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$query",
                "description": "An array of WP_Query arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_link_query",
        "description": "Filters the link query results.",
        "arguments": [
            {
                "type": "array",
                "name": "$results",
                "description": "{     An associative array of query results.     @type array {         @type int    $ID        Post ID.         @type string $title     The trimmed, escaped post title.         @type string $permalink Post permalink.         @type string $info      A 'Y\/m\/d'-formatted date for 'post' post type,                                 the 'singular_name' post type label otherwise.     } }"
            },
            {
                "type": "array",
                "name": "$query",
                "description": "An array of WP_Query arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "before_wp_tiny_mce",
        "description": "Fires immediately before the TinyMCE settings are printed.",
        "arguments": [
            {
                "type": "array",
                "name": "$mce_settings",
                "description": "TinyMCE settings array."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_tiny_mce_init",
        "description": "Fires after tinymce.js is loaded, but before any TinyMCE editor instances are created.",
        "arguments": [
            {
                "type": "array",
                "name": "$mce_settings",
                "description": "TinyMCE settings array."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_wp_tiny_mce",
        "description": "Fires after any core TinyMCE editor instances are created.",
        "arguments": [
            {
                "type": "array",
                "name": "$mce_settings",
                "description": "TinyMCE settings array."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_mce_translation",
        "description": "Filters translated strings prepared for TinyMCE.",
        "arguments": [
            {
                "type": "array",
                "name": "$mce_translation",
                "description": "Key\/value pairs of strings."
            },
            {
                "type": "string",
                "name": "$mce_locale",
                "description": "Locale."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_enqueue_editor",
        "description": "Fires when scripts and styles are enqueued for the editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$to_load",
                "description": "An array containing boolean values whether TinyMCE                       and Quicktags are being loaded."
            }
        ],
        "type": "action"
    },
    {
        "text": "quicktags_settings",
        "description": "Filters the Quicktags settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$qtInit",
                "description": "Quicktags settings."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "The unique editor ID, e.g. 'content'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "disable_captions",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "teeny_mce_plugins",
        "description": "Filters the list of teenyMCE plugins.",
        "arguments": [
            {
                "type": "array",
                "name": "$plugins",
                "description": "An array of teenyMCE plugins."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "Unique editor identifier, e.g. 'content'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mce_external_plugins",
        "description": "Filters the list of TinyMCE external plugins.",
        "arguments": [
            {
                "type": "array",
                "name": "$external_plugins",
                "description": "An array of external TinyMCE plugins."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tiny_mce_plugins",
        "description": "Filters the list of default TinyMCE plugins.",
        "arguments": [
            {
                "type": "array",
                "name": "$plugins",
                "description": "An array of default TinyMCE plugins."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mce_external_languages",
        "description": "Filters the translations loaded for external TinyMCE 3.x plugins.",
        "arguments": [
            {
                "type": "array",
                "name": "$translations",
                "description": "Translations for external TinyMCE plugins."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mce_css",
        "description": "Filters the comma-delimited list of stylesheets to load in TinyMCE.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheets",
                "description": "Comma-delimited list of stylesheets."
            }
        ],
        "type": "filter"
    },
    {
        "text": "teeny_mce_buttons",
        "description": "Filters the list of teenyMCE buttons (Text tab).",
        "arguments": [
            {
                "type": "array",
                "name": "$buttons",
                "description": "An array of teenyMCE buttons."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "Unique editor identifier, e.g. 'content'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mce_buttons",
        "description": "Filters the first-row list of TinyMCE buttons (Visual tab).",
        "arguments": [
            {
                "type": "array",
                "name": "$buttons",
                "description": "First-row list of buttons."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "Unique editor identifier, e.g. 'content'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mce_buttons_2",
        "description": "Filters the second-row list of TinyMCE buttons (Visual tab).",
        "arguments": [
            {
                "type": "array",
                "name": "$buttons",
                "description": "Second-row list of buttons."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "Unique editor identifier, e.g. 'content'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mce_buttons_3",
        "description": "Filters the third-row list of TinyMCE buttons (Visual tab).",
        "arguments": [
            {
                "type": "array",
                "name": "$buttons",
                "description": "Third-row list of buttons."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "Unique editor identifier, e.g. 'content'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mce_buttons_4",
        "description": "Filters the fourth-row list of TinyMCE buttons (Visual tab).",
        "arguments": [
            {
                "type": "array",
                "name": "$buttons",
                "description": "Fourth-row list of buttons."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "Unique editor identifier, e.g. 'content'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "teeny_mce_before_init",
        "description": "Filters the teenyMCE config before init.",
        "arguments": [
            {
                "type": "array",
                "name": "$mceInit",
                "description": "An array with teenyMCE config."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "Unique editor identifier, e.g. 'content'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tiny_mce_before_init",
        "description": "Filters the TinyMCE config before init.",
        "arguments": [
            {
                "type": "array",
                "name": "$mceInit",
                "description": "An array with TinyMCE config."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "Unique editor identifier, e.g. 'content'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_buttons",
        "description": "Fires after the default media button(s) are displayed.",
        "arguments": [
            {
                "type": "string",
                "name": "$editor_id",
                "description": "Unique editor identifier, e.g. 'content'."
            }
        ],
        "type": "action"
    },
    {
        "text": "the_editor",
        "description": "Filters the HTML markup output that displays the editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Editor's HTML markup."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_editor_content",
        "description": "Filters the default editor content.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Default editor content."
            },
            {
                "type": "string",
                "name": "$default_editor",
                "description": "The default editor for the current user.                               Either 'html' or 'tinymce'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "htmledit_pre",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "richedit_pre",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_editor_settings",
        "description": "Filters the wp_editor() settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$settings",
                "description": "Array of editor arguments."
            },
            {
                "type": "string",
                "name": "$editor_id",
                "description": "ID for the current editor instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "option_{$option_name}",
        "description": "This filter is documented in wp-includes\/option.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "load-widgets.php",
        "description": "This action is documented in wp-admin\/includes\/ajax-actions.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "widgets.php",
        "description": "This action is documented in wp-admin\/includes\/ajax-actions.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "sidebar_admin_setup",
        "description": "This action is documented in wp-admin\/widgets.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "widget_customizer_setting_args",
        "description": "Filters the common arguments supplied when constructing a Customizer setting.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Array of Customizer setting arguments."
            },
            {
                "type": "string",
                "name": "$id",
                "description": "Widget setting ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_print_footer_scripts-widgets.php",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_footer_scripts",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_footer-widgets.php",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_enqueue_scripts",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts-widgets.php",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_styles-widgets.php",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_styles",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "is_wide_widget_in_customizer",
        "description": "Filters whether the given widget is considered \"wide\".",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_wide",
                "description": "Whether the widget is wide, Default false."
            },
            {
                "type": "string",
                "name": "$widget_id",
                "description": "Widget ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customizer_widgets_section_args",
        "description": "Filters Customizer widget section arguments for a given sidebar.",
        "arguments": [
            {
                "type": "array",
                "name": "$section_args",
                "description": "Array of Customizer widget section arguments."
            },
            {
                "type": "string",
                "name": "$section_id",
                "description": "Customizer section ID."
            },
            {
                "type": "int|string",
                "name": "$sidebar_id",
                "description": "Sidebar ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load-widgets.php",
        "description": "This action is documented in wp-admin\/includes\/ajax-actions.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "widgets.php",
        "description": "This action is documented in wp-admin\/includes\/ajax-actions.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "sidebar_admin_setup",
        "description": "This action is documented in wp-admin\/widgets.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "customize_sanitize_js_{$this->id}",
        "description": "Filters a Customize setting value for use in JavaScript.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "The setting value."
            },
            {
                "type": "\\WP_Customize_Setting",
                "name": "$this",
                "description": "WP_Customize_Setting instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_value_{$id_base}",
        "description": "Filters a Customize setting value not handled as a theme_mod or option.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$default",
                "description": "The setting default value. Default empty."
            },
            {
                "type": "\\WP_Customize_Setting",
                "name": "$this",
                "description": "The setting instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_update_{$this->type}",
        "description": "Fires when the WP_Customize_Setting::update() method is called for settings not handled as theme_mods or options.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the setting."
            },
            {
                "type": "\\WP_Customize_Setting",
                "name": "$this",
                "description": "WP_Customize_Setting instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_validate_{$this->id}",
        "description": "Validates a Customize setting value.",
        "arguments": [
            {
                "type": "\\WP_Error",
                "name": "$validity",
                "description": "Filtered from <code>true<\/code> to <code>WP_Error<\/code> when invalid."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the setting."
            },
            {
                "type": "\\WP_Customize_Setting",
                "name": "$this",
                "description": "WP_Customize_Setting instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_sanitize_{$this->id}",
        "description": "Filters a Customize setting value in un-slashed form.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Value of the setting."
            },
            {
                "type": "\\WP_Customize_Setting",
                "name": "$this",
                "description": "WP_Customize_Setting instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_save_{$this->id_data['base']}",
        "description": "Fires when the WP_Customize_Setting::save() method is called.",
        "arguments": [
            {
                "type": "\\WP_Customize_Setting",
                "name": "$this",
                "description": "WP_Customize_Setting instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_preview_{$this->id}",
        "description": "Fires when the WP_Customize_Setting::preview() method is called for settings not handled as theme_mods or options.",
        "arguments": [
            {
                "type": "\\WP_Customize_Setting",
                "name": "$this",
                "description": "WP_Customize_Setting instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_preview_{$this->type}",
        "description": "Fires when the WP_Customize_Setting::preview() method is called for settings not handled as theme_mods or options.",
        "arguments": [
            {
                "type": "\\WP_Customize_Setting",
                "name": "$this",
                "description": "WP_Customize_Setting instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_render_section",
        "description": "Fires before rendering a Customizer section.",
        "arguments": [
            {
                "type": "\\WP_Customize_Section",
                "name": "$this",
                "description": "WP_Customize_Section instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_render_section_{$this->id}",
        "description": "Fires before rendering a specific Customizer section.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "customize_section_active",
        "description": "Filters response of WP_Customize_Section::active().",
        "arguments": [
            {
                "type": "bool",
                "name": "$active",
                "description": "Whether the Customizer section is active."
            },
            {
                "type": "\\WP_Customize_Section",
                "name": "$section",
                "description": "WP_Customize_Section instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_render_panel",
        "description": "Fires before rendering a Customizer panel.",
        "arguments": [
            {
                "type": "\\WP_Customize_Panel",
                "name": "$this",
                "description": "WP_Customize_Panel instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_render_panel_{$this->id}",
        "description": "Fires before rendering a specific Customizer panel.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "customize_panel_active",
        "description": "Filters response of WP_Customize_Panel::active().",
        "arguments": [
            {
                "type": "bool",
                "name": "$active",
                "description": "Whether the Customizer panel is active."
            },
            {
                "type": "\\WP_Customize_Panel",
                "name": "$panel",
                "description": "WP_Customize_Panel instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_nav_menu_available_item_types",
        "description": "Filters the available menu item types.",
        "arguments": [
            {
                "type": "array",
                "name": "$item_types",
                "description": "Custom menu item types."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_nav_menu_searched_items",
        "description": "Filters the available menu items during a search request.",
        "arguments": [
            {
                "type": "array",
                "name": "$items",
                "description": "The array of menu items."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Includes 'pagenum' and 's' (search) arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_nav_menu_available_items",
        "description": "Filters the available menu items.",
        "arguments": [
            {
                "type": "array",
                "name": "$items",
                "description": "The array of menu items."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The object type."
            },
            {
                "type": "string",
                "name": "$object",
                "description": "The object name."
            },
            {
                "type": "int",
                "name": "$page",
                "description": "The current page number."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_previewable_devices",
        "description": "Filters the available devices to allow previewing in the Customizer.",
        "arguments": [
            {
                "type": "array",
                "name": "$devices",
                "description": "List of devices with labels and default setting."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_allowed_urls",
        "description": "Filters the list of URLs allowed to be clicked and followed in the Customizer preview.",
        "arguments": [
            {
                "type": "array",
                "name": "$allowed_urls",
                "description": "An array of allowed URLs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_refresh_nonces",
        "description": "Filters nonces for Customizer.",
        "arguments": [
            {
                "type": "array",
                "name": "$nonces",
                "description": "Array of refreshed nonces for save and                                     preview actions."
            },
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_dynamic_setting_args",
        "description": "Filters a dynamic setting's constructor args.",
        "arguments": [
            {
                "type": "false|array",
                "name": "$setting_args",
                "description": "The arguments to the WP_Customize_Setting constructor."
            },
            {
                "type": "string",
                "name": "$setting_id",
                "description": "ID for dynamic setting, usually coming from <code>$_POST['customized']<\/code>."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_dynamic_setting_class",
        "description": "Allow non-statically created settings to be constructed with custom WP_Customize_Setting subclass.",
        "arguments": [
            {
                "type": "string",
                "name": "$setting_class",
                "description": "WP_Customize_Setting or a subclass."
            },
            {
                "type": "string",
                "name": "$setting_id",
                "description": "ID for dynamic setting, usually coming from <code>$_POST['customized']<\/code>."
            },
            {
                "type": "array",
                "name": "$setting_args",
                "description": "WP_Customize_Setting or a subclass."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_dynamic_setting_args",
        "description": "This filter is documented in wp-includes\/class-wp-customize-manager.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "customize_dynamic_setting_class",
        "description": "This filter is documented in wp-includes\/class-wp-customize-manager.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "customize_save_validation_before",
        "description": "Fires before save validation happens.",
        "arguments": [
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_save_response",
        "description": "This filter is documented in wp-includes\/class-wp-customize-manager.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "customize_save",
        "description": "Fires once the theme has switched in the Customizer, but before settings have been saved.",
        "arguments": [
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_save_after",
        "description": "Fires after Customize settings have been saved.",
        "arguments": [
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_save_response",
        "description": "Filters response data for a successful customize_save Ajax request.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "Additional information passed back to the 'saved'                                   event on <code>wp.customize<\/code>."
            },
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_preview_init",
        "description": "Fires once the Customizer preview has initialized and JavaScript settings have been printed.",
        "arguments": [
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_post_value_set_{$setting_id}",
        "description": "Announce when a specific setting's unsanitized post value has been set.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$value",
                "description": "Unsanitized setting post value."
            },
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_post_value_set",
        "description": "Announce when any setting's unsanitized post value has been set.",
        "arguments": [
            {
                "type": "string",
                "name": "$setting_id",
                "description": "Setting ID."
            },
            {
                "type": "mixed",
                "name": "$value",
                "description": "Unsanitized setting post value."
            },
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_register",
        "description": "Fires once WordPress has loaded, allowing scripts and styles to be initialized.",
        "arguments": [
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "stop_previewing_theme",
        "description": "Fires once the Customizer theme preview has stopped.",
        "arguments": [
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "start_previewing_theme",
        "description": "Fires once the Customizer theme preview has started.",
        "arguments": [
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_loaded_components",
        "description": "Filters the core Customizer components to load.",
        "arguments": [
            {
                "type": "array",
                "name": "$components",
                "description": "List of core components to load."
            },
            {
                "type": "\\WP_Customize_Manager",
                "name": "$this",
                "description": "WP_Customize_Manager instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "customize_render_control",
        "description": "Fires just before the current Customizer control is rendered.",
        "arguments": [
            {
                "type": "\\WP_Customize_Control",
                "name": "$this",
                "description": "WP_Customize_Control instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_render_control_{$this->id}",
        "description": "Fires just before a specific Customizer control is rendered.",
        "arguments": [
            {
                "type": "\\WP_Customize_Control",
                "name": "$this",
                "description": "WP_Customize_Control instance."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_control_active",
        "description": "Filters response of WP_Customize_Control::active().",
        "arguments": [
            {
                "type": "bool",
                "name": "$active",
                "description": "Whether the Customizer control is active."
            },
            {
                "type": "\\WP_Customize_Control",
                "name": "$control",
                "description": "WP_Customize_Control instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "found_comments_query",
        "description": "Filters the query used to retrieve found comment count.",
        "arguments": [
            {
                "type": "string",
                "name": "$found_comments_query",
                "description": "SQL query. Default 'SELECT FOUND_ROWS()'."
            },
            {
                "type": "\\WP_Comment_Query",
                "name": "$comment_query",
                "description": "The <code>WP_Comment_Query<\/code> instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_clauses",
        "description": "Filters the comment query clauses.",
        "arguments": [
            {
                "type": "array",
                "name": "$pieces",
                "description": "A compacted array of comment query clauses."
            },
            {
                "type": "\\WP_Comment_Query",
                "name": "",
                "description": "&amp;$this  Current instance of WP_Comment_Query, passed by reference."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "pre_get_comments",
        "description": "Fires before comments are retrieved.",
        "arguments": [
            {
                "type": "\\WP_Comment_Query",
                "name": "",
                "description": "&amp;$this Current instance of WP_Comment_Query, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "the_comments",
        "description": "Filters the comment query results.",
        "arguments": [
            {
                "type": "array",
                "name": "$results",
                "description": "An array of comments."
            },
            {
                "type": "\\WP_Comment_Query",
                "name": "",
                "description": "&amp;$this    Current instance of WP_Comment_Query, passed by reference."
            }
        ],
        "type": "filter_reference"
    },
    {
        "text": "parse_comment_query",
        "description": "Fires after the comment query vars have been parsed.",
        "arguments": [
            {
                "type": "\\WP_Comment_Query",
                "name": "",
                "description": "&amp;$this The WP_Comment_Query instance (passed by reference)."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "add_admin_bar_menus",
        "description": "Fires after menus are added to the menu bar.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_bar_init",
        "description": "Fires after WP_Admin_Bar is initialized.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "page_css_class",
        "description": "Filters the list of CSS classes to include with each page item in the list.",
        "arguments": [
            {
                "type": "array",
                "name": "$css_class",
                "description": "An array of CSS classes to be applied                              to each list item."
            },
            {
                "type": "\\WP_Post",
                "name": "$page",
                "description": "Page data object."
            },
            {
                "type": "int",
                "name": "$depth",
                "description": "Depth of page, used for padding."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            },
            {
                "type": "int",
                "name": "$current_page",
                "description": "ID of the current page."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "list_pages",
        "description": "Filters the page title when creating an HTML drop-down list of pages.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Page title."
            },
            {
                "type": "object",
                "name": "$page",
                "description": "Page data object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_item_args",
        "description": "Filters the arguments for a single nav menu item.",
        "arguments": [
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object of wp_nav_menu() arguments."
            },
            {
                "type": "\\WP_Post",
                "name": "$item",
                "description": "Menu item data object."
            },
            {
                "type": "int",
                "name": "$depth",
                "description": "Depth of menu item. Used for padding."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_css_class",
        "description": "Filters the CSS class(es) applied to a menu item's list item element.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "The CSS classes that are applied to the menu item's <code>&lt;li&gt;<\/code> element."
            },
            {
                "type": "\\WP_Post",
                "name": "$item",
                "description": "The current menu item."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object of wp_nav_menu() arguments."
            },
            {
                "type": "int",
                "name": "$depth",
                "description": "Depth of menu item. Used for padding."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_item_id",
        "description": "Filters the ID applied to a menu item's list item element.",
        "arguments": [
            {
                "type": "string",
                "name": "$menu_id",
                "description": "The ID that is applied to the menu item's <code>&lt;li&gt;<\/code> element."
            },
            {
                "type": "\\WP_Post",
                "name": "$item",
                "description": "The current menu item."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object of wp_nav_menu() arguments."
            },
            {
                "type": "int",
                "name": "$depth",
                "description": "Depth of menu item. Used for padding."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_link_attributes",
        "description": "Filters the HTML attributes applied to a menu item's anchor element.",
        "arguments": [
            {
                "type": "array",
                "name": "$atts",
                "description": "{     The HTML attributes applied to the menu item's <code>&lt;a&gt;<\/code> element, empty strings are ignored.     @type string $title  Title attribute.     @type string $target Target attribute.     @type string $rel    The rel attribute.     @type string $href   The href attribute. }"
            },
            {
                "type": "\\WP_Post",
                "name": "$item",
                "description": "The current menu item."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object of wp_nav_menu() arguments."
            },
            {
                "type": "int",
                "name": "$depth",
                "description": "Depth of menu item. Used for padding."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "nav_menu_item_title",
        "description": "Filters a menu item's title.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "The menu item's title."
            },
            {
                "type": "\\WP_Post",
                "name": "$item",
                "description": "The current menu item."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object of wp_nav_menu() arguments."
            },
            {
                "type": "int",
                "name": "$depth",
                "description": "Depth of menu item. Used for padding."
            }
        ],
        "type": "filter"
    },
    {
        "text": "walker_nav_menu_start_el",
        "description": "Filters a menu item's starting output.",
        "arguments": [
            {
                "type": "string",
                "name": "$item_output",
                "description": "The menu item's starting HTML output."
            },
            {
                "type": "\\WP_Post",
                "name": "$item",
                "description": "Menu item data object."
            },
            {
                "type": "int",
                "name": "$depth",
                "description": "Depth of menu item. Used for padding."
            },
            {
                "type": "\\stdClass",
                "name": "$args",
                "description": "An object of wp_nav_menu() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "list_cats",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "category_description",
        "description": "Filters the category description for display.",
        "arguments": [
            {
                "type": "string",
                "name": "$description",
                "description": "Category description."
            },
            {
                "type": "object",
                "name": "$category",
                "description": "Category object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "category_css_class",
        "description": "Filters the list of CSS classes to include with each category in the list.",
        "arguments": [
            {
                "type": "array",
                "name": "$css_classes",
                "description": "An array of CSS classes to be applied to each list item."
            },
            {
                "type": "object",
                "name": "$category",
                "description": "Category data object."
            },
            {
                "type": "int",
                "name": "$depth",
                "description": "Depth of page, used for padding."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of wp_list_categories() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "list_cats",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "oembed_dataparse",
        "description": "Filters the returned oEmbed HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$return",
                "description": "The returned oEmbed HTML."
            },
            {
                "type": "object",
                "name": "$data",
                "description": "A data object result from an oEmbed provider."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The URL of the content to be embedded."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_remote_get_args",
        "description": "This filter is documented in wp-includes\/class-oembed.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "oembed_fetch_url",
        "description": "Filters the oEmbed URL to be fetched.",
        "arguments": [
            {
                "type": "string",
                "name": "$provider",
                "description": "URL of the oEmbed provider."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "URL of the content to be embedded."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Optional arguments, usually passed from a shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_remote_get_args",
        "description": "Filters oEmbed remote get arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "oEmbed remote get arguments."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "URL to be inspected."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_linktypes",
        "description": "Filters the link types that contain oEmbed provider URLs.",
        "arguments": [
            {
                "type": "array",
                "name": "$format",
                "description": "Array of oEmbed link types. Accepts 'application\/json+oembed',                      'text\/xml+oembed', and 'application\/xml+oembed' (incorrect,                      used by at least Vimeo)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_oembed_result",
        "description": "Filters the oEmbed result before any HTTP requests are made.",
        "arguments": [
            {
                "type": "null|string",
                "name": "$result",
                "description": "The UNSANITIZED (and potentially unsafe) HTML that should be used to embed. Default null."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The URL to the content that should be attempted to be embedded."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Optional. Arguments, usually passed from a shortcode. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_result",
        "description": "Filters the HTML returned by the oEmbed provider.",
        "arguments": [
            {
                "type": "string",
                "name": "$data",
                "description": "The returned oEmbed HTML."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "URL of the content to be embedded."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Optional arguments, usually passed from a shortcode."
            }
        ],
        "type": "filter"
    },
    {
        "text": "oembed_providers",
        "description": "Filters the list of whitelisted oEmbed providers.",
        "arguments": [
            {
                "type": "array",
                "name": "$providers",
                "description": "An array of popular oEmbed providers."
            }
        ],
        "type": "filter"
    },
    {
        "text": "block_local_requests",
        "description": "Filters whether to block local requests through the proxy.",
        "arguments": [
            {
                "type": "bool",
                "name": "$block",
                "description": "Whether to block local requests through proxy.                    Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_api_debug",
        "description": "This action is documented in wp-includes\/class-http.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "http_response",
        "description": "Filters the HTTP API response immediately before the response is returned.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "HTTP response."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "HTTP request arguments."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The request URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_api_transports",
        "description": "Filters which HTTP transports are available and in what order.",
        "arguments": [
            {
                "type": "array",
                "name": "$transports",
                "description": "Array of HTTP transports to check. Default array contains                           'curl', and 'streams', in that order."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "HTTP request arguments."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The URL to request."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_request_timeout",
        "description": "Filters the timeout value for an HTTP request.",
        "arguments": [
            {
                "type": "int",
                "name": "$timeout_value",
                "description": "Time in seconds until a request times out.                           Default 5."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_request_redirection_count",
        "description": "Filters the number of redirects allowed during an HTTP request.",
        "arguments": [
            {
                "type": "int",
                "name": "$redirect_count",
                "description": "Number of redirects allowed. Default 5."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_request_version",
        "description": "Filters the version of the HTTP protocol used in a request.",
        "arguments": [
            {
                "type": "string",
                "name": "$version",
                "description": "Version of HTTP used. Accepts '1.0' and '1.1'.                        Default '1.0'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_headers_useragent",
        "description": "Filters the user agent value sent with an HTTP request.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_agent",
                "description": "WordPress user agent string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_request_reject_unsafe_urls",
        "description": "Filters whether to pass URLs through wp_http_validate_url() in an HTTP request.",
        "arguments": [
            {
                "type": "bool",
                "name": "$pass_url",
                "description": "Whether to pass URLs through wp_http_validate_url().                       Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_request_args",
        "description": "Filters the arguments used in an HTTP request.",
        "arguments": [
            {
                "type": "array",
                "name": "$r",
                "description": "An array of HTTP request arguments."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The request URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_http_request",
        "description": "Filters whether to preempt an HTTP request's return value.",
        "arguments": [
            {
                "type": "false|array|\\WP_Error",
                "name": "$preempt",
                "description": "Whether to preempt an HTTP request's return value. Default false."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "HTTP request arguments."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The request URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "https_ssl_verify",
        "description": "Filters whether SSL should be verified for non-local requests.",
        "arguments": [
            {
                "type": "bool",
                "name": "$ssl_verify",
                "description": "Whether to verify the SSL connection. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "http_api_debug",
        "description": "Fires after an HTTP API response is received and before the response is returned.",
        "arguments": [
            {
                "type": "array|\\WP_Error",
                "name": "$response",
                "description": "HTTP response or WP_Error object."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Context under which the hook is fired."
            },
            {
                "type": "string",
                "name": "$class",
                "description": "HTTP transport used."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "HTTP request arguments."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The request URL."
            }
        ],
        "type": "action"
    },
    {
        "text": "http_response",
        "description": "Filters the HTTP API response immediately before the response is returned.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "HTTP response."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "HTTP request arguments."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The request URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_tags",
        "description": "Filters the array of term objects returned for the 'post_tag' taxonomy.",
        "arguments": [
            {
                "type": "array",
                "name": "$tags",
                "description": "Array of 'post_tag' term objects."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments. @see get_terms()"
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_categories_taxonomy",
        "description": "Filters the taxonomy used to retrieve terms when calling get_categories().",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Taxonomy to retrieve terms from."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments. See get_terms()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_terms",
        "description": "Filters the list of terms to display.",
        "arguments": [
            {
                "type": "array",
                "name": "$term_list",
                "description": "List of terms to display."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy name."
            },
            {
                "type": "string",
                "name": "$before",
                "description": "String to use before the terms."
            },
            {
                "type": "string",
                "name": "$sep",
                "description": "String to use between the terms."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "String to use after the terms."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_links-{$taxonomy}",
        "description": "Filters the term links for a given taxonomy.",
        "arguments": [
            {
                "type": "array",
                "name": "$links",
                "description": "An array of term links."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_terms",
        "description": "Filters the list of terms attached to the given post.",
        "arguments": [
            {
                "type": "array|\\WP_Error",
                "name": "$terms",
                "description": "List of attached terms, or WP_Error on failure."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Name of the taxonomy."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_tags",
        "description": "Filters the tags list for a given post.",
        "arguments": [
            {
                "type": "string",
                "name": "$tag_list",
                "description": "List of tags."
            },
            {
                "type": "string",
                "name": "$before",
                "description": "String to use before tags."
            },
            {
                "type": "string",
                "name": "$sep",
                "description": "String to use between the tags."
            },
            {
                "type": "string",
                "name": "$after",
                "description": "String to use after tags."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_tags",
        "description": "Filters the array of tags for the given post.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms",
                "description": "An array of tags for the given post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tag_cloud_sort",
        "description": "Filters how the items in a tag cloud are sorted.",
        "arguments": [
            {
                "type": "array",
                "name": "$tags",
                "description": "Ordered array of terms."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of tag cloud arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_generate_tag_cloud_data",
        "description": "Filters the data used to generate the tag cloud.",
        "arguments": [
            {
                "type": "array",
                "name": "$tags_data",
                "description": "An array of term data for term used to generate the tag cloud."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_generate_tag_cloud",
        "description": "Filters the generated output of a tag cloud.",
        "arguments": [
            {
                "type": "array|string",
                "name": "$return",
                "description": "String containing the generated HTML tag cloud output                             or an array of tag links if the 'format' argument                             equals 'array'."
            },
            {
                "type": "array",
                "name": "$tags",
                "description": "An array of terms used in the tag cloud."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of wp_generate_tag_cloud() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_tag_cloud",
        "description": "Filters the tag cloud output.",
        "arguments": [
            {
                "type": "string",
                "name": "$return",
                "description": "HTML output of the tag cloud."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of tag cloud arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_list_categories",
        "description": "Filters the HTML output of a taxonomy list.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of taxonomy-listing arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "list_cats",
        "description": "Filters a taxonomy drop-down display element.",
        "arguments": [
            {
                "type": "string",
                "name": "$element",
                "description": "Taxonomy element to list."
            }
        ],
        "type": "filter"
    },
    {
        "text": "list_cats",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "list_cats",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_dropdown_cats",
        "description": "Filters the taxonomy drop-down output.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "HTML output."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "Arguments used to build the drop-down."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_category",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_category_list",
        "description": "Filters the categories before building the category list.",
        "arguments": [
            {
                "type": "array",
                "name": "$categories",
                "description": "An array of the post's categories."
            },
            {
                "type": "int|bool",
                "name": "$post_id",
                "description": "ID of the post we're retrieving categories for. When <code>false<\/code>, we assume the                             current post in the loop."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_category",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_category",
        "description": "Filters the category or list of categories.",
        "arguments": [
            {
                "type": "array",
                "name": "$thelist",
                "description": "List of categories for the current post."
            },
            {
                "type": "string",
                "name": "$separator",
                "description": "Separator used between the categories."
            },
            {
                "type": "string",
                "name": "$parents",
                "description": "How to display the category parents. Accepts 'multiple',                          'single', or empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_categories",
        "description": "Filters the array of categories to return for a post.",
        "arguments": [
            {
                "type": "array",
                "name": "$categories",
                "description": "An array of categories to return for the post."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "revoke_super_admin",
        "description": "Fires before the user's Super Admin privileges are revoked.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the user Super Admin privileges are being revoked from."
            }
        ],
        "type": "action"
    },
    {
        "text": "revoked_super_admin",
        "description": "Fires after the user's Super Admin privileges are revoked.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the user Super Admin privileges were revoked from."
            }
        ],
        "type": "action"
    },
    {
        "text": "grant_super_admin",
        "description": "Fires before the user is granted Super Admin privileges.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the user that is about to be granted Super Admin privileges."
            }
        ],
        "type": "action"
    },
    {
        "text": "granted_super_admin",
        "description": "Fires after the user is granted Super Admin privileges.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the user that was granted Super Admin privileges."
            }
        ],
        "type": "action"
    },
    {
        "text": "auth_post_meta_{$meta_key}",
        "description": "Filters whether the user is allowed to add post meta to a post.",
        "arguments": [
            {
                "type": "bool",
                "name": "$allowed",
                "description": "Whether the user can add the post meta. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "The meta key."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$cap",
                "description": "Capability name."
            },
            {
                "type": "array",
                "name": "$caps",
                "description": "User capabilities."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auth_post_{$post_type}_meta_{$meta_key}",
        "description": "Filters whether the user is allowed to add post meta to a post of a given type.",
        "arguments": [
            {
                "type": "bool",
                "name": "$allowed",
                "description": "Whether the user can add the post meta. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "The meta key."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "User ID."
            },
            {
                "type": "string",
                "name": "$cap",
                "description": "Capability name."
            },
            {
                "type": "array",
                "name": "$caps",
                "description": "User capabilities."
            }
        ],
        "type": "filter"
    },
    {
        "text": "map_meta_cap",
        "description": "Filters a user's capabilities depending on specific context and\/or privilege.",
        "arguments": [
            {
                "type": "array",
                "name": "$caps",
                "description": "Returns the user's actual capabilities."
            },
            {
                "type": "string",
                "name": "$cap",
                "description": "Capability name."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "Adds the context to the cap. Typically the object ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_signup_location",
        "description": "This filter is documented in wp-login.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "redirect_canonical",
        "description": "Filters the canonical redirect URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$redirect_url",
                "description": "The redirect URL."
            },
            {
                "type": "string",
                "name": "$requested_url",
                "description": "The requested URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_{$field}",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "pre_{$field}",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "{$field}",
        "description": "This filter is documented in wp-includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_bookmarks",
        "description": "Filters the returned list of bookmarks.",
        "arguments": [
            {
                "type": "array",
                "name": "$bookmarks",
                "description": "List of the cached bookmarks."
            },
            {
                "type": "array",
                "name": "$r",
                "description": "An array of bookmark query arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_bookmarks",
        "description": "This filter is documented in wp-includes\/bookmark.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_bookmarks",
        "description": "This filter is documented in wp-includes\/bookmark.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "link_category",
        "description": "Filters the bookmarks category name.",
        "arguments": [
            {
                "type": "string",
                "name": "$cat_name",
                "description": "The category name of bookmarks."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_list_bookmarks",
        "description": "Filters the bookmarks list before it is echoed or returned.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The HTML list of bookmarks."
            }
        ],
        "type": "filter"
    },
    {
        "text": "is_multi_author",
        "description": "Filters whether the site has more than one author with published posts.",
        "arguments": [
            {
                "type": "bool",
                "name": "$is_multi_author",
                "description": "Whether $is_multi_author should evaluate as true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "author_link",
        "description": "Filters the URL to the author's page.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The URL to the author's page."
            },
            {
                "type": "int",
                "name": "$author_id",
                "description": "The author's id."
            },
            {
                "type": "string",
                "name": "$author_nicename",
                "description": "The author's nice name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_author_posts_link",
        "description": "Filters the link to the author page of the author of the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "HTML link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_author_{$field}",
        "description": "The value of the requested user metadata.",
        "arguments": [
            {
                "type": "string",
                "name": "$author_meta",
                "description": "The value of the metadata."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_the_author_{$field}",
        "description": "Filters the value of the requested user metadata.",
        "arguments": [
            {
                "type": "string",
                "name": "$value",
                "description": "The value of the metadata."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID for the value."
            },
            {
                "type": "int|bool",
                "name": "$original_user_id",
                "description": "The original user ID, as passed to the function."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_modified_author",
        "description": "Filters the display name of the author who last edited the current post.",
        "arguments": [
            {
                "type": "string",
                "name": "$last_user->display_name",
                "description": "The author's display name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_author",
        "description": "Filters the display name of the current post's author.",
        "arguments": [
            {
                "type": "string",
                "name": "$authordata->display_name",
                "description": "The author's display name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "show_admin_bar",
        "description": "Filters whether to show the admin bar.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show_admin_bar",
                "description": "Whether the admin bar should be shown. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_bar_menu",
        "description": "Load all necessary admin bar items.",
        "arguments": [
            {
                "type": "\\WP_Admin_Bar",
                "name": "$wp_admin_bar",
                "description": "WP_Admin_Bar instance, passed by reference"
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "wp_before_admin_bar_render",
        "description": "Fires before the admin bar is rendered.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_after_admin_bar_render",
        "description": "Fires after the admin bar is rendered.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_admin_bar_class",
        "description": "Filters the admin bar class to instantiate.",
        "arguments": [
            {
                "type": "string",
                "name": "$wp_admin_bar_class",
                "description": "Admin bar class to use. Default 'WP_Admin_Bar'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "sidebar_admin_setup",
        "description": "Fires early before the Widgets administration screen loads, after scripts are enqueued.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "delete_widget",
        "description": "Fires immediately after a widget has been marked for deletion.",
        "arguments": [
            {
                "type": "string",
                "name": "$widget_id",
                "description": "ID of the widget marked for deletion."
            },
            {
                "type": "string",
                "name": "$sidebar_id",
                "description": "ID of the sidebar the widget was deleted from."
            },
            {
                "type": "string",
                "name": "$id_base",
                "description": "ID base for the widget."
            }
        ],
        "type": "action"
    },
    {
        "text": "widgets_admin_page",
        "description": "Fires before the Widgets administration page content loads.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "sidebar_admin_page",
        "description": "Fires after the available widgets and sidebars have loaded, before the admin footer.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "delete_user_form",
        "description": "Fires at the end of the delete users form prior to the confirm button.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$current_user",
                "description": "WP_User object for the current user."
            },
            {
                "type": "array",
                "name": "$userids",
                "description": "Array of IDs for users being deleted."
            }
        ],
        "type": "action"
    },
    {
        "text": "invite_user",
        "description": "Fires immediately after a user is invited to join a site, but before the notification is sent.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The invited user's ID."
            },
            {
                "type": "array",
                "name": "$role",
                "description": "The role of invited user."
            },
            {
                "type": "string",
                "name": "$newuser_key",
                "description": "The key of the invitation."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_user_login",
        "description": "Filters the user_login, also known as the username, before it is added to the site.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "The sanitized username."
            }
        ],
        "type": "filter"
    },
    {
        "text": "autocomplete_users_for_site_admins",
        "description": "Filters whether to enable user auto-complete for non-super admins in Multisite.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enable",
                "description": "Whether to enable auto-complete for non-super admins. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_new_form_tag",
        "description": "Fires inside the adduser form tag.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "user_new_form",
        "description": "Fires at the end of the new user form.",
        "arguments": [
            {
                "type": "string",
                "name": "$type",
                "description": "A contextual string specifying which type of new user form the hook follows."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_new_form_tag",
        "description": "This action is documented in wp-admin\/user-new.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "user_new_form",
        "description": "This action is documented in wp-admin\/user-new.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "enable_edit_any_user_configuration",
        "description": "Filters whether to allow administrators on Multisite to edit every user.",
        "arguments": [
            {
                "type": "bool",
                "name": "$allow",
                "description": "Whether to allow editing of any user. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "personal_options_update",
        "description": "Fires before the page loads on the 'Your Profile' editing screen.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_user_profile_update",
        "description": "Fires before the page loads on the 'Edit User' screen.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_edit_form_tag",
        "description": "Fires inside the your-profile form tag on the user editing screen.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_color_scheme_picker",
        "description": "Fires in the 'Admin Color Scheme' section of the user editing screen.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "The user ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "personal_options",
        "description": "Fires at the end of the 'Personal Options' settings table on the user editing screen.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "profile_personal_options",
        "description": "Fires after the 'Personal Options' settings table on the 'Your Profile' editing screen.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_{$name}_label",
        "description": "Filters a user contactmethod label.",
        "arguments": [
            {
                "type": "string",
                "name": "$desc",
                "description": "The translatable label for the contactmethod."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_profile_picture_description",
        "description": "Filters the user profile picture description displayed under the Gravatar.",
        "arguments": [
            {
                "type": "string",
                "name": "$description",
                "description": "The description that will be printed."
            },
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "show_password_fields",
        "description": "Filters the display of the password fields.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to show the password fields. Default true."
            },
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "User object for the current user to edit."
            }
        ],
        "type": "filter"
    },
    {
        "text": "show_user_profile",
        "description": "Fires after the 'About Yourself' settings table on the 'Your Profile' editing screen.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_user_profile",
        "description": "Fires after the 'About the User' settings table on the 'Edit User' screen.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "action"
    },
    {
        "text": "additional_capabilities_display",
        "description": "Filters whether to display additional capabilities for the user.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enable",
                "description": "Whether to display the capabilities. Default true."
            },
            {
                "type": "\\WP_User",
                "name": "$profileuser",
                "description": "The current WP_User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "redirect_user_admin_request",
        "description": "Filters whether to redirect the request to the User Admin in Multisite.",
        "arguments": [
            {
                "type": "bool",
                "name": "$redirect_user_admin_request",
                "description": "Whether the request should be redirected."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update-custom_{$action}",
        "description": "Fires when a custom plugin or theme update request is received.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "core_upgrade_preamble",
        "description": "Fires after the core, plugin, and theme update tables.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "update-core-custom_{$action}",
        "description": "Fires for each custom update action on the WordPress Updates screen.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "tool_box",
        "description": "Fires at the end of the Tools Administration screen.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "install_themes_pre_{$tab}",
        "description": "Fires before each of the tabs are rendered on the Install Themes page.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "install_themes_tabs",
        "description": "Filters the tabs shown on the Add Themes screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$tabs",
                "description": "The tabs shown on the Add Themes screen. Default is 'upload'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_themes_{$tab}",
        "description": "Fires at the top of each of the tabs on the Install Themes page.",
        "arguments": [
            {
                "type": "int",
                "name": "$paged",
                "description": "Number of the current page of results being viewed."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_theme_editor_filetypes",
        "description": "Filters the list of file types allowed for editing in the Theme editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_types",
                "description": "List of file types. Default types include 'php' and 'css'."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "The current Theme object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_action_{$action}",
        "description": "Fires for a given custom post action request.",
        "arguments": [
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID sent with the request."
            }
        ],
        "type": "action"
    },
    {
        "text": "activate_{$plugin}",
        "description": "This action is documented in wp-admin\/includes\/plugin.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "pre_current_active_plugins",
        "description": "Fires before the plugins list table is rendered.",
        "arguments": [
            {
                "type": "array",
                "name": "$plugins_all",
                "description": "An array containing all installed plugins."
            }
        ],
        "type": "action"
    },
    {
        "text": "install_plugins_pre_{$tab}",
        "description": "Fires before each tab on the Install Plugins screen is loaded.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "install_plugins_pre_upload",
        "description": "This action is documented in wp-admin\/plugin-install.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "install_plugins_upload",
        "description": "This action is documented in wp-admin\/plugin-install.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "install_plugins_{$tab}",
        "description": "Fires after the plugins list table in each tab of the Install Plugins screen.",
        "arguments": [
            {
                "type": "int",
                "name": "$paged",
                "description": "The current page number of the plugins list table."
            }
        ],
        "type": "action"
    },
    {
        "text": "editable_extensions",
        "description": "Filters file type extensions editable in the plugin editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$editable_extensions",
                "description": "An array of editable plugin file extensions."
            }
        ],
        "type": "filter"
    },
    {
        "text": "option_page_capability_{$option_page}",
        "description": "Filters the capability required when using the Settings API.",
        "arguments": [
            {
                "type": "string",
                "name": "$capability",
                "description": "The capability used for the page, which is manage_options by default."
            }
        ],
        "type": "filter"
    },
    {
        "text": "enable_post_by_email_configuration",
        "description": "Filters whether the post-by-email functionality is enabled.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enabled",
                "description": "Whether post-by-email configuration is enabled. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "whitelist_options",
        "description": "Filters the options white list.",
        "arguments": [
            {
                "type": "array",
                "name": "",
                "description": "White list options."
            }
        ],
        "type": "filter"
    },
    {
        "text": "enable_post_by_email_configuration",
        "description": "This filter is documented in wp-admin\/options.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "enable_update_services_configuration",
        "description": "This filter is documented in wp-admin\/options-writing.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "enable_post_by_email_configuration",
        "description": "This filter is documented in wp-admin\/options.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "enable_update_services_configuration",
        "description": "Filters whether to enable the Update Services section in the Writing settings screen.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enable",
                "description": "Whether to enable the Update Services settings area. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "blog_privacy_selector",
        "description": "Enable the legacy 'Site Visibility' privacy options.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "date_formats",
        "description": "Filters the default date formats.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_date_formats",
                "description": "Array of default date formats."
            }
        ],
        "type": "filter"
    },
    {
        "text": "time_formats",
        "description": "Filters the default time formats.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_time_formats",
                "description": "Array of default time formats."
            }
        ],
        "type": "filter"
    },
    {
        "text": "thread_comments_depth_max",
        "description": "Filters the maximum depth of threaded\/nested comments.",
        "arguments": [
            {
                "type": "int",
                "name": "$max_depth",
                "description": "The maximum depth of threaded comments. Default 10."
            }
        ],
        "type": "filter"
    },
    {
        "text": "avatar_defaults",
        "description": "Filters the default avatars.",
        "arguments": [
            {
                "type": "array",
                "name": "$avatar_defaults",
                "description": "Array of default avatars."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_avatar_select",
        "description": "Filters the HTML output of the default avatar list.",
        "arguments": [
            {
                "type": "string",
                "name": "$avatar_list",
                "description": "HTML markup of the avatar list."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmuadminedit",
        "description": "This action is documented in wp-admin\/network\/edit.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "network_user_new_created_user",
        "description": "Fires after a new user has been created via the network user-new.php page.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly created user."
            }
        ],
        "type": "action"
    },
    {
        "text": "network_user_new_form",
        "description": "Fires at the end of the new user form in network admin.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "after_mu_upgrade",
        "description": "Fires after the Multisite DB upgrade for each site is complete.",
        "arguments": [
            {
                "type": "array|\\WP_Error",
                "name": "$response",
                "description": "The upgrade response array or WP_Error on failure."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_upgrade_site",
        "description": "Fires after each site has been upgraded.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The Site ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_upgrade_page",
        "description": "Fires before the footer on the network upgrade screen.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wpmuadminedit",
        "description": "This action is documented in wp-admin\/network\/edit.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "activate_blog",
        "description": "Fires after a network site is activated.",
        "arguments": [
            {
                "type": "string",
                "name": "$id",
                "description": "The ID of the activated site."
            }
        ],
        "type": "action"
    },
    {
        "text": "deactivate_blog",
        "description": "Fires before a network site is deactivated.",
        "arguments": [
            {
                "type": "string",
                "name": "$id",
                "description": "The ID of the site being deactivated."
            }
        ],
        "type": "action"
    },
    {
        "text": "network_sites_updated_message_{$_GET['updated']}",
        "description": "Filters a specific, non-default site-updated message in the Network admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$msg",
                "description": "The update message. Default 'Settings saved'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_site_users_created_user",
        "description": "Fires after a user has been created via the network site-users.php page.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly created user."
            }
        ],
        "type": "action"
    },
    {
        "text": "show_network_site_users_add_existing_form",
        "description": "Filters whether to show the Add Existing User form on the Multisite Users screen.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bool",
                "description": "Whether to show the Add Existing User form. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_site_users_after_list_table",
        "description": "Fires after the list table on the Users screen in the Multisite Network Admin.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "show_network_site_users_add_existing_form",
        "description": "This filter is documented in wp-admin\/network\/site-users.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "show_network_site_users_add_new_form",
        "description": "Filters whether to show the Add New User form on the Multisite Users screen.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bool",
                "description": "Whether to show the Add New User form. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_update_blog_options",
        "description": "Fires after the site options are updated.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "The ID of the site being updated."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmueditblogaction",
        "description": "Fires at the end of the Edit Site form, before the submit button.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "Site ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_network_site_new_created_user",
        "description": "Fires immediately before a new user is created via the network site-new.php page.",
        "arguments": [
            {
                "type": "string",
                "name": "$email",
                "description": "Email of the non-existent user."
            }
        ],
        "type": "action"
    },
    {
        "text": "network_site_new_created_user",
        "description": "Fires after a new user has been created via the network site-new.php page.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly created user."
            }
        ],
        "type": "action"
    },
    {
        "text": "network_site_new_form",
        "description": "Fires at the end of the new site form in network admin.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wpmuadminedit",
        "description": "This action is documented in wp-admin\/network\/edit.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "update_wpmu_options",
        "description": "Fires after the network options are updated.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "mu_menu_items",
        "description": "Filters available network-wide administration menu options.",
        "arguments": [
            {
                "type": "array",
                "name": "$admin_menus",
                "description": "The menu items available."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_options",
        "description": "Fires at the end of the Network Settings form, before the submit button.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wpmuadminedit",
        "description": "Fires just before the action handler in several Network Admin screens.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "network_admin_edit_{$_GET['action']}",
        "description": "Fires the requested handler action.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "redirect_network_admin_request",
        "description": "Filters whether to redirect the request to the Network Admin.",
        "arguments": [
            {
                "type": "bool",
                "name": "$redirect_network_admin_request",
                "description": "Whether the request should be redirected."
            }
        ],
        "type": "filter"
    },
    {
        "text": "after_menu_locations_table",
        "description": "Fires after the menu locations table is displayed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_nav_locations_listed_per_menu",
        "description": "Filters the number of locations listed per menu in the drop-down select.",
        "arguments": [
            {
                "type": "int",
                "name": "$locations",
                "description": "Number of menu locations to list. Default 3."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_signup_location",
        "description": "This filter is documented in wp-login.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "myblogs_allblogs_options",
        "description": "Fires before the sites list on the My Sites screen.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "myblogs_options",
        "description": "Enable the Global Settings section on the My Sites screen.",
        "arguments": [
            {
                "type": "string",
                "name": "$settings_html",
                "description": "The settings HTML markup. Default empty."
            },
            {
                "type": "object",
                "name": "$context",
                "description": "Context of the setting (global or site-specific). Default 'global'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "myblogs_blog_actions",
        "description": "Filters the row links displayed for each site on the My Sites screen.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "The HTML site link markup."
            },
            {
                "type": "object",
                "name": "$user_blog",
                "description": "An object containing the site data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "myblogs_options",
        "description": "This filter is documented in wp-admin\/my-sites.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "delete_site_email_content",
        "description": "Filters the email content sent when a site in a Multisite network is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The email content that will be sent to the user who deleted a site in a Multisite network."
            }
        ],
        "type": "filter"
    },
    {
        "text": "parent_file",
        "description": "Filters the parent file of an admin menu sub-menu item.",
        "arguments": [
            {
                "type": "string",
                "name": "$parent_file",
                "description": "The parent file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "submenu_file",
        "description": "Filters the file of an admin menu sub-menu item.",
        "arguments": [
            {
                "type": "string",
                "name": "$submenu_file",
                "description": "The submenu file."
            },
            {
                "type": "string",
                "name": "$parent_file",
                "description": "The submenu item's parent file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "adminmenu",
        "description": "Fires after the admin menu has been output.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "media_upload_default_type",
        "description": "Filters the default media upload type in the legacy (pre-3.5.0) media popup.",
        "arguments": [
            {
                "type": "string",
                "name": "$type",
                "description": "The default media upload type. Possible values include                     'image', 'audio', 'video', 'file', etc. Default 'file'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_default_tab",
        "description": "Filters the default tab in the legacy (pre-3.5.0) media popup.",
        "arguments": [
            {
                "type": "string",
                "name": "$type",
                "description": "The default media popup tab. Default 'type' (From Computer)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_{$type}",
        "description": "Fires inside specific upload-type views in the legacy (pre-3.5.0) media popup based on the current tab.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "media_upload_{$tab}",
        "description": "Fires inside limited and specific upload-tab views in the legacy (pre-3.5.0) media popup.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "tables_to_repair",
        "description": "Filters additional database tables to repair.",
        "arguments": [
            {
                "type": "array",
                "name": "$tables",
                "description": "Array of prefixed table names to be repaired."
            }
        ],
        "type": "filter"
    },
    {
        "text": "blog_privacy_selector",
        "description": "This action is documented in wp-admin\/options-reading.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "welcome_panel",
        "description": "Add content to the welcome panel on the admin dashboard.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "delete_user",
        "description": "Fires immediately before a user is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the user to delete."
            },
            {
                "type": "int|null",
                "name": "$reassign",
                "description": "ID of the user to reassign posts and links to.                           Default null, for no reassignment."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_types_to_delete_with_user",
        "description": "Filters the list of post types to delete with a user.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_types_to_delete",
                "description": "Post types to delete."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "User ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "deleted_user",
        "description": "Fires immediately after a user is deleted from the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the deleted user."
            },
            {
                "type": "int|null",
                "name": "$reassign",
                "description": "ID of the user to reassign posts and links to.                           Default null, for no reassignment."
            }
        ],
        "type": "action"
    },
    {
        "text": "get_users_drafts",
        "description": "Filters the user's drafts query string.",
        "arguments": [
            {
                "type": "string",
                "name": "$query",
                "description": "The user's drafts query string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editable_roles",
        "description": "Filters the list of editable roles.",
        "arguments": [
            {
                "type": "array",
                "name": "$all_roles",
                "description": "List of roles."
            }
        ],
        "type": "filter"
    },
    {
        "text": "check_passwords",
        "description": "Fires before the password and confirm password fields are checked for congruity.",
        "arguments": [
            {
                "type": "string",
                "name": "$user_login",
                "description": "The username."
            },
            {
                "type": "string",
                "name": "",
                "description": "&amp;$pass1     The password, passed by reference."
            },
            {
                "type": "string",
                "name": "",
                "description": "&amp;$pass2     The confirmed password, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "illegal_user_logins",
        "description": "This filter is documented in wp-includes\/user.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "user_profile_update_errors",
        "description": "Fires before user profile update errors are returned.",
        "arguments": [
            {
                "type": "\\WP_Error",
                "name": "",
                "description": "&amp;$errors WP_Error object, passed by reference."
            },
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether this is a user update."
            },
            {
                "type": "\\stdClass",
                "name": "",
                "description": "&amp;$user   User object, passed by reference."
            }
        ],
        "type": "action_reference"
    },
    {
        "text": "edit_user_created_user",
        "description": "Fires after a new user has been created.",
        "arguments": [
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the newly created user."
            },
            {
                "type": "string",
                "name": "$notify",
                "description": "Type of notification that should happen. See wp_send_new_user_notifications()                        for more information on possible values."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_should_upgrade_global_tables",
        "description": "Filters if upgrade routines should be run on global tables.",
        "arguments": [
            {
                "type": "bool",
                "name": "$should_upgrade",
                "description": "Whether to run the upgrade routines on global tables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dbdelta_queries",
        "description": "Filters the dbDelta SQL queries.",
        "arguments": [
            {
                "type": "array",
                "name": "$queries",
                "description": "An array of dbDelta SQL queries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dbdelta_create_queries",
        "description": "Filters the dbDelta SQL queries for creating tables and\/or databases.",
        "arguments": [
            {
                "type": "array",
                "name": "$cqueries",
                "description": "An array of dbDelta create SQL queries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dbdelta_insert_queries",
        "description": "Filters the dbDelta SQL queries for inserting or updating.",
        "arguments": [
            {
                "type": "array",
                "name": "$iqueries",
                "description": "An array of dbDelta insert or update SQL queries."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_upgrade",
        "description": "Fires after a site is fully upgraded.",
        "arguments": [
            {
                "type": "int",
                "name": "$wp_db_version",
                "description": "The new $wp_db_version."
            },
            {
                "type": "int",
                "name": "$wp_current_db_version",
                "description": "The old (current) $wp_db_version."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_install",
        "description": "Fires after a site is fully installed.",
        "arguments": [
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "The site owner."
            }
        ],
        "type": "action"
    },
    {
        "text": "in_theme_update_message-{$theme_key}",
        "description": "Fires at the end of the update message container in each row of the themes list table.",
        "arguments": [
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "The WP_Theme object."
            },
            {
                "type": "array",
                "name": "$response",
                "description": "{     An array of metadata about the available theme update.     @type string $new_version New theme version.     @type string $url         Theme URL.     @type string $package     Theme update package URL. }"
            }
        ],
        "type": "action"
    },
    {
        "text": "in_plugin_update_message-{$file}",
        "description": "Fires at the end of the update message container in each row of the plugins list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "{     An array of plugin metadata.     @type string $name        The human-readable name of the plugin.     @type string $plugin_uri  Plugin URI.     @type string $version     Plugin version.     @type string $description Plugin description.     @type string $author      Plugin author.     @type string $author_uri  Plugin author URI.     @type string $text_domain Plugin text domain.     @type string $domain_path Relative path to the plugin's .mo file(s).     @type bool   $network     Whether the plugin can only be activated network wide.     @type string $title       The human-readable title of the plugin.     @type string $author_name Plugin author's name.     @type bool   $update      Whether there's an available update. Default null. }"
            },
            {
                "type": "array",
                "name": "$response",
                "description": "{     An array of metadata about the available plugin update.     @type int    $id          Plugin ID.     @type string $slug        Plugin slug.     @type string $new_version New plugin version.     @type string $url         Plugin URL.     @type string $package     Plugin update package URL. }"
            }
        ],
        "type": "action"
    },
    {
        "text": "update_right_now_text",
        "description": "Filters the text displayed in the 'At a Glance' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Default text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_feedback",
        "description": "Filters feedback messages displayed during the core update process.",
        "arguments": [
            {
                "type": "string",
                "name": "$feedback",
                "description": "The core update feedback messages."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_feedback",
        "description": "This filter is documented in wp-admin\/includes\/update-core.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "update_feedback",
        "description": "This filter is documented in wp-admin\/includes\/update-core.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "update_feedback",
        "description": "This filter is documented in wp-admin\/includes\/update-core.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "update_feedback",
        "description": "This filter is documented in wp-admin\/includes\/update-core.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "update_feedback",
        "description": "This filter is documented in wp-admin\/includes\/update-core.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "_core_updated_successfully",
        "description": "Fires after WordPress core has been successfully updated.",
        "arguments": [
            {
                "type": "string",
                "name": "$wp_version",
                "description": "The current WordPress version."
            }
        ],
        "type": "action"
    },
    {
        "text": "translations_api",
        "description": "Allows a plugin to override the WordPress.org Translation Install API entirely.",
        "arguments": [
            {
                "type": "bool|array",
                "name": "$result",
                "description": "The result object. Default false."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of translations being requested."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Translation API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "translations_api_result",
        "description": "Filters the Translation Install API response results.",
        "arguments": [
            {
                "type": "object|\\WP_Error",
                "name": "$res",
                "description": "Response object or WP_Error."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of translations being requested."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Translation API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_prepare_themes_for_js",
        "description": "Filters theme data before it is prepared for JavaScript.",
        "arguments": [
            {
                "type": "array",
                "name": "$prepared_themes",
                "description": "An associative array of theme data. Default empty array."
            },
            {
                "type": "null|array",
                "name": "$themes",
                "description": "An array of WP_Theme objects to prepare, if any."
            },
            {
                "type": "string",
                "name": "$current_theme",
                "description": "The current theme slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_prepare_themes_for_js",
        "description": "Filters the themes prepared for JavaScript, for themes.php.",
        "arguments": [
            {
                "type": "array",
                "name": "$prepared_themes",
                "description": "Array of themes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "themes_api_args",
        "description": "Filters arguments used to query for installer pages from the WordPress.org Themes API.",
        "arguments": [
            {
                "type": "object",
                "name": "$args",
                "description": "Arguments used to query for installer pages from the WordPress.org Themes API."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "Requested action. Likely values are 'theme_information',                       'feature_list', or 'query_themes'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "themes_api",
        "description": "Filters whether to override the WordPress.org Themes API.",
        "arguments": [
            {
                "type": "false|object|array",
                "name": "$override",
                "description": "Whether to override the WordPress.org Themes API. Default false."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "Requested action. Likely values are 'theme_information',                                    'feature_list', or 'query_themes'."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Arguments used to query for installer pages from the Themes API."
            }
        ],
        "type": "filter"
    },
    {
        "text": "themes_api_result",
        "description": "Filters the returned WordPress.org Themes API response.",
        "arguments": [
            {
                "type": "array|object|\\WP_Error",
                "name": "$res",
                "description": "WordPress.org Themes API response."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "Requested action. Likely values are 'theme_information',                                      'feature_list', or 'query_themes'."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Arguments used to query for installer pages from the WordPress.org Themes API."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_xml_ns",
        "description": "Fires inside the HTML tag in the admin header.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_xml_ns",
        "description": "This action is documented in wp-admin\/includes\/template.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "display_media_states",
        "description": "Filters the default media display states for items in the Media list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$media_states",
                "description": "An array of media states. Default 'Header Image',                            'Background Image', 'Site Icon', 'Logo'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "display_post_states",
        "description": "Filters the default post display states used in the posts list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_states",
                "description": "An array of post display states."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The current post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_footer",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_footer_scripts-{$hook_suffix}",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_footer_scripts",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_enqueue_scripts",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_styles-{$hook_suffix}",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_styles",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts-{$hook_suffix}",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_head-{$hook_suffix}",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_head",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_body_class",
        "description": "This filter is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "import_upload_size_limit",
        "description": "Filters the maximum allowed upload size for import files.",
        "arguments": [
            {
                "type": "int",
                "name": "$max_upload_size",
                "description": "Allowed upload size. Default 1 MB."
            }
        ],
        "type": "filter"
    },
    {
        "text": "postmeta_form_keys",
        "description": "Filters values for the meta key dropdown in the Custom Fields meta box.",
        "arguments": [
            {
                "type": "array|null",
                "name": "$keys",
                "description": "Pre-defined meta keys to be used in place of a postmeta query. Default null."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The current post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "postmeta_form_limit",
        "description": "Filters the number of custom fields to retrieve for the drop-down in the Custom Fields meta box.",
        "arguments": [
            {
                "type": "int",
                "name": "$limit",
                "description": "Number of custom fields to retrieve. Default 30."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_comment_reply",
        "description": "Filters the in-line comment reply-to form output in the Comments list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The reply-to form content."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of default args."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editable_slug",
        "description": "This filter is documented in wp-admin\/edit-tag-form.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_category",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_category",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_terms_checklist_args",
        "description": "Filters the taxonomy terms checklist arguments.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "terms_to_edit",
        "description": "Filters the comma-separated list of terms available to edit.",
        "arguments": [
            {
                "type": "array",
                "name": "$terms_to_edit",
                "description": "An array of terms."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy for which to retrieve terms. Default 'post_tag'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_hidden_meta_boxes",
        "description": "Filters the default list of hidden meta boxes.",
        "arguments": [
            {
                "type": "array",
                "name": "$hidden",
                "description": "An array of meta boxes hidden by default."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "WP_Screen object of the current screen."
            }
        ],
        "type": "filter"
    },
    {
        "text": "hidden_meta_boxes",
        "description": "Filters the list of hidden meta boxes.",
        "arguments": [
            {
                "type": "array",
                "name": "$hidden",
                "description": "An array of hidden meta boxes."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "WP_Screen object of the current screen."
            },
            {
                "type": "bool",
                "name": "$use_defaults",
                "description": "Whether to show the default meta boxes.                                Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_hidden_columns",
        "description": "Filters the default list of hidden columns.",
        "arguments": [
            {
                "type": "array",
                "name": "$hidden",
                "description": "An array of columns hidden by default."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "WP_Screen object of the current screen."
            }
        ],
        "type": "filter"
    },
    {
        "text": "hidden_columns",
        "description": "Filters the list of hidden columns.",
        "arguments": [
            {
                "type": "array",
                "name": "$hidden",
                "description": "An array of hidden columns."
            },
            {
                "type": "\\WP_Screen",
                "name": "$screen",
                "description": "WP_Screen object of the current screen."
            },
            {
                "type": "bool",
                "name": "$use_defaults",
                "description": "Whether to show the default columns."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_{$screen->id}_columns",
        "description": "Filters the column headers for a list table on a specific screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$columns",
                "description": "An array of column headers. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "populate_network_meta",
        "description": "Filters meta for a network on creation.",
        "arguments": [
            {
                "type": "array",
                "name": "$sitemeta",
                "description": "Associative array of network meta keys and values to be inserted."
            },
            {
                "type": "int",
                "name": "$network_id",
                "description": "ID of network to populate."
            }
        ],
        "type": "filter"
    },
    {
        "text": "populate_options",
        "description": "Fires before creating WordPress options and populating their default values.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_prepare_revision_for_js",
        "description": "Filters the array of revisions used on the revisions screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$revisions_data",
                "description": "{     The bootstrapped data for the revisions screen.     @type int        $id         Revision ID.     @type string     $title      Title for the revision's parent WP_Post object.     @type int        $author     Revision post author ID.     @type string     $date       Date the revision was modified.     @type string     $dateShort  Short-form version of the date the revision was modified.     @type string     $timeAgo    GMT-aware amount of time ago the revision was modified.     @type bool       $autosave   Whether the revision is an autosave.     @type bool       $current    Whether the revision is both not an autosave and the post                                  modified date matches the revision modified date (GMT-aware).     @type bool|false $restoreUrl URL if the revision can be restored, false otherwise. }"
            },
            {
                "type": "\\WP_Post",
                "name": "$revision",
                "description": "The revision's WP_Post object."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The revision's parent WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_wp_post_revision_field_{$field}",
        "description": "Contextually filter a post revision field.",
        "arguments": [
            {
                "type": "string",
                "name": "$compare_from->$field",
                "description": "The current revision field to compare to or from."
            },
            {
                "type": "string",
                "name": "$field",
                "description": "The current revision field."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_from",
                "description": "The revision post object to compare to or from."
            },
            {
                "type": "string",
                "name": "",
                "description": "null                  The context of whether the current revision is the old                                      or the new one. Values are 'to' or 'from'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_wp_post_revision_field_{$field}",
        "description": "This filter is documented in wp-admin\/includes\/revision.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "revision_text_diff_options",
        "description": "Filters revisions text diff options.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "{     Associative array of options to pass to wp_text_diff().     @type bool $show_split_view True for split view (two columns), false for                                 un-split view (single column). Default true. }"
            },
            {
                "type": "string",
                "name": "$field",
                "description": "The current revision field."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_from",
                "description": "The revision post to compare from."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_to",
                "description": "The revision post to compare to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_get_revision_ui_diff",
        "description": "Filters the fields displayed in the post revision diff UI.",
        "arguments": [
            {
                "type": "array",
                "name": "$return",
                "description": "Revision UI fields. Each item is an array of id, name and diff."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_from",
                "description": "The revision post to compare from."
            },
            {
                "type": "\\WP_Post",
                "name": "$compare_to",
                "description": "The revision post to compare to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "redirect_post_location",
        "description": "Filters the post redirect destination URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The destination URL."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_creating_autosave",
        "description": "Fires before an autosave is stored.",
        "arguments": [
            {
                "type": "array",
                "name": "$new_autosave",
                "description": "Post array - the autosave that is about to be saved."
            }
        ],
        "type": "action"
    },
    {
        "text": "show_post_locked_dialog",
        "description": "Filters whether to show the post locked dialog.",
        "arguments": [
            {
                "type": "bool",
                "name": "$display",
                "description": "Whether to display the dialog. Default true."
            },
            {
                "type": "\\WP_User|bool",
                "name": "$user",
                "description": "WP_User object on success, false otherwise."
            }
        ],
        "type": "filter"
    },
    {
        "text": "override_post_lock",
        "description": "Filters whether to allow the post lock to be overridden.",
        "arguments": [
            {
                "type": "bool",
                "name": "$override",
                "description": "Whether to allow overriding post locks. Default true."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_locked_dialog",
        "description": "Fires inside the post locked dialog before the buttons are displayed.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_lock_lost_dialog",
        "description": "Fires inside the dialog displayed when a user has lost the post lock.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_check_post_lock_window",
        "description": "This filter is documented in wp-admin\/includes\/ajax-actions.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "admin_post_thumbnail_size",
        "description": "Filters the size used to display the post thumbnail image in the 'Featured Image' meta box.",
        "arguments": [
            {
                "type": "string|array",
                "name": "$size",
                "description": "Post thumbnail image size to display in the meta box. Accepts any valid                                   image size, or an array of width and height values in pixels (in that order).                                   If the 'post-thumbnail' size is set, default is 'post-thumbnail'. Otherwise,                                   default is an array with 266 as both the height and width values."
            },
            {
                "type": "int",
                "name": "$thumbnail_id",
                "description": "Post thumbnail attachment ID."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post object associated with the thumbnail."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_post_thumbnail_html",
        "description": "Filters the admin post thumbnail HTML markup to return.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Admin post thumbnail HTML markup."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "int",
                "name": "$thumbnail_id",
                "description": "Thumbnail ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_sample_permalink_html",
        "description": "Filters the sample permalink HTML markup.",
        "arguments": [
            {
                "type": "string",
                "name": "$return",
                "description": "Sample permalink HTML markup."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$new_title",
                "description": "New sample permalink title."
            },
            {
                "type": "string",
                "name": "$new_slug",
                "description": "New sample permalink slug."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editable_slug",
        "description": "This filter is documented in wp-admin\/edit-tag-form.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "editable_slug",
        "description": "This filter is documented in wp-admin\/edit-tag-form.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_sample_permalink",
        "description": "Filters the sample permalink.",
        "arguments": [
            {
                "type": "array",
                "name": "$permalink",
                "description": "Array containing the sample permalink with placeholder for the post name, and the post name."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Post title."
            },
            {
                "type": "string",
                "name": "$name",
                "description": "Post name (slug)."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "postbox_classes_{$page}_{$id}",
        "description": "Filters the postbox classes for a specific screen and screen ID combo.",
        "arguments": [
            {
                "type": "array",
                "name": "$classes",
                "description": "An array of postbox classes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_per_page",
        "description": "Filters the number of items to list per page when listing media items.",
        "arguments": [
            {
                "type": "int",
                "name": "$media_per_page",
                "description": "Number of media to list. Default 20."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_{$post_type}_per_page",
        "description": "Filters the number of items per page to show for a specific 'per_page' type.",
        "arguments": [
            {
                "type": "int",
                "name": "$posts_per_page",
                "description": "Number of posts to display per page for the given post                            type. Default 20."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_posts_per_page",
        "description": "Filters the number of posts displayed per page when specifically listing \"posts\".",
        "arguments": [
            {
                "type": "int",
                "name": "$posts_per_page",
                "description": "Number of posts to be displayed. Default 20."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_content",
        "description": "Filters the default post content initially used in the \"Write Post\" form.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_content",
                "description": "Default post content."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_title",
        "description": "Filters the default post title initially used in the \"Write Post\" form.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_title",
                "description": "Default post title."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_excerpt",
        "description": "Filters the default post excerpt initially used in the \"Write Post\" form.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_excerpt",
                "description": "Default post excerpt."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_fields_to_save",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "register_setting_args",
        "description": "Filters the registration arguments when registering a setting.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Array of setting registration arguments."
            },
            {
                "type": "array",
                "name": "$defaults",
                "description": "Array of default arguments."
            },
            {
                "type": "string",
                "name": "$option_group",
                "description": "Setting group."
            },
            {
                "type": "string",
                "name": "$option_name",
                "description": "Setting name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_uninstall_plugin",
        "description": "Fires in uninstall_plugin() immediately before the plugin is uninstalled.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin",
                "description": "Relative plugin path from plugin directory."
            },
            {
                "type": "array",
                "name": "$uninstallable_plugins",
                "description": "Uninstallable plugins."
            }
        ],
        "type": "action"
    },
    {
        "text": "uninstall_{$file}",
        "description": "Fires in uninstall_plugin() once the plugin has been uninstalled.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "delete_plugin",
        "description": "Fires immediately before a plugin deletion attempt.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Plugin file name."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_plugin",
        "description": "Fires immediately after a plugin deletion attempt.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Plugin file name."
            },
            {
                "type": "bool",
                "name": "$deleted",
                "description": "Whether the plugin deletion was successful."
            }
        ],
        "type": "action"
    },
    {
        "text": "deactivate_plugin",
        "description": "Fires before a plugin is deactivated.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin",
                "description": "Plugin path to main plugin file with plugin data."
            },
            {
                "type": "bool",
                "name": "$network_deactivating",
                "description": "Whether the plugin is deactivated for all sites in the network                                     or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "deactivate_{$plugin}",
        "description": "Fires as a specific plugin is being deactivated.",
        "arguments": [
            {
                "type": "bool",
                "name": "$network_deactivating",
                "description": "Whether the plugin is deactivated for all sites in the network                                   or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "deactivated_plugin",
        "description": "Fires after a plugin is deactivated.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin",
                "description": "Plugin basename."
            },
            {
                "type": "bool",
                "name": "$network_deactivating",
                "description": "Whether the plugin is deactivated for all sites in the network                                     or just the current site. Multisite only. Default false."
            }
        ],
        "type": "action"
    },
    {
        "text": "activate_plugin",
        "description": "Fires before a plugin is activated.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin",
                "description": "Plugin path to main plugin file with plugin data."
            },
            {
                "type": "bool",
                "name": "$network_wide",
                "description": "Whether to enable the plugin for all sites in the network                             or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "activate_{$plugin}",
        "description": "Fires as a specific plugin is being activated.",
        "arguments": [
            {
                "type": "bool",
                "name": "$network_wide",
                "description": "Whether to enable the plugin for all sites in the network                           or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "activated_plugin",
        "description": "Fires after a plugin has been activated.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin",
                "description": "Plugin path to main plugin file with plugin data."
            },
            {
                "type": "bool",
                "name": "$network_wide",
                "description": "Whether to enable the plugin for all sites in the network                             or just the current site. Multisite only. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "plugins_api_args",
        "description": "Filters the WordPress.org Plugin Install API arguments.",
        "arguments": [
            {
                "type": "object",
                "name": "$args",
                "description": "Plugin API arguments."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The type of information being requested from the Plugin Install API."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugins_api",
        "description": "Filters the response for the current WordPress.org Plugin Install API request.",
        "arguments": [
            {
                "type": "false|object|array",
                "name": "$result",
                "description": "The result object or array. Default false."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The type of information being requested from the Plugin Install API."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Plugin API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugins_api_result",
        "description": "Filters the Plugin Install API response results.",
        "arguments": [
            {
                "type": "object|\\WP_Error",
                "name": "$res",
                "description": "Response object or WP_Error."
            },
            {
                "type": "string",
                "name": "$action",
                "description": "The type of information being requested from the Plugin Install API."
            },
            {
                "type": "object",
                "name": "$args",
                "description": "Plugin API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "allow_subdirectory_install",
        "description": "Filters whether to enable the subdirectory install feature in Multisite.",
        "arguments": [
            {
                "type": "bool",
                "name": "$allow",
                "description": "Whether to enable the subdirectory install feature in Multisite. Default is false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_update_nav_menu",
        "description": "This action is documented in wp-includes\/nav-menu.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_edit_nav_menu_walker",
        "description": "Filters the Walker class used when adding nav menu items.",
        "arguments": [
            {
                "type": "string",
                "name": "$class",
                "description": "The walker class to use. Default 'Walker_Nav_Menu_Edit'."
            },
            {
                "type": "int",
                "name": "$menu_id",
                "description": "ID of the menu being rendered."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_items_{$post_type_name}_recent",
        "description": "Filters the posts displayed in the 'Most Recent' tab of the current post type's menu items meta box.",
        "arguments": [
            {
                "type": "array",
                "name": "$most_recent",
                "description": "An array of post objects being listed."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of WP_Query arguments."
            },
            {
                "type": "array",
                "name": "$box",
                "description": "Arguments passed to wp_nav_menu_item_post_type_meta_box()."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_items_{$post_type_name}",
        "description": "Filters the posts displayed in the 'View All' tab of the current post type's menu items meta box.",
        "arguments": [
            {
                "type": "array",
                "name": "$posts",
                "description": "The posts for the current post type."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of WP_Query arguments."
            },
            {
                "type": "\\WP_Post_Type",
                "name": "$post_type",
                "description": "The current post type object for this menu item meta box."
            }
        ],
        "type": "filter"
    },
    {
        "text": "nav_menu_meta_box_object",
        "description": "This filter is documented in wp-admin\/includes\/nav-menu.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "nav_menu_meta_box_object",
        "description": "Filters whether a menu items meta box will be added for the current object type.",
        "arguments": [
            {
                "type": "object",
                "name": "$meta_box_object",
                "description": "The current object to add a menu items                                meta box for."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_edit_site_nav_links",
        "description": "Filters the links that appear on site-editing network pages.",
        "arguments": [
            {
                "type": "array",
                "name": "$links",
                "description": "{     An array of link data representing individual network admin pages.     @type array $link_slug {         An array of information about the individual link to a page.         $type string $label Label to use for the link.         $type string $url   URL, relative to <code>network_admin_url()<\/code> to use for the link.         $type string $cap   Capability required to see the link.     } }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "delete_user_form",
        "description": "This action is documented in wp-admin\/users.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "can_edit_network",
        "description": "Filters whether this network can be edited from this page.",
        "arguments": [
            {
                "type": "bool",
                "name": "$result",
                "description": "Whether the network can be edited from this page."
            },
            {
                "type": "int",
                "name": "$site_id",
                "description": "The network\/site ID to check."
            }
        ],
        "type": "filter"
    },
    {
        "text": "mu_dropdown_languages",
        "description": "Filters the languages available in the dropdown.",
        "arguments": [
            {
                "type": "array",
                "name": "$output",
                "description": "HTML output of the dropdown."
            },
            {
                "type": "array",
                "name": "$lang_files",
                "description": "Available language files."
            },
            {
                "type": "string",
                "name": "$current",
                "description": "The current language code."
            }
        ],
        "type": "filter"
    },
    {
        "text": "lang_codes",
        "description": "Filters the language codes.",
        "arguments": [
            {
                "type": "array",
                "name": "$lang_codes",
                "description": "Key\/value pair of language codes where key is the short version."
            },
            {
                "type": "string",
                "name": "$code",
                "description": "A two-letter designation of the language."
            }
        ],
        "type": "filter"
    },
    {
        "text": "make_spam_user",
        "description": "Fires after the user is marked as a SPAM user.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the user marked as SPAM."
            }
        ],
        "type": "action"
    },
    {
        "text": "make_ham_user",
        "description": "Fires after the user is marked as a HAM user. Opposite of SPAM.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the user marked as HAM."
            }
        ],
        "type": "action"
    },
    {
        "text": "new_user_email_content",
        "description": "Filters the email text sent when a user changes emails.",
        "arguments": [
            {
                "type": "string",
                "name": "$email_text",
                "description": "Text in the email."
            },
            {
                "type": "string",
                "name": "$new_user_email",
                "description": "New user email that the current user has changed to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "new_admin_email_content",
        "description": "Filters the email text sent when the site admin email is changed.",
        "arguments": [
            {
                "type": "string",
                "name": "$email_text",
                "description": "Text in the email."
            },
            {
                "type": "string",
                "name": "$new_admin_email",
                "description": "New admin email that the current administration email was changed to."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_delete_user",
        "description": "Fires before a user is deleted from the network.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "ID of the user about to be deleted from the network."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_user",
        "description": "This action is documented in wp-admin\/includes\/user.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "delete_blog",
        "description": "Fires before a site is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The site ID."
            },
            {
                "type": "bool",
                "name": "$drop",
                "description": "True if site's table should be dropped. Default is false."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_drop_tables",
        "description": "Filters the tables to drop when the site is deleted.",
        "arguments": [
            {
                "type": "array",
                "name": "$tables",
                "description": "The site tables to be dropped."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The ID of the site to drop tables for."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_delete_blog_upload_dir",
        "description": "Filters the upload base directory to delete when the site is deleted.",
        "arguments": [
            {
                "type": "string",
                "name": "$uploads['basedir']",
                "description": "Uploads path without subdirectory. @see wp_upload_dir()"
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The site ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "set-screen-option",
        "description": "Filters a screen option value before it is set.",
        "arguments": [
            {
                "type": "bool|int",
                "name": "$value",
                "description": "Screen option value. Default false to skip."
            },
            {
                "type": "string",
                "name": "$option",
                "description": "The option name."
            },
            {
                "type": "int",
                "name": "$value",
                "description": "The number of rows to use."
            }
        ],
        "type": "filter"
    },
    {
        "text": "documentation_ignore_functions",
        "description": "Filters the list of functions and classes to be ignored from the documentation lookup.",
        "arguments": [
            {
                "type": "array",
                "name": "$ignore_functions",
                "description": "Functions and classes to be ignored."
            }
        ],
        "type": "filter"
    },
    {
        "text": "got_url_rewrite",
        "description": "Filters whether URL rewriting is available.",
        "arguments": [
            {
                "type": "bool",
                "name": "$got_url_rewrite",
                "description": "Whether URL rewriting is available."
            }
        ],
        "type": "filter"
    },
    {
        "text": "got_rewrite",
        "description": "Filters whether Apache and mod_rewrite are present.",
        "arguments": [
            {
                "type": "bool",
                "name": "$got_rewrite",
                "description": "Whether Apache and mod_rewrite are present."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_submitbox_start",
        "description": "This action is documented in wp-admin\/includes\/meta-boxes.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "submitlink_box",
        "description": "Fires at the end of the Publish box in the Link editing screen.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "page_attributes_dropdown_pages_args",
        "description": "Filters the arguments used to generate a Pages drop-down element.",
        "arguments": [
            {
                "type": "array",
                "name": "$dropdown_args",
                "description": "Array of arguments used to generate the pages drop-down."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The current WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "page_attributes_meta_box_template",
        "description": "Fires immediately after the heading inside the 'Template' section of the 'Page Attributes' meta box.",
        "arguments": [
            {
                "type": "string",
                "name": "$template",
                "description": "The template used for the current post."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The current post."
            }
        ],
        "type": "action"
    },
    {
        "text": "default_page_template_title",
        "description": "Filters the title of the default page template displayed in the drop-down.",
        "arguments": [
            {
                "type": "string",
                "name": "$label",
                "description": "The display value for the default page template title."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Where the option label is displayed. Possible values                        include 'meta-box' or 'quick-edit'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editable_slug",
        "description": "This filter is documented in wp-admin\/edit-tag-form.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "post_comment_status_meta_box-options",
        "description": "Fires at the end of the Discussion meta box on the post editing screen.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object of the current post."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_edit_category_parent_dropdown_args",
        "description": "Filters the arguments for the taxonomy parent dropdown on the Post Edit page.",
        "arguments": [
            {
                "type": "array",
                "name": "$parent_dropdown_args",
                "description": "{     Optional. Array of arguments to generate parent dropdown.     @type string   $taxonomy         Name of the taxonomy to retrieve.     @type bool     $hide_if_empty    True to skip generating markup if no                                      categories are found. Default 0.     @type string   $name             Value for the 'name' attribute                                      of the select element.                                      Default &quot;new{$tax_name}_parent&quot;.     @type string   $orderby          Which column to use for ordering                                      terms. Default 'name'.     @type bool|int $hierarchical     Whether to traverse the taxonomy                                      hierarchy. Default 1.     @type string   $show_option_none Text to display for the &quot;none&quot; option.                                      Default &quot;&mdash; {$parent} &mdash;&quot;,                                      where <code>$parent<\/code> is 'parent_item'                                      taxonomy label. }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_submitbox_misc_actions",
        "description": "Fires after the 'Uploaded on' section of the Save meta box in the attachment editing screen.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "post_submitbox_minor_actions",
        "description": "Fires before the post time\/date setting in the Publish meta box.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object for the current post."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_submitbox_misc_actions",
        "description": "Fires after the post time\/date setting in the Publish meta box.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object for the current post."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_submitbox_start",
        "description": "Fires at the beginning of the publishing actions section of the Publish meta box.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "add_menu_classes",
        "description": "Filters administration menus array with classes added for top-level items.",
        "arguments": [
            {
                "type": "array",
                "name": "$menu",
                "description": "Associative array of administration menu items."
            }
        ],
        "type": "filter"
    },
    {
        "text": "_network_admin_menu",
        "description": "Fires before the administration menu loads in the Network Admin.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "_user_admin_menu",
        "description": "Fires before the administration menu loads in the User Admin.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "_admin_menu",
        "description": "Fires before the administration menu loads in the admin.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "network_admin_menu",
        "description": "Fires before the administration menu loads in the Network Admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "Empty context."
            }
        ],
        "type": "action"
    },
    {
        "text": "user_admin_menu",
        "description": "Fires before the administration menu loads in the User Admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "Empty context."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_menu",
        "description": "Fires before the administration menu loads in the admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "Empty context."
            }
        ],
        "type": "action"
    },
    {
        "text": "menu_order",
        "description": "Filters the order of administration menu items.",
        "arguments": [
            {
                "type": "array",
                "name": "$menu_order",
                "description": "An ordered array of menu items."
            }
        ],
        "type": "filter"
    },
    {
        "text": "custom_menu_order",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "admin_page_access_denied",
        "description": "Fires when access to an admin page is denied.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "media_meta",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "media_submitbox_misc_sections",
        "description": "Filters the audio and video metadata fields to be shown in the publish meta box.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "An array of the attachment metadata keys and labels."
            }
        ],
        "type": "filter"
    },
    {
        "text": "audio_submitbox_misc_sections",
        "description": "Filters the audio attachment metadata fields to be shown in the publish meta box.",
        "arguments": [
            {
                "type": "array",
                "name": "$fields",
                "description": "An array of the attachment metadata keys and labels."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_edit_form_attachment_display",
        "description": "Fires when an attachment type can't be rendered in the edit form.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "A post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "disable_captions",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "media_upload_form_url",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "media_upload_mime_type_links",
        "description": "Filters the media upload mime type list items.",
        "arguments": [
            {
                "type": "array",
                "name": "$type_links",
                "description": "An array of list items containing mime type link HTML."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_form_url",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "media_upload_form_url",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "disable_captions",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "type_url_form_media",
        "description": "Filters the insert media from URL form HTML.",
        "arguments": [
            {
                "type": "string",
                "name": "$form_html",
                "description": "The insert from URL form HTML."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_form_url",
        "description": "Filters the media upload form action URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$form_action_url",
                "description": "The media upload form action URL."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of media. Default 'file'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upload_ui_over_quota",
        "description": "Fires when an upload will exceed the defined upload space quota for a network site.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "pre-upload-ui",
        "description": "Fires just before the legacy (pre-3.5.0) upload interface is loaded.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "upload_post_params",
        "description": "Filters the media upload post parameters.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_params",
                "description": "An array of media upload parameters used by Plupload."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plupload_init",
        "description": "Filters the default Plupload settings.",
        "arguments": [
            {
                "type": "array",
                "name": "$plupload_init",
                "description": "An array of default settings used by Plupload."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre-plupload-upload-ui",
        "description": "Fires before the upload interface loads.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "post-plupload-upload-ui",
        "description": "Fires after the upload interface loads.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "pre-html-upload-ui",
        "description": "Fires before the upload button in the media upload interface.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "post-html-upload-ui",
        "description": "Fires after the upload button in the media upload interface.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "post-upload-ui",
        "description": "Fires on the post upload UI screen.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "get_media_item_args",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "attachment_fields_to_edit",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "media_meta",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_media_item_args",
        "description": "Filters the arguments used to retrieve an image for the edit image form.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_meta",
        "description": "Filters the media metadata.",
        "arguments": [
            {
                "type": "string",
                "name": "$media_dims",
                "description": "The HTML markup containing the media dimensions."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The WP_Post attachment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_fields_to_edit",
        "description": "Filters the attachment fields to edit.",
        "arguments": [
            {
                "type": "array",
                "name": "$form_fields",
                "description": "An array of attachment form fields."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The WP_Post attachment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_size_names_choose",
        "description": "Filters the names and labels of the default image sizes.",
        "arguments": [
            {
                "type": "array",
                "name": "$size_names",
                "description": "Array of image sizes and their names. Default values                          include 'Thumbnail', 'Medium', 'Large', 'Full Size'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$type}_send_to_editor_url",
        "description": "Filters the URL sent to the editor for a specific media type.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "HTML markup sent to the editor."
            },
            {
                "type": "string",
                "name": "$src",
                "description": "Media source URL."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "Media title."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_send_to_editor_url",
        "description": "Filters the image URL sent to the editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "HTML markup sent to the editor for an image."
            },
            {
                "type": "string",
                "name": "$src",
                "description": "Image source URL."
            },
            {
                "type": "string",
                "name": "$alt",
                "description": "Image alternate, or alt, text."
            },
            {
                "type": "string",
                "name": "$align",
                "description": "The image alignment. Default 'alignnone'. Possible values include                      'alignleft', 'aligncenter', 'alignright', 'alignnone'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_fields_to_save",
        "description": "Filters the attachment fields to be saved.",
        "arguments": [
            {
                "type": "array",
                "name": "$post",
                "description": "An array of post data."
            },
            {
                "type": "array",
                "name": "$attachment",
                "description": "An array of attachment metadata."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_send_to_editor",
        "description": "Filters the HTML markup for a media item sent to the editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "HTML markup for a media item sent to the editor."
            },
            {
                "type": "int",
                "name": "$send_id",
                "description": "The first key from the $_POST['send'] data."
            },
            {
                "type": "array",
                "name": "$attachment",
                "description": "Array of attachment metadata."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$type}_upload_iframe_src",
        "description": "Filters the upload iframe source URL for a specific media type.",
        "arguments": [
            {
                "type": "string",
                "name": "$upload_iframe_src",
                "description": "The upload iframe source URL by type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_buttons_context",
        "description": "Filters the legacy (pre-3.5.0) media buttons.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "Media buttons context. Default empty."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_enqueue_scripts",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_styles-media-upload-popup",
        "description": "Fires when admin styles enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_styles",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts-media-upload-popup",
        "description": "Fires when admin scripts enqueued for the legacy (pre-3.5.0) media upload popup are printed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_head-media-upload-popup",
        "description": "Fires when scripts enqueued for the admin header for the legacy (pre-3.5.0) media upload popup are printed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_head",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_head_{$content_func}",
        "description": "Fires in the admin header for each specific form tab in the legacy (pre-3.5.0) media upload popup.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_footer_scripts",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "image_add_caption_text",
        "description": "Filters the caption text.",
        "arguments": [
            {
                "type": "string",
                "name": "$caption",
                "description": "The original caption text."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "The attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "disable_captions",
        "description": "Filters whether to disable captions.",
        "arguments": [
            {
                "type": "bool",
                "name": "$bool",
                "description": "Whether to disable appending captions. Returning true to the filter                   will disable captions. Default empty string."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_add_caption_shortcode",
        "description": "Filters the image HTML markup including the caption shortcode.",
        "arguments": [
            {
                "type": "string",
                "name": "$shcode",
                "description": "The image HTML markup with caption shortcode."
            },
            {
                "type": "string",
                "name": "$html",
                "description": "The image HTML markup."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_send_to_editor",
        "description": "Filters the image HTML markup to send to the editor.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "The image HTML markup to send."
            },
            {
                "type": "int",
                "name": "$id",
                "description": "The attachment id."
            },
            {
                "type": "string",
                "name": "$caption",
                "description": "The image caption."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "The image title."
            },
            {
                "type": "string",
                "name": "$align",
                "description": "The image alignment."
            },
            {
                "type": "string",
                "name": "$url",
                "description": "The image source URL."
            },
            {
                "type": "string|array",
                "name": "$size",
                "description": "Size of image. Image size or array of width and height values                              (in that order). Default 'medium'."
            },
            {
                "type": "string",
                "name": "$alt",
                "description": "The image alternative, or alt, text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_upload_default_tab",
        "description": "This filter is documented in wp-admin\/media-upload.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "media_upload_tabs",
        "description": "Filters the available tabs in the legacy (pre-3.5.0) media popup.",
        "arguments": [
            {
                "type": "array",
                "name": "$_default_tabs",
                "description": "An array of media tabs."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_image_to_edit_filesystempath",
        "description": "Filters the path to the current image.",
        "arguments": [
            {
                "type": "string",
                "name": "$path",
                "description": "Path to the current image."
            },
            {
                "type": "string",
                "name": "$attachment_id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Size of the image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_image_to_edit_attachmenturl",
        "description": "Filters the image URL if not in the local filesystem.",
        "arguments": [
            {
                "type": "string",
                "name": "$image_url",
                "description": "Current image URL."
            },
            {
                "type": "string",
                "name": "$attachment_id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Size of the image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_image_to_edit_path",
        "description": "Filters the returned path or URL of the current image.",
        "arguments": [
            {
                "type": "string|bool",
                "name": "$filepath",
                "description": "File path or URL to current image, or false."
            },
            {
                "type": "string",
                "name": "$attachment_id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Size of the image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load_image_to_edit",
        "description": "Filters the current image being loaded for editing.",
        "arguments": [
            {
                "type": "resource",
                "name": "$image",
                "description": "Current image."
            },
            {
                "type": "string",
                "name": "$attachment_id",
                "description": "Attachment ID."
            },
            {
                "type": "string",
                "name": "$size",
                "description": "Image size."
            }
        ],
        "type": "filter"
    },
    {
        "text": "file_is_displayable_image",
        "description": "Filters whether the current image is displayable in the browser.",
        "arguments": [
            {
                "type": "bool",
                "name": "$result",
                "description": "Whether the image can be displayed. Default true."
            },
            {
                "type": "string",
                "name": "$path",
                "description": "Path to the image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_read_image_metadata_types",
        "description": "Filters the image types to check for exif data.",
        "arguments": [
            {
                "type": "array",
                "name": "$image_types",
                "description": "Image types to check for exif data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_read_image_metadata",
        "description": "Filters the array of meta data read from an image's exif data.",
        "arguments": [
            {
                "type": "array",
                "name": "$meta",
                "description": "Image meta data."
            },
            {
                "type": "string",
                "name": "$file",
                "description": "Path to image file."
            },
            {
                "type": "int",
                "name": "$sourceImageType",
                "description": "Type of image."
            },
            {
                "type": "array",
                "name": "$iptc",
                "description": "IPTC data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "intermediate_image_sizes_advanced",
        "description": "Filters the image sizes automatically generated when uploading an image.",
        "arguments": [
            {
                "type": "array",
                "name": "$sizes",
                "description": "An associative array of image sizes."
            },
            {
                "type": "array",
                "name": "$metadata",
                "description": "An associative array of image metadata: width, height, file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "attachment_thumbnail_args",
        "description": "Filters the parameters for the attachment thumbnail creation.",
        "arguments": [
            {
                "type": "array",
                "name": "$image_attachment",
                "description": "An array of parameters to create the thumbnail."
            },
            {
                "type": "array",
                "name": "$metadata",
                "description": "Current attachment metadata."
            },
            {
                "type": "array",
                "name": "$uploaded",
                "description": "An array containing the thumbnail path and url."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_generate_attachment_metadata",
        "description": "Filters the generated attachment meta data.",
        "arguments": [
            {
                "type": "array",
                "name": "$metadata",
                "description": "An array of attachment meta data."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Current attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_image_editor_before_change",
        "description": "Filters the WP_Image_Editor instance before applying changes to the image.",
        "arguments": [
            {
                "type": "\\WP_Image_Editor",
                "name": "$image",
                "description": "WP_Image_Editor instance."
            },
            {
                "type": "array",
                "name": "$changes",
                "description": "Array of change operations."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_edit_before_change",
        "description": "Filters the GD image resource before applying changes to the image.",
        "arguments": [
            {
                "type": "resource",
                "name": "$image",
                "description": "GD image resource."
            },
            {
                "type": "array",
                "name": "$changes",
                "description": "Array of change operations."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_editor_save_pre",
        "description": "This filter is documented in wp-admin\/includes\/image-edit.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_save_image_editor_file",
        "description": "Filters whether to skip saving the image file.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$override",
                "description": "Value to return instead of saving. Default null."
            },
            {
                "type": "string",
                "name": "$filename",
                "description": "Name of the file to be saved."
            },
            {
                "type": "\\WP_Image_Editor",
                "name": "$image",
                "description": "WP_Image_Editor instance."
            },
            {
                "type": "string",
                "name": "$mime_type",
                "description": "Image mime type."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_save_pre",
        "description": "This filter is documented in wp-admin\/includes\/image-edit.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_save_image_file",
        "description": "Filters whether to skip saving the image file.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$override",
                "description": "Value to return instead of saving. Default null."
            },
            {
                "type": "string",
                "name": "$filename",
                "description": "Name of the file to be saved."
            },
            {
                "type": "\\WP_Image_Editor",
                "name": "$image",
                "description": "WP_Image_Editor instance."
            },
            {
                "type": "string",
                "name": "$mime_type",
                "description": "Image mime type."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "jpeg_quality",
        "description": "This filter is documented in wp-includes\/class-wp-image-editor.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "image_editor_save_pre",
        "description": "Filters the WP_Image_Editor instance for the image to be streamed to the browser.",
        "arguments": [
            {
                "type": "\\WP_Image_Editor",
                "name": "$image",
                "description": "WP_Image_Editor instance."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "image_save_pre",
        "description": "Filters the GD image resource to be streamed to the browser.",
        "arguments": [
            {
                "type": "resource",
                "name": "$image",
                "description": "Image resource to be streamed."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "request_filesystem_credentials",
        "description": "Filters the filesystem credentials form output.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$output",
                "description": "Form output to return instead. Default empty."
            },
            {
                "type": "string",
                "name": "$form_post",
                "description": "The URL to post the form to."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Chosen type of filesystem."
            },
            {
                "type": "bool",
                "name": "$error",
                "description": "Whether the current request has failed to connect.                                             Default false."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Full path to the directory that is tested for                                             being writable."
            },
            {
                "type": "bool",
                "name": "$allow_relaxed_file_ownership",
                "description": "Whether to allow Group\/World writable.                                             Default false."
            },
            {
                "type": "array",
                "name": "$extra_fields",
                "description": "Extra POST fields."
            }
        ],
        "type": "filter"
    },
    {
        "text": "fs_ftp_connection_types",
        "description": "Filters the connection types to output to the filesystem credentials form.",
        "arguments": [
            {
                "type": "array",
                "name": "$types",
                "description": "Types of connections."
            },
            {
                "type": "array",
                "name": "$credentials",
                "description": "Credentials to connect with."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "Chosen filesystem method."
            },
            {
                "type": "object",
                "name": "$error",
                "description": "Error object."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Full path to the directory that is tested                            for being writable."
            }
        ],
        "type": "filter"
    },
    {
        "text": "filesystem_method",
        "description": "Filters the filesystem method to use.",
        "arguments": [
            {
                "type": "string",
                "name": "$method",
                "description": "Filesystem method to return."
            },
            {
                "type": "array",
                "name": "$args",
                "description": "An array of connection details for the method."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Full path to the directory that is tested for being writable."
            },
            {
                "type": "bool",
                "name": "$allow_relaxed_file_ownership",
                "description": "Whether to allow Group\/World writable."
            }
        ],
        "type": "filter"
    },
    {
        "text": "filesystem_method_file",
        "description": "Filters the path for a specific filesystem method class file.",
        "arguments": [
            {
                "type": "string",
                "name": "$path",
                "description": "Path to the specific filesystem method class file."
            },
            {
                "type": "string",
                "name": "$method",
                "description": "The filesystem method to use."
            }
        ],
        "type": "filter"
    },
    {
        "text": "unzip_file_use_ziparchive",
        "description": "Filters whether to use ZipArchive to unzip archives.",
        "arguments": [
            {
                "type": "bool",
                "name": "$ziparchive",
                "description": "Whether to use ZipArchive. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$action}_prefilter",
        "description": "Filters the data for a file before it is uploaded to WordPress.",
        "arguments": [
            {
                "type": "array",
                "name": "$file",
                "description": "An array of data for a single file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_handle_upload",
        "description": "Filters the data array for the uploaded file.",
        "arguments": [
            {
                "type": "array",
                "name": "$upload",
                "description": "{     Array of upload data.     @type string $file Filename of the newly-uploaded file.     @type string $url  URL of the uploaded file.     @type string $type File type. }"
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The type of upload action. Values include 'upload' or 'sideload'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "export_wp",
        "description": "Fires at the beginning of an export, before any headers are sent.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of export arguments."
            }
        ],
        "type": "action"
    },
    {
        "text": "export_wp_filename",
        "description": "Filters the export filename.",
        "arguments": [
            {
                "type": "string",
                "name": "$wp_filename",
                "description": "The name of the file for download."
            },
            {
                "type": "string",
                "name": "$sitename",
                "description": "The site name."
            },
            {
                "type": "string",
                "name": "$date",
                "description": "Today's date, formatted."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rss2_head",
        "description": "This action is documented in wp-includes\/feed-rss2.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "the_title_rss",
        "description": "This filter is documented in wp-includes\/feed.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_content_export",
        "description": "Filters the post content used for WXR exports.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_content",
                "description": "Content of the current post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_excerpt_export",
        "description": "Filters the post excerpt used for WXR exports.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_excerpt",
                "description": "Excerpt for the current post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wxr_export_skip_postmeta",
        "description": "Filters whether to selectively skip post meta used for WXR exports.",
        "arguments": [
            {
                "type": "bool",
                "name": "$skip",
                "description": "Whether to skip the current post meta. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Current meta key."
            },
            {
                "type": "object",
                "name": "$meta",
                "description": "Current meta object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wxr_export_skip_commentmeta",
        "description": "Filters whether to selectively skip comment meta used for WXR exports.",
        "arguments": [
            {
                "type": "bool",
                "name": "$skip",
                "description": "Whether to skip the current comment meta. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Current meta key."
            },
            {
                "type": "object",
                "name": "$meta",
                "description": "Current meta object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wxr_export_skip_termmeta",
        "description": "Filters whether to selectively skip term meta used for WXR exports.",
        "arguments": [
            {
                "type": "bool",
                "name": "$skip",
                "description": "Whether to skip the current piece of term meta. Default false."
            },
            {
                "type": "string",
                "name": "$meta_key",
                "description": "Current meta key."
            },
            {
                "type": "object",
                "name": "$meta",
                "description": "Current meta object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_updated_messages",
        "description": "Filters the messages displayed when a tag is updated.",
        "arguments": [
            {
                "type": "array",
                "name": "$messages",
                "description": "The messages to be displayed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "pre_user_search",
        "description": "",
        "arguments": [],
        "type": "action_reference"
    },
    {
        "text": "wp_create_thumbnail",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_others_drafts",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "get_editable_authors",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "browse-happy-notice",
        "description": "Filters the notice output for the 'Browse Happy' nag meta box.",
        "arguments": [
            {
                "type": "string",
                "name": "$notice",
                "description": "The notice content."
            },
            {
                "type": "array",
                "name": "$response",
                "description": "An array containing web browser information."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_primary_link",
        "description": "Filters the primary link URL for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The widget's primary link URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_primary_feed",
        "description": "Filters the primary feed URL for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The widget's primary feed URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_primary_title",
        "description": "Filters the primary link title for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Title attribute for the widget's primary link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_secondary_link",
        "description": "Filters the secondary link URL for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$link",
                "description": "The widget's secondary link URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_secondary_feed",
        "description": "Filters the secondary feed URL for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "The widget's secondary feed URL."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_secondary_title",
        "description": "Filters the secondary link title for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Title attribute for the widget's secondary link."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_secondary_items",
        "description": "Filters the number of secondary link items for the 'WordPress News' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$items",
                "description": "How many items to show in the secondary feed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_recent_posts_query_args",
        "description": "Filters the query arguments used for the Recent Posts widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$query_args",
                "description": "The arguments passed to WP_Query to produce the list of posts."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comment_row_actions",
        "description": "Filters the action links displayed for each comment in the 'Recent Comments' dashboard widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of comment actions. Default actions include:                            'Approve', 'Unapprove', 'Edit', 'Reply', 'Spam',                            'Delete', and 'Trash'."
            },
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "The comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dashboard_recent_drafts_query_args",
        "description": "Filters the post query arguments for the 'Recent Drafts' dashboard widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$query_args",
                "description": "The query arguments for the 'Recent Drafts' dashboard widget."
            }
        ],
        "type": "filter"
    },
    {
        "text": "enter_title_here",
        "description": "This filter is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wpmuadminresult",
        "description": "Fires in the Network Admin 'Right Now' dashboard widget just before the user and site search form fields.",
        "arguments": [
            {
                "type": "null",
                "name": "$unused",
                "description": ""
            }
        ],
        "type": "action"
    },
    {
        "text": "mu_rightnow_end",
        "description": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "mu_activity_box_end",
        "description": "Fires at the end of the 'Right Now' widget in the Network Admin dashboard.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "dashboard_glance_items",
        "description": "Filters the array of extra elements to list in the 'At a Glance' dashboard widget.",
        "arguments": [
            {
                "type": "array",
                "name": "$items",
                "description": "Array of extra 'At a Glance' widget items."
            }
        ],
        "type": "filter"
    },
    {
        "text": "privacy_on_link_title",
        "description": "Filters the link title attribute for the 'Search Engines Discouraged' message displayed in the 'At a Glance' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$title",
                "description": "Default attribute text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "privacy_on_link_text",
        "description": "Filters the link label for the 'Search Engines Discouraged' message displayed in the 'At a Glance' dashboard widget.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "Default text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "rightnow_end",
        "description": "Fires at the end of the 'At a Glance' dashboard widget.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "activity_box_end",
        "description": "Fires at the end of the 'At a Glance' dashboard widget.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_network_dashboard_setup",
        "description": "Fires after core widgets for the Network Admin dashboard have been registered.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_network_dashboard_widgets",
        "description": "Filters the list of widgets to load for the Network Admin dashboard.",
        "arguments": [
            {
                "type": "array",
                "name": "$dashboard_widgets",
                "description": "An array of dashboard widgets."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_user_dashboard_setup",
        "description": "Fires after core widgets for the User Admin dashboard have been registered.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_user_dashboard_widgets",
        "description": "Filters the list of widgets to load for the User Admin dashboard.",
        "arguments": [
            {
                "type": "array",
                "name": "$dashboard_widgets",
                "description": "An array of dashboard widgets."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_dashboard_setup",
        "description": "Fires after core widgets for the admin dashboard have been registered.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_dashboard_widgets",
        "description": "Filters the list of widgets to load for the admin dashboard.",
        "arguments": [
            {
                "type": "array",
                "name": "$dashboard_widgets",
                "description": "An array of dashboard widgets."
            }
        ],
        "type": "filter"
    },
    {
        "text": "do_meta_boxes",
        "description": "This action is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "do_meta_boxes",
        "description": "This action is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comment_edit_pre",
        "description": "Filters the comment content before editing.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment->comment_content",
                "description": "Comment content."
            }
        ],
        "type": "filter"
    },
    {
        "text": "get_role_list",
        "description": "Filters the returned array of roles for a user.",
        "arguments": [
            {
                "type": "array",
                "name": "$role_list",
                "description": "An array of user roles."
            },
            {
                "type": "\\WP_User",
                "name": "$user_object",
                "description": "A WP_User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "user_row_actions",
        "description": "Filters the action links displayed under each user in the Users list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of action links to be displayed.                             Default 'Edit', 'Delete' for single site, and                             'Edit', 'Remove' for Multisite."
            },
            {
                "type": "\\WP_User",
                "name": "$user_object",
                "description": "WP_User object for the currently-listed user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_users_custom_column",
        "description": "Filters the display output of custom columns in the Users list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$output",
                "description": "Custom column output. Default empty."
            },
            {
                "type": "string",
                "name": "$column_name",
                "description": "Column name."
            },
            {
                "type": "int",
                "name": "$user_id",
                "description": "ID of the currently-listed user."
            }
        ],
        "type": "filter"
    },
    {
        "text": "restrict_manage_users",
        "description": "Fires just before the closing div containing the bulk role-change controls in the Users list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$which",
                "description": "The location of the extra table nav markup: 'top' or 'bottom'."
            }
        ],
        "type": "action"
    },
    {
        "text": "users_list_table_query_args",
        "description": "Filters the query arguments used to retrieve users for the current users list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "Arguments passed to WP_User_Query to retrieve items for the current                    users list table."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upgrader_package_options",
        "description": "Filters the package options before running an update.",
        "arguments": [
            {
                "type": "array",
                "name": "$options",
                "description": "{     Options used by the upgrader.     @type string $package                     Package for update.     @type string $destination                 Update location.     @type bool   $clear_destination           Clear the destination resource.     @type bool   $clear_working               Clear the working resource.     @type bool   $abort_if_destination_exists Abort if the Destination directory exists.     @type bool   $is_multi                    Whether the upgrader is running multiple times.     @type array  $hook_extra {         Extra hook arguments.         @type string $action               Type of action. Default 'update'.         @type string $type                 Type of update process. Accepts 'plugin', 'theme', or 'core'.         @type bool   $bulk                 Whether the update process is a bulk update. Default true.         @type string $plugin               The base plugin path from the plugins directory.         @type string $theme                The stylesheet or template name of the theme.         @type string $language_update_type The language pack update type. Accepts 'plugin', 'theme',                                            or 'core'.         @type object $language_update      The language pack update offer.     } }"
            }
        ],
        "type": "filter"
    },
    {
        "text": "upgrader_process_complete",
        "description": "Fires when the upgrader process is complete.",
        "arguments": [
            {
                "type": "\\WP_Upgrader",
                "name": "$this",
                "description": "WP_Upgrader instance. In other contexts, $this, might be a                          Theme_Upgrader, Plugin_Upgrader, Core_Upgrade, or Language_Pack_Upgrader instance."
            },
            {
                "type": "array",
                "name": "$hook_extra",
                "description": "{     Array of bulk item update data.     @type string $action       Type of action. Default 'update'.     @type string $type         Type of update process. Accepts 'plugin', 'theme', 'translation', or 'core'.     @type bool   $bulk         Whether the update process is a bulk update. Default true.     @type array  $plugins      Array of the basename paths of the plugins' main files.     @type array  $themes       The theme slugs.     @type array  $translations {         Array of translations update data.         @type string $language The locale the translation is for.         @type string $type     Type of translation. Accepts 'plugin', 'theme', or 'core'.         @type string $slug     Text domain the translation is for. The slug of a theme\/plugin or                                'default' for core translations.         @type string $version  The version of a theme, plugin, or core.     } }"
            }
        ],
        "type": "action"
    },
    {
        "text": "upgrader_pre_install",
        "description": "Filters the install response before the installation has started.",
        "arguments": [
            {
                "type": "bool|\\WP_Error",
                "name": "$response",
                "description": "Response."
            },
            {
                "type": "array",
                "name": "$hook_extra",
                "description": "Extra arguments passed to hooked filters."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upgrader_source_selection",
        "description": "Filters the source file location for the upgrade package.",
        "arguments": [
            {
                "type": "string",
                "name": "$source",
                "description": "File source location."
            },
            {
                "type": "string",
                "name": "$remote_source",
                "description": "Remote file source location."
            },
            {
                "type": "\\WP_Upgrader",
                "name": "$this",
                "description": "WP_Upgrader instance."
            },
            {
                "type": "array",
                "name": "$hook_extra",
                "description": "Extra arguments passed to hooked filters."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upgrader_clear_destination",
        "description": "Filters whether the upgrader cleared the destination.",
        "arguments": [
            {
                "type": "mixed",
                "name": "$removed",
                "description": "Whether the destination was cleared. true on success, WP_Error on failure"
            },
            {
                "type": "string",
                "name": "$local_destination",
                "description": "The local package destination."
            },
            {
                "type": "string",
                "name": "$remote_destination",
                "description": "The remote package destination."
            },
            {
                "type": "array",
                "name": "$hook_extra",
                "description": "Extra arguments passed to hooked filters."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upgrader_post_install",
        "description": "Filters the install response after the installation has finished.",
        "arguments": [
            {
                "type": "bool",
                "name": "$response",
                "description": "Install response."
            },
            {
                "type": "array",
                "name": "$hook_extra",
                "description": "Extra arguments passed to hooked filters."
            },
            {
                "type": "array",
                "name": "$result",
                "description": "Installation result data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upgrader_pre_download",
        "description": "Filters whether to return the package.",
        "arguments": [
            {
                "type": "bool",
                "name": "$reply",
                "description": "Whether to bail without returning the package.                             Default false."
            },
            {
                "type": "string",
                "name": "$package",
                "description": "The package file name."
            },
            {
                "type": "\\WP_Upgrader",
                "name": "$this",
                "description": "The WP_Upgrader instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_action_links",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-ms-themes-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "theme_action_links_{$stylesheet}",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-ms-themes-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "theme_install_actions",
        "description": "Filters the install action links for a theme in the Install Themes list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of theme action hyperlinks. Defaults are                          links to Install Now, Preview, and Details."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "Theme object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_themes_table_header",
        "description": "Fires in the Install Themes list table header.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "install_themes_tabs",
        "description": "This filter is documented in wp-admin\/theme-install.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "install_themes_nonmenu_tabs",
        "description": "Filters tabs not associated with a menu item on the Install Themes screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$nonmenu_tabs",
                "description": "The tabs that don't have a menu item on                            the Install Themes screen."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_themes_table_api_args_{$tab}",
        "description": "Filters API request arguments for each Install Themes screen tab.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of themes API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "quick_edit_custom_box",
        "description": "This action is documented in wp-admin\/includes\/class-wp-posts-list-table.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "manage_{$this->screen->taxonomy}_custom_column",
        "description": "Filters the displayed columns in the terms list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$string",
                "description": "Blank string."
            },
            {
                "type": "string",
                "name": "$column_name",
                "description": "Name of the column."
            },
            {
                "type": "int",
                "name": "$term_id",
                "description": "Term ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editable_slug",
        "description": "This filter is documented in wp-admin\/edit-tag-form.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "tag_row_actions",
        "description": "Filters the action links displayed for each term in the Tags list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of action links to be displayed. Default                        'Edit', 'Quick Edit', 'Delete', and 'View'."
            },
            {
                "type": "\\WP_Term",
                "name": "$tag",
                "description": "Term object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$taxonomy}_row_actions",
        "description": "Filters the action links displayed for each term in the terms list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of action links to be displayed. Default                        'Edit', 'Quick Edit', 'Delete', and 'View'."
            },
            {
                "type": "\\WP_Term",
                "name": "$tag",
                "description": "Term object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "term_name",
        "description": "Filters display of the term name in the terms list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$pad_tag_name",
                "description": "The term name, padded if not top-level."
            },
            {
                "type": "\\WP_Term",
                "name": "$tag",
                "description": "Term object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "editable_slug",
        "description": "This filter is documented in wp-admin\/edit-tag-form.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "edit_tags_per_page",
        "description": "Filters the number of terms displayed per page for the Tags list table.",
        "arguments": [
            {
                "type": "int",
                "name": "$tags_per_page",
                "description": "Number of tags to be displayed. Default 20."
            }
        ],
        "type": "filter"
    },
    {
        "text": "tagsperpage",
        "description": "Filters the number of terms displayed per page for the Tags list table.",
        "arguments": [
            {
                "type": "int",
                "name": "$tags_per_page",
                "description": "Number of tags to be displayed. Default 20."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_categories_per_page",
        "description": "Filters the number of terms displayed per page for the Categories list table.",
        "arguments": [
            {
                "type": "int",
                "name": "$tags_per_page",
                "description": "Number of categories to be displayed. Default 20."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_icon_image_sizes",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-site-icon.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "site_icon_image_sizes",
        "description": "Filters the different dimensions that a site icon is saved in.",
        "arguments": [
            {
                "type": "array",
                "name": "$site_icon_sizes",
                "description": "Sizes available for the Site Icon."
            }
        ],
        "type": "filter"
    },
    {
        "text": "site_icon_attachment_metadata",
        "description": "Filters the site icon attachment metadata.",
        "arguments": [
            {
                "type": "array",
                "name": "$metadata",
                "description": "Attachment metadata."
            }
        ],
        "type": "filter"
    },
    {
        "text": "view_mode_post_types",
        "description": "Filters the post types that have different view mode options.",
        "arguments": [
            {
                "type": "array",
                "name": "$view_mode_post_types",
                "description": "Array of post types that can change view modes.                                    Default hierarchical post types with show_ui on."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_per_page",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-comments-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "edit_categories_per_page",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-terms-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "{$option}",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "edit_posts_per_page",
        "description": "This filter is documented in wp-admin\/includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "screen_options_show_submit",
        "description": "Filters whether to show the Screen Options submit button.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show_button",
                "description": "Whether to show Screen Options submit button.                               Default false."
            },
            {
                "type": "\\WP_Screen",
                "name": "$this",
                "description": "Current WP_Screen instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "screen_settings",
        "description": "Filters the screen settings text displayed in the Screen Options tab.",
        "arguments": [
            {
                "type": "string",
                "name": "$screen_settings",
                "description": "Screen settings."
            },
            {
                "type": "\\WP_Screen",
                "name": "$this",
                "description": "WP_Screen object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "screen_options_show_screen",
        "description": "Filters whether to show the Screen Options tab.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show_screen",
                "description": "Whether to show Screen Options tab.                               Default true."
            },
            {
                "type": "\\WP_Screen",
                "name": "$this",
                "description": "Current WP_Screen instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "contextual_help_list",
        "description": "Filters the legacy contextual help list.",
        "arguments": [
            {
                "type": "array",
                "name": "$old_compat_help",
                "description": "Old contextual help."
            },
            {
                "type": "\\WP_Screen",
                "name": "$this",
                "description": "Current WP_Screen instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "contextual_help",
        "description": "Filters the legacy contextual help text.",
        "arguments": [
            {
                "type": "string",
                "name": "$old_help",
                "description": "Help text that appears on the screen."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "Screen ID."
            },
            {
                "type": "\\WP_Screen",
                "name": "$this",
                "description": "Current WP_Screen instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_contextual_help",
        "description": "Filters the default legacy contextual help text.",
        "arguments": [
            {
                "type": "string",
                "name": "$old_help_default",
                "description": "Default contextual help text."
            }
        ],
        "type": "filter"
    },
    {
        "text": "screen_layout_columns",
        "description": "Filters the array of screen layout columns.",
        "arguments": [
            {
                "type": "array",
                "name": "$empty_columns",
                "description": "Empty array."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "Screen ID."
            },
            {
                "type": "\\WP_Screen",
                "name": "$this",
                "description": "Current WP_Screen instance."
            }
        ],
        "type": "filter"
    },
    {
        "text": "current_screen",
        "description": "Fires after the current screen has been set.",
        "arguments": [
            {
                "type": "\\WP_Screen",
                "name": "$current_screen",
                "description": "Current WP_Screen object."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_enqueue_scripts",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_styles-press-this.php",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_styles",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts-press-this.php",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_head-press-this.php",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_head",
        "description": "This action is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_body_class",
        "description": "This filter is documented in wp-admin\/admin-header.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "admin_footer",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_footer_scripts-press-this.php",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_footer_scripts",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_footer-press-this.php",
        "description": "This action is documented in wp-admin\/admin-footer.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "press_this_suggested_html",
        "description": "Filters the default HTML tags used in the suggested content for the editor.",
        "arguments": [
            {
                "type": "array",
                "name": "$default_html",
                "description": "Associative array with three possible keys:                                - 'quote' where %1$s is replaced with the site description or the selected content.                                - 'link' where %1$s is link href, %2$s is link text, usually the source page title.                                - 'embed' which contains an [embed] shortcode when the source page offers embeddable content."
            },
            {
                "type": "array",
                "name": "$data",
                "description": "Associative array containing the data from the source page."
            }
        ],
        "type": "filter"
    },
    {
        "text": "enable_press_this_media_discovery",
        "description": "Filters whether to enable in-source media discovery in Press This.",
        "arguments": [
            {
                "type": "bool",
                "name": "$enable",
                "description": "Whether to enable media discovery."
            }
        ],
        "type": "filter"
    },
    {
        "text": "press_this_data",
        "description": "Filters the Press This data array.",
        "arguments": [
            {
                "type": "array",
                "name": "$data",
                "description": "Press This Data array."
            }
        ],
        "type": "filter"
    },
    {
        "text": "press_this_save_post",
        "description": "Filters the post data of a Press This post before saving\/updating.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_data",
                "description": "The post data."
            }
        ],
        "type": "filter"
    },
    {
        "text": "press_this_save_redirect",
        "description": "Filters the URL to redirect to when Press This saves.",
        "arguments": [
            {
                "type": "string",
                "name": "$url",
                "description": "Redirect URL. If <code>$status<\/code> is 'publish', this will be the post permalink.                        Otherwise, the default is false resulting in no redirect."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Post ID."
            },
            {
                "type": "string",
                "name": "$status",
                "description": "Post status."
            }
        ],
        "type": "filter"
    },
    {
        "text": "press_this_redirect_in_parent",
        "description": "Filters whether or not Press This should redirect the user in the parent window upon save.",
        "arguments": [
            {
                "type": "bool",
                "name": "$redirect",
                "description": "Whether to redirect in parent window or not. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "quick_edit_show_taxonomy",
        "description": "Filters whether the current taxonomy should be shown in the Quick Edit panel.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show_in_quick_edit",
                "description": "Whether to show the current taxonomy in Quick Edit."
            },
            {
                "type": "string",
                "name": "$taxonomy_name",
                "description": "Taxonomy name."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type of current Quick Edit post."
            }
        ],
        "type": "filter"
    },
    {
        "text": "quick_edit_dropdown_pages_args",
        "description": "Filters the arguments used to generate the Quick Edit page-parent drop-down.",
        "arguments": [
            {
                "type": "array",
                "name": "$dropdown_args",
                "description": "An array of arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "default_page_template_title",
        "description": "This filter is documented in wp-admin\/includes\/meta-boxes.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "bulk_edit_custom_box",
        "description": "Fires once for each column in Bulk Edit mode.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "Name of the column to edit."
            },
            {
                "type": "\\WP_Post",
                "name": "$post_type",
                "description": "The post type slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "quick_edit_custom_box",
        "description": "Fires once for each column in Quick Edit mode.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "Name of the column to edit."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "page_row_actions",
        "description": "Filters the array of row action links on the Pages list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of row action links. Defaults are                         'Edit', 'Quick Edit', 'Restore, 'Trash',                         'Delete Permanently', 'Preview', and 'View'."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_row_actions",
        "description": "Filters the array of row action links on the Posts list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of row action links. Defaults are                         'Edit', 'Quick Edit', 'Restore, 'Trash',                         'Delete Permanently', 'Preview', and 'View'."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "The post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_pages_custom_column",
        "description": "Fires in each custom column on the Posts list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "The name of the column to display."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The current post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "manage_posts_custom_column",
        "description": "Fires in each custom column in the Posts list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "The name of the column to display."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The current post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "manage_{$post->post_type}_posts_custom_column",
        "description": "Fires for each custom column of a specific post type in the Posts list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "The name of the column to display."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "The current post ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "post_date_column_time",
        "description": "Filters the published time of the post.",
        "arguments": [
            {
                "type": "string",
                "name": "$t_time",
                "description": "The published time."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            },
            {
                "type": "string",
                "name": "$column_name",
                "description": "The column name."
            },
            {
                "type": "string",
                "name": "$mode",
                "description": "The list display mode ('excerpt' or 'list')."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_date_column_time",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-posts-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "manage_taxonomies_for_{$post_type}_columns",
        "description": "Filters the taxonomy columns in the Posts list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "Array of taxonomies to show columns for."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_pages_columns",
        "description": "Filters the columns displayed in the Pages list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_columns",
                "description": "An array of column names."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_posts_columns",
        "description": "Filters the columns displayed in the Posts list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$posts_columns",
                "description": "An array of column names."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_{$post_type}_posts_columns",
        "description": "Filters the columns displayed in the Posts list table for a specific post type.",
        "arguments": [
            {
                "type": "array",
                "name": "$post_columns",
                "description": "An array of column names."
            }
        ],
        "type": "filter"
    },
    {
        "text": "restrict_manage_posts",
        "description": "Fires before the Filter button on the Posts and Pages list tables.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type slug."
            },
            {
                "type": "string",
                "name": "$which",
                "description": "The location of the extra table nav markup:                          'top' or 'bottom'."
            }
        ],
        "type": "action"
    },
    {
        "text": "manage_posts_extra_tablenav",
        "description": "Fires immediately following the closing \"actions\" div in the tablenav for the posts list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$which",
                "description": "The location of the extra table nav markup: 'top' or 'bottom'."
            }
        ],
        "type": "action"
    },
    {
        "text": "disable_categories_dropdown",
        "description": "Filters whether to remove the 'Categories' drop-down from the post list table.",
        "arguments": [
            {
                "type": "bool",
                "name": "$disable",
                "description": "Whether to disable the categories drop-down. Default false."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type slug."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_posts_per_page",
        "description": "This filter is documented in wp-admin\/includes\/post.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "network_admin_plugin_action_links",
        "description": "Filters the action links displayed for each plugin in the Network Admin Plugins list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of plugin action links."
            },
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Path to the plugin file relative to the plugins directory."
            },
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "An array of plugin data."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The plugin context. Defaults are 'All', 'Active',                            'Inactive', 'Recently Activated', 'Upgrade',                            'Must-Use', 'Drop-ins', 'Search'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "network_admin_plugin_action_links_{$plugin_file}",
        "description": "Filters the list of action links displayed for a specific plugin in the Network Admin Plugins list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of plugin action links."
            },
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Path to the plugin file relative to the plugins directory."
            },
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "An array of plugin data."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The plugin context. Defaults are 'All', 'Active',                            'Inactive', 'Recently Activated', 'Upgrade',                            'Must-Use', 'Drop-ins', 'Search'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugin_action_links",
        "description": "Filters the action links displayed for each plugin in the Plugins list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of plugin action links."
            },
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Path to the plugin file relative to the plugins directory."
            },
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "An array of plugin data."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The plugin context. Defaults are 'All', 'Active',                            'Inactive', 'Recently Activated', 'Upgrade',                            'Must-Use', 'Drop-ins', 'Search'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugin_action_links_{$plugin_file}",
        "description": "Filters the list of action links displayed for a specific plugin in the Plugins list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of plugin action links."
            },
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Path to the plugin file relative to the plugins directory."
            },
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "An array of plugin data."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The plugin context. Defaults are 'All', 'Active',                            'Inactive', 'Recently Activated', 'Upgrade',                            'Must-Use', 'Drop-ins', 'Search'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugin_row_meta",
        "description": "Filters the array of row meta for each plugin in the Plugins list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$plugin_meta",
                "description": "An array of the plugin's metadata,                            including the version, author,                            author URI, and plugin URI."
            },
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Path to the plugin file, relative to the plugins directory."
            },
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "An array of plugin data."
            },
            {
                "type": "string",
                "name": "$status",
                "description": "Status of the plugin. Defaults are 'All', 'Active',                            'Inactive', 'Recently Activated', 'Upgrade', 'Must-Use',                            'Drop-ins', 'Search'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_plugins_custom_column",
        "description": "Fires inside each custom column of the Plugins list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "Name of the column."
            },
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Path to the plugin file."
            },
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "An array of plugin data."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_plugin_row",
        "description": "Fires after each row in the Plugins list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Path to the plugin file, relative to the plugins directory."
            },
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "An array of plugin data."
            },
            {
                "type": "string",
                "name": "$status",
                "description": "Status of the plugin. Defaults are 'All', 'Active',                            'Inactive', 'Recently Activated', 'Upgrade', 'Must-Use',                            'Drop-ins', 'Search'."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_plugin_row_{$plugin_file}",
        "description": "Fires after each specific row in the Plugins list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Path to the plugin file, relative to the plugins directory."
            },
            {
                "type": "array",
                "name": "$plugin_data",
                "description": "An array of plugin data."
            },
            {
                "type": "string",
                "name": "$status",
                "description": "Status of the plugin. Defaults are 'All', 'Active',                            'Inactive', 'Recently Activated', 'Upgrade', 'Must-Use',                            'Drop-ins', 'Search'."
            }
        ],
        "type": "action"
    },
    {
        "text": "all_plugins",
        "description": "Filters the full array of plugins to list in the Plugins list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$all_plugins",
                "description": "An array of plugins to display in the list table."
            }
        ],
        "type": "filter"
    },
    {
        "text": "show_advanced_plugins",
        "description": "Filters whether to display the advanced plugins list table.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to show the advanced plugins for the specified                     plugin type. Default true."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The plugin type. Accepts 'mustuse', 'dropins'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "show_advanced_plugins",
        "description": "This action is documented in wp-admin\/includes\/class-wp-plugins-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "show_network_active_plugins",
        "description": "Filters whether to display network-active plugins alongside plugins active for the current site.",
        "arguments": [
            {
                "type": "bool",
                "name": "$show",
                "description": "Whether to show network-active plugins. Default is whether the current                   user can manage network plugins (ie. a Super Admin)."
            }
        ],
        "type": "filter"
    },
    {
        "text": "plugin_install_action_links",
        "description": "Filters the install action links for a plugin.",
        "arguments": [
            {
                "type": "array",
                "name": "$action_links",
                "description": "An array of plugin action hyperlinks. Defaults are links to Details and Install Now."
            },
            {
                "type": "array",
                "name": "$plugin",
                "description": "The plugin currently being listed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_plugins_table_header",
        "description": "Fires before the Plugin Install table header pagination is displayed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "views_{$this->screen->id}",
        "description": "This filter is documented in wp-admin\/inclues\/class-wp-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "install_plugins_tabs",
        "description": "Filters the tabs shown on the Plugin Install screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$tabs",
                "description": "The tabs shown on the Plugin Install screen. Defaults include 'featured', 'popular',                    'recommended', 'favorites', and 'upload'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_plugins_nonmenu_tabs",
        "description": "Filters tabs not associated with a menu item on the Plugin Install screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$nonmenu_tabs",
                "description": "The tabs that don't have a Menu item on the Plugin Install screen."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_plugins_table_api_args_{$tab}",
        "description": "Filters API request arguments for each Plugin Install screen tab.",
        "arguments": [
            {
                "type": "array|bool",
                "name": "$args",
                "description": "Plugin Install API arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ms_user_row_actions",
        "description": "Filters the action links displayed under each user in the Network Admin Users list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of action links to be displayed.                         Default 'Edit', 'Delete'."
            },
            {
                "type": "\\WP_User",
                "name": "$user",
                "description": "WP_User object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_users_custom_column",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-users-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "ms_user_list_site_actions",
        "description": "Filters the action links displayed next the sites a user belongs to in the Network Admin Users list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of action links to be displayed.                           Default 'Edit', 'View'."
            },
            {
                "type": "int",
                "name": "$userblog_id",
                "description": "The site ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wpmu_users_columns",
        "description": "Filters the columns displayed in the Network Admin Users list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$users_columns",
                "description": "An array of user columns. Default 'cb', 'username',                             'name', 'email', 'registered', 'blogs'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "users_list_table_query_args",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-users-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "after_theme_row",
        "description": "Fires after each row in the Multisite themes list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Directory name of the theme."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "Current WP_Theme object."
            },
            {
                "type": "string",
                "name": "$status",
                "description": "Status of the theme."
            }
        ],
        "type": "action"
    },
    {
        "text": "after_theme_row_{$stylesheet}",
        "description": "Fires after each specific row in the Multisite themes list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Directory name of the theme."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "Current WP_Theme object."
            },
            {
                "type": "string",
                "name": "$status",
                "description": "Status of the theme."
            }
        ],
        "type": "action"
    },
    {
        "text": "manage_themes_custom_column",
        "description": "Fires inside each custom column of the Multisite themes list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "Name of the column."
            },
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Directory name of the theme."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "Current WP_Theme object."
            }
        ],
        "type": "action"
    },
    {
        "text": "theme_row_meta",
        "description": "Filters the array of row meta for each theme in the Multisite themes list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$theme_meta",
                "description": "An array of the theme's metadata,                             including the version, author, and                             theme URI."
            },
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Directory name of the theme."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "WP_Theme object."
            },
            {
                "type": "string",
                "name": "$status",
                "description": "Status of the theme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_action_links",
        "description": "Filters the action links displayed for each theme in the Multisite themes list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of action links."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "The current WP_Theme object."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Status of the theme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "theme_action_links_{$stylesheet}",
        "description": "Filters the action links of a specific theme in the Multisite themes list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of action links."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme",
                "description": "The current WP_Theme object."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Status of the theme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "all_themes",
        "description": "Filters the full array of WP_Theme objects to list in the Multisite themes list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$all",
                "description": "An array of WP_Theme objects to display in the list table."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_sites_action_links",
        "description": "Filters the action links displayed for each site in the Sites list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of action links to be displayed."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The site ID."
            },
            {
                "type": "string",
                "name": "$blogname",
                "description": "Site path, formatted depending on whether it is a sub-domain                         or subdirectory multisite install."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_sites_custom_column",
        "description": "Fires for each registered custom column in the Sites list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "The name of the column to display."
            },
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The site ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmublogsaction",
        "description": "Fires inside the auxiliary 'Actions' column of the Sites list table.",
        "arguments": [
            {
                "type": "int",
                "name": "$blog_id",
                "description": "The site ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wpmu_blogs_columns",
        "description": "Filters the displayed site columns in Sites list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$sites_columns",
                "description": "An array of displayed site columns. Default 'cb',                             'blogname', 'lastupdated', 'registered', 'users'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "ms_sites_list_table_query_args",
        "description": "Filters the arguments for the site query in the sites list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "An array of get_sites() arguments."
            }
        ],
        "type": "filter"
    },
    {
        "text": "media_row_actions",
        "description": "Filters the action links for each attachment in the Media list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of action links for each attachment.                          Default 'Edit', 'Delete Permanently', 'View'."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "WP_Post object for the current attachment."
            },
            {
                "type": "bool",
                "name": "$detached",
                "description": "Whether the list table contains media not attached                          to any posts. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_media_custom_column",
        "description": "Fires for each custom column in the Media list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "Name of the custom column."
            },
            {
                "type": "int",
                "name": "$post_id",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "manage_taxonomies_for_attachment_columns",
        "description": "Filters the taxonomy columns for attachments in the Media list table.",
        "arguments": [
            {
                "type": "array",
                "name": "$taxonomies",
                "description": "An array of registered taxonomies to show for attachments."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type. Default 'attachment'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_media_columns",
        "description": "Filters the Media list table columns.",
        "arguments": [
            {
                "type": "array",
                "name": "$posts_columns",
                "description": "An array of columns displayed in the Media list table."
            },
            {
                "type": "bool",
                "name": "$detached",
                "description": "Whether the list table contains media not attached                             to any posts. Default true."
            }
        ],
        "type": "filter"
    },
    {
        "text": "views_{$this->screen->id}",
        "description": "This filter is documented in wp-admin\/inclues\/class-wp-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "restrict_manage_posts",
        "description": "This action is documented in wp-admin\/includes\/class-wp-posts-list-table.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "manage_{$this->screen->id}_sortable_columns",
        "description": "Filters the list table sortable columns for a specific screen.",
        "arguments": [
            {
                "type": "array",
                "name": "$sortable_columns",
                "description": "An array of sortable columns."
            }
        ],
        "type": "filter"
    },
    {
        "text": "list_table_primary_column",
        "description": "Filters the name of the primary column for the current list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$default",
                "description": "Column name default for the specific list table, e.g. 'name'."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Screen ID for specific list table, e.g. 'plugins'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "{$option}",
        "description": "Filters the number of items to be displayed on each page of the list table.",
        "arguments": [
            {
                "type": "int",
                "name": "$per_page",
                "description": "Number of items to be displayed. Default 20."
            }
        ],
        "type": "filter"
    },
    {
        "text": "disable_months_dropdown",
        "description": "Filters whether to remove the 'Months' drop-down from the post list table.",
        "arguments": [
            {
                "type": "bool",
                "name": "$disable",
                "description": "Whether to disable the drop-down. Default false."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "months_dropdown_results",
        "description": "Filters the 'Months' drop-down results.",
        "arguments": [
            {
                "type": "object",
                "name": "$months",
                "description": "The months drop-down query results."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "The post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "bulk_actions-{$this->screen->id}",
        "description": "Filters the list table Bulk Actions drop-down.",
        "arguments": [
            {
                "type": "array",
                "name": "$actions",
                "description": "An array of the available bulk actions."
            }
        ],
        "type": "filter"
    },
    {
        "text": "views_{$this->screen->id}",
        "description": "Filters the list of available list table views.",
        "arguments": [
            {
                "type": "array",
                "name": "$views",
                "description": "An array of available list table views."
            }
        ],
        "type": "filter"
    },
    {
        "text": "manage_link_custom_column",
        "description": "Fires for each registered custom link column.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "Name of the custom column."
            },
            {
                "type": "int",
                "name": "$link_id",
                "description": "Link ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "manage_comments_custom_column",
        "description": "Fires when the default column output is displayed for a single row.",
        "arguments": [
            {
                "type": "string",
                "name": "$column_name",
                "description": "The custom column's name."
            },
            {
                "type": "int",
                "name": "$comment->comment_ID",
                "description": "The custom column's unique ID number."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_email",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "comment_edit_pre",
        "description": "This filter is documented in wp-admin\/includes\/comment.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "comment_row_actions",
        "description": "This filter is documented in wp-admin\/includes\/dashboard.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "admin_comment_types_dropdown",
        "description": "Filters the comment types dropdown menu.",
        "arguments": [
            {
                "type": "array",
                "name": "$comment_types",
                "description": "An array of comment types. Accepts 'Comments', 'Pings'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "restrict_manage_comments",
        "description": "Fires just before the Filter submit button for comment types.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "manage_comments_nav",
        "description": "Fires after the Filter submit button for comment types.",
        "arguments": [
            {
                "type": "string",
                "name": "$comment_status",
                "description": "The comment status name. Default 'All'."
            }
        ],
        "type": "action"
    },
    {
        "text": "comment_status_links",
        "description": "Filters the comment status links.",
        "arguments": [
            {
                "type": "array",
                "name": "$status_links",
                "description": "An array of fully-formed status links. Default 'All'.                            Accepts 'All', 'Pending', 'Approved', 'Spam', and 'Trash'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "comments_per_page",
        "description": "Filters the number of comments listed per page in the comments list table.",
        "arguments": [
            {
                "type": "int",
                "name": "$comments_per_page",
                "description": "The number of comments to list per page."
            },
            {
                "type": "string",
                "name": "$comment_status",
                "description": "The comment status name. Default 'All'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "automatic_updates_debug_email",
        "description": "Filters the debug email that can be sent following an automatic background core update.",
        "arguments": [
            {
                "type": "array",
                "name": "$email",
                "description": "{     Array of email arguments that will be passed to wp_mail().     @type string $to      The email recipient. An array of emails                           can be returned, as handled by wp_mail().     @type string $subject Email subject.     @type string $body    Email message body.     @type string $headers Any email headers. Default empty. }"
            },
            {
                "type": "int",
                "name": "$failures",
                "description": "The number of failures encountered while upgrading."
            },
            {
                "type": "mixed",
                "name": "$results",
                "description": "The results of all attempted updates."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auto_core_update_send_email",
        "description": "Filters whether to send an email following an automatic background core update.",
        "arguments": [
            {
                "type": "bool",
                "name": "$send",
                "description": "Whether to send the email. Default true."
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of email to send. Can be one of                            'success', 'fail', 'critical'."
            },
            {
                "type": "object",
                "name": "$core_update",
                "description": "The update offer that was attempted."
            },
            {
                "type": "mixed",
                "name": "$result",
                "description": "The result for the core update. Can be WP_Error."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auto_core_update_email",
        "description": "Filters the email sent following an automatic background core update.",
        "arguments": [
            {
                "type": "array",
                "name": "$email",
                "description": "{     Array of email arguments that will be passed to wp_mail().     @type string $to      The email recipient. An array of emails                            can be returned, as handled by wp_mail().     @type string $subject The email's subject.     @type string $body    The email message body.     @type string $headers Any email headers, defaults to no headers. }"
            },
            {
                "type": "string",
                "name": "$type",
                "description": "The type of email being sent. Can be one of                            'success', 'fail', 'manual', 'critical'."
            },
            {
                "type": "object",
                "name": "$core_update",
                "description": "The update offer that was attempted."
            },
            {
                "type": "mixed",
                "name": "$result",
                "description": "The result for the core update. Can be WP_Error."
            }
        ],
        "type": "filter"
    },
    {
        "text": "automatic_updates_send_debug_email",
        "description": "Filters whether to send a debugging email for each automatic background update.",
        "arguments": [
            {
                "type": "bool",
                "name": "$development_version",
                "description": "By default, emails are sent if the                                  install is a development version.                                  Return false to avoid the email."
            }
        ],
        "type": "filter"
    },
    {
        "text": "automatic_updates_complete",
        "description": "Fires after all automatic updates have run.",
        "arguments": [
            {
                "type": "array",
                "name": "$update_results",
                "description": "The results of all attempted updates."
            }
        ],
        "type": "action"
    },
    {
        "text": "pre_auto_update",
        "description": "Fires immediately prior to an auto-update.",
        "arguments": [
            {
                "type": "string",
                "name": "$type",
                "description": "The type of update being checked: 'core', 'theme', 'plugin', or 'translation'."
            },
            {
                "type": "object",
                "name": "$item",
                "description": "The update offer."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The filesystem context (a path) against which filesystem access and status                        should be checked."
            }
        ],
        "type": "action"
    },
    {
        "text": "send_core_update_notification_email",
        "description": "Filters whether to notify the site administrator of a new core update.",
        "arguments": [
            {
                "type": "bool",
                "name": "$notify",
                "description": "Whether the site administrator is notified."
            },
            {
                "type": "object",
                "name": "$item",
                "description": "The update offer."
            }
        ],
        "type": "filter"
    },
    {
        "text": "auto_update_{$type}",
        "description": "Filters whether to automatically update core, a plugin, a theme, or a language.",
        "arguments": [
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether to update."
            },
            {
                "type": "object",
                "name": "$item",
                "description": "The update offer."
            }
        ],
        "type": "filter"
    },
    {
        "text": "automatic_updates_is_vcs_checkout",
        "description": "Filters whether the automatic updater should consider a filesystem location to be potentially managed by a version control system.",
        "arguments": [
            {
                "type": "bool",
                "name": "$checkout",
                "description": "Whether a VCS checkout was discovered at $context                        or ABSPATH, or anywhere higher."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The filesystem context (a path) against which                        filesystem status should be checked."
            }
        ],
        "type": "filter"
    },
    {
        "text": "automatic_updater_disabled",
        "description": "Filters whether to entirely disable background updates.",
        "arguments": [
            {
                "type": "bool",
                "name": "$disabled",
                "description": "Whether the updater should be disabled."
            }
        ],
        "type": "filter"
    },
    {
        "text": "the_title",
        "description": "This filter is documented in wp-includes\/post-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_category",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "the_category",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "upgrader_process_complete",
        "description": "This action is documented in wp-admin\/includes\/class-wp-upgrader.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "update_theme_complete_actions",
        "description": "Filters the list of action links available following a single theme update.",
        "arguments": [
            {
                "type": "array",
                "name": "$update_actions",
                "description": "Array of theme action links."
            },
            {
                "type": "string",
                "name": "$theme",
                "description": "Theme directory name."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_theme_complete_actions",
        "description": "Filters the list of action links available following a single theme installation.",
        "arguments": [
            {
                "type": "array",
                "name": "$install_actions",
                "description": "Array of theme action links."
            },
            {
                "type": "object",
                "name": "$api",
                "description": "Object containing WordPress.org API theme data."
            },
            {
                "type": "string",
                "name": "$stylesheet",
                "description": "Theme directory name."
            },
            {
                "type": "\\WP_Theme",
                "name": "$theme_info",
                "description": "Theme object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upgrader_process_complete",
        "description": "This action is documented in wp-admin\/includes\/class-wp-upgrader.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "update_plugin_complete_actions",
        "description": "Filters the list of action links available following a single plugin update.",
        "arguments": [
            {
                "type": "array",
                "name": "$update_actions",
                "description": "Array of plugin action links."
            },
            {
                "type": "string",
                "name": "$plugin",
                "description": "Path to the plugin file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_plugin_complete_actions",
        "description": "Filters the list of action links available following a single plugin installation.",
        "arguments": [
            {
                "type": "array",
                "name": "$install_actions",
                "description": "Array of plugin action links."
            },
            {
                "type": "object",
                "name": "$api",
                "description": "Object containing WordPress.org API plugin data. Empty                                for non-API installs, such as when a plugin is installed                                via upload."
            },
            {
                "type": "string",
                "name": "$plugin_file",
                "description": "Path to the plugin file."
            }
        ],
        "type": "filter"
    },
    {
        "text": "upgrader_process_complete",
        "description": "This action is documented in wp-admin\/includes\/class-wp-upgrader.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "async_update_translation",
        "description": "Filters whether to asynchronously update translation for core, a plugin, or a theme.",
        "arguments": [
            {
                "type": "bool",
                "name": "$update",
                "description": "Whether to update."
            },
            {
                "type": "object",
                "name": "$language_update",
                "description": "The update offer."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_translations_complete_actions",
        "description": "Filters the list of action links available following a translations update.",
        "arguments": [
            {
                "type": "array",
                "name": "$update_actions",
                "description": "Array of translations update links."
            }
        ],
        "type": "filter"
    },
    {
        "text": "allow_dev_auto_core_updates",
        "description": "Filters whether to enable automatic core updates for development versions.",
        "arguments": [
            {
                "type": "bool",
                "name": "$upgrade_dev",
                "description": "Whether to enable automatic updates for                          development versions."
            }
        ],
        "type": "filter"
    },
    {
        "text": "allow_minor_auto_core_updates",
        "description": "Filters whether to enable minor automatic core updates.",
        "arguments": [
            {
                "type": "bool",
                "name": "$upgrade_minor",
                "description": "Whether to enable minor automatic core updates."
            }
        ],
        "type": "filter"
    },
    {
        "text": "allow_major_auto_core_updates",
        "description": "Filters whether to enable major automatic core updates.",
        "arguments": [
            {
                "type": "bool",
                "name": "$upgrade_major",
                "description": "Whether to enable major automatic core updates."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_feedback",
        "description": "This filter is documented in wp-admin\/includes\/update-core.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "update_feedback",
        "description": "This filter is documented in wp-admin\/includes\/update-core.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "upgrader_process_complete",
        "description": "This action is documented in wp-admin\/includes\/class-wp-upgrader.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "update_bulk_theme_complete_actions",
        "description": "Filters the list of action links available following bulk theme updates.",
        "arguments": [
            {
                "type": "array",
                "name": "$update_actions",
                "description": "Array of theme action links."
            },
            {
                "type": "array",
                "name": "$theme_info",
                "description": "Array of information for the last-updated theme."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_bulk_plugins_complete_actions",
        "description": "Filters the list of action links available following bulk plugin updates.",
        "arguments": [
            {
                "type": "array",
                "name": "$update_actions",
                "description": "Array of plugin action links."
            },
            {
                "type": "array",
                "name": "$plugin_info",
                "description": "Array of information for the last-updated plugin."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_link",
        "description": "Fires after a link was updated in the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$link_id",
                "description": "ID of the link that was updated."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_link",
        "description": "Fires after a link was added to the database.",
        "arguments": [
            {
                "type": "int",
                "name": "$link_id",
                "description": "ID of the link that was added."
            }
        ],
        "type": "action"
    },
    {
        "text": "delete_link",
        "description": "Fires before a link is deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$link_id",
                "description": "ID of the link to delete."
            }
        ],
        "type": "action"
    },
    {
        "text": "deleted_link",
        "description": "Fires after a link has been deleted.",
        "arguments": [
            {
                "type": "int",
                "name": "$link_id",
                "description": "ID of the deleted link."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_create_file_in_uploads",
        "description": "This filter is documented in wp-admin\/custom-header.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_ajax_crop_image_pre_save",
        "description": "Fires before a cropped image is saved.",
        "arguments": [
            {
                "type": "string",
                "name": "$context",
                "description": "The Customizer control requesting the cropped image."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "The attachment ID of the original image."
            },
            {
                "type": "string",
                "name": "$cropped",
                "description": "Path to the cropped image file."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_create_file_in_uploads",
        "description": "This filter is documented in wp-admin\/custom-header.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_ajax_cropped_attachment_metadata",
        "description": "Filters the cropped image attachment metadata.",
        "arguments": [
            {
                "type": "array",
                "name": "$metadata",
                "description": "Attachment metadata."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_ajax_cropped_attachment_id",
        "description": "Filters the attachment ID for a cropped image.",
        "arguments": [
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "The attachment ID of the cropped image."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "The Customizer control requesting the cropped image."
            }
        ],
        "type": "filter"
    },
    {
        "text": "install_themes_table_api_args_{$old_filter}",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-theme-install-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_refresh_nonces",
        "description": "",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "heartbeat_received",
        "description": "Filters the Heartbeat response received.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "The Heartbeat response."
            },
            {
                "type": "array",
                "name": "$data",
                "description": "The $_POST data sent."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_send",
        "description": "Filters the Heartbeat response sent.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "The Heartbeat response."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_tick",
        "description": "Fires when Heartbeat ticks in logged-in environments.",
        "arguments": [
            {
                "type": "array",
                "name": "$response",
                "description": "The Heartbeat response."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$type}_send_to_editor_url",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "media_send_to_editor",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "attachment_fields_to_save",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "ajax_query_attachments_args",
        "description": "Filters the arguments passed to WP_Query during an Ajax call for querying attachments.",
        "arguments": [
            {
                "type": "array",
                "name": "$query",
                "description": "An array of query variables."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_check_post_lock_window",
        "description": "Filters the post lock window duration.",
        "arguments": [
            {
                "type": "int",
                "name": "$interval",
                "description": "The interval in seconds the post lock duration                      should last, plus 5 seconds. Default 150."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load-widgets.php",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "widgets.php",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "sidebar_admin_setup",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "load-widgets.php",
        "description": "Fires early when editing the widgets displayed in sidebars.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "widgets.php",
        "description": "Fires early when editing the widgets displayed in sidebars.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "sidebar_admin_setup",
        "description": "This action is documented in wp-admin\/widgets.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "delete_widget",
        "description": "This action is documented in wp-admin\/widgets.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "quick_edit_show_taxonomy",
        "description": "This filter is documented in wp-admin\/includes\/class-wp-posts-list-table.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "nav_menu_meta_box_object",
        "description": "This filter is documented in wp-admin\/includes\/nav-menu.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_edit_nav_menu_walker",
        "description": "This filter is documented in wp-admin\/includes\/nav-menu.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "autocomplete_users_for_site_admins",
        "description": "This filter is documented in wp-admin\/user-new.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "term_search_min_chars",
        "description": "Filters the minimum number of characters required to fire a tag search via Ajax.",
        "arguments": [
            {
                "type": "int",
                "name": "$characters",
                "description": "The minimum number of characters required. Default 2."
            },
            {
                "type": "object",
                "name": "$tax",
                "description": "The taxonomy object."
            },
            {
                "type": "string",
                "name": "$s",
                "description": "The search term."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_nopriv_received",
        "description": "Filters Heartbeat Ajax response in no-privilege environments.",
        "arguments": [
            {
                "type": "array|object",
                "name": "$response",
                "description": "The no-priv Heartbeat response object or array."
            },
            {
                "type": "array",
                "name": "$data",
                "description": "An array of data passed via $_POST."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_nopriv_send",
        "description": "Filters Heartbeat Ajax response when no data is passed.",
        "arguments": [
            {
                "type": "array|object",
                "name": "$response",
                "description": "The Heartbeat response object or array."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "filter"
    },
    {
        "text": "heartbeat_nopriv_tick",
        "description": "Fires when Heartbeat ticks in no-privilege environments.",
        "arguments": [
            {
                "type": "array|object",
                "name": "$response",
                "description": "The no-priv Heartbeat response."
            },
            {
                "type": "string",
                "name": "$screen_id",
                "description": "The screen id."
            }
        ],
        "type": "action"
    },
    {
        "text": "export_args",
        "description": "Filters the export args.",
        "arguments": [
            {
                "type": "array",
                "name": "$args",
                "description": "The arguments to send to the exporter."
            }
        ],
        "type": "filter"
    },
    {
        "text": "export_filters",
        "description": "Fires at the end of the export filters form.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "bulk_post_updated_messages",
        "description": "Filters the bulk action updated messages.",
        "arguments": [
            {
                "type": "array",
                "name": "$bulk_messages",
                "description": "Arrays of messages, each keyed by the corresponding post type. Messages are                             keyed with 'updated', 'locked', 'deleted', 'trashed', and 'untrashed'."
            },
            {
                "type": "array",
                "name": "$bulk_counts",
                "description": "Array of item counts for each message, used to build internationalized strings."
            }
        ],
        "type": "filter"
    },
    {
        "text": "redirect_term_location",
        "description": "Filters the taxonomy redirect destination URL.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The destination URL."
            },
            {
                "type": "object",
                "name": "$tax",
                "description": "The taxonomy object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_category_form_pre",
        "description": "Fires before the Add Category form.",
        "arguments": [
            {
                "type": "object",
                "name": "$arg",
                "description": "Optional arguments cast to an object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_link_category_form_pre",
        "description": "Fires before the link category form.",
        "arguments": [
            {
                "type": "object",
                "name": "$arg",
                "description": "Optional arguments cast to an object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_tag_form_pre",
        "description": "Fires before the Add Tag form.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_pre_add_form",
        "description": "Fires before the Add Term form for all taxonomies.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_term_new_form_tag",
        "description": "Fires inside the Add Tag form tag.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "taxonomy_parent_dropdown_args",
        "description": "Filters the taxonomy parent drop-down on the Edit Term page.",
        "arguments": [
            {
                "type": "array",
                "name": "$dropdown_args",
                "description": "{     An array of taxonomy parent drop-down arguments.     @type int|bool $hide_empty       Whether to hide terms not attached to any posts. Default 0|false.     @type bool     $hide_if_empty    Whether to hide the drop-down if no terms exist. Default false.     @type string   $taxonomy         The taxonomy slug.     @type string   $name             Value of the name attribute to use for the drop-down select element.                                      Default 'parent'.     @type string   $orderby          The field to order by. Default 'name'.     @type bool     $hierarchical     Whether the taxonomy is hierarchical. Default true.     @type string   $show_option_none Label to display if there are no terms. Default 'None'. }"
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "Filter context. Accepts 'new' or 'edit'."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_tag_form_fields",
        "description": "Fires after the Add Tag form fields for non-hierarchical taxonomies.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_add_form_fields",
        "description": "Fires after the Add Term form fields.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_category_form",
        "description": "Fires at the end of the Edit Category form.",
        "arguments": [
            {
                "type": "object",
                "name": "$arg",
                "description": "Optional arguments cast to an object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_link_category_form",
        "description": "Fires at the end of the Edit Link form.",
        "arguments": [
            {
                "type": "object",
                "name": "$arg",
                "description": "Optional arguments cast to an object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_tag_form",
        "description": "Fires at the end of the Add Tag form.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_add_form",
        "description": "Fires at the end of the Add Term form for all taxonomies.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "the_category",
        "description": "This filter is documented in wp-includes\/category-template.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "after-{$taxonomy}-table",
        "description": "Fires after the taxonomy list table.",
        "arguments": [
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "The taxonomy name."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_category_form_pre",
        "description": "Fires before the Edit Category form.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current category term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_link_category_form_pre",
        "description": "Fires before the Edit Link Category form.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current link category term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_tag_form_pre",
        "description": "Fires before the Edit Tag form.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current tag term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_pre_edit_form",
        "description": "Fires before the Edit Term form for all taxonomies.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current taxonomy term object."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Current $taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_term_edit_form_tag",
        "description": "Fires inside the Edit Term form tag.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_term_edit_form_top",
        "description": "Fires at the beginning of the Edit Term form.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current taxonomy term object."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Current $taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "editable_slug",
        "description": "Filters the editable slug.",
        "arguments": [
            {
                "type": "string",
                "name": "$slug",
                "description": "The editable slug. Will be either a term slug or post URI depending                             upon the context in which it is evaluated."
            },
            {
                "type": "object|\\WP_Post",
                "name": "$tag",
                "description": "Term or WP_Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "taxonomy_parent_dropdown_args",
        "description": "This filter is documented in wp-admin\/edit-tags.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "edit_category_form_fields",
        "description": "Fires after the Edit Category form fields are displayed.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current category term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_link_category_form_fields",
        "description": "Fires after the Edit Link Category form fields are displayed.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current link category term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_tag_form_fields",
        "description": "Fires after the Edit Tag form fields are displayed.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current tag term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_edit_form_fields",
        "description": "Fires after the Edit Term form fields are displayed.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current taxonomy term object."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Current taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_category_form",
        "description": "This action is documented in wp-admin\/edit-tags.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "edit_link_category_form",
        "description": "This action is documented in wp-admin\/edit-tags.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "edit_tag_form",
        "description": "Fires at the end of the Edit Term form.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current taxonomy term object."
            }
        ],
        "type": "action"
    },
    {
        "text": "{$taxonomy}_edit_form",
        "description": "Fires at the end of the Edit Term form for all taxonomies.",
        "arguments": [
            {
                "type": "object",
                "name": "$tag",
                "description": "Current taxonomy term object."
            },
            {
                "type": "string",
                "name": "$taxonomy",
                "description": "Current taxonomy slug."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_meta_boxes",
        "description": "This action is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "add_meta_boxes_link",
        "description": "Fires when link-specific meta boxes are added.",
        "arguments": [
            {
                "type": "object",
                "name": "$link",
                "description": "Link object."
            }
        ],
        "type": "action"
    },
    {
        "text": "do_meta_boxes",
        "description": "This action is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "do_meta_boxes",
        "description": "This action is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "do_meta_boxes",
        "description": "This action is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "submitlink_box",
        "description": "This action is documented in wp-admin\/includes\/meta-boxes.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "edit_comment_misc_actions",
        "description": "Filters miscellaneous actions for the edit comment form sidebar.",
        "arguments": [
            {
                "type": "string",
                "name": "$html",
                "description": "Output HTML to display miscellaneous action."
            },
            {
                "type": "object",
                "name": "$comment",
                "description": "Current comment object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "add_meta_boxes",
        "description": "This action is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "add_meta_boxes_comment",
        "description": "Fires when comment-specific meta boxes are added.",
        "arguments": [
            {
                "type": "\\WP_Comment",
                "name": "$comment",
                "description": "Comment object."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_editor_expand",
        "description": "Filters whether to enable the 'expand' functionality in the post editor.",
        "arguments": [
            {
                "type": "bool",
                "name": "$expand",
                "description": "Whether to enable the 'expand' functionality. Default true."
            },
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            }
        ],
        "type": "filter"
    },
    {
        "text": "post_updated_messages",
        "description": "Filters the post updated messages.",
        "arguments": [
            {
                "type": "array",
                "name": "$messages",
                "description": "Post updated messages. For defaults @see $messages declarations above."
            }
        ],
        "type": "filter"
    },
    {
        "text": "dbx_post_advanced",
        "description": "Fires in the middle of built-in meta box registration.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_meta_boxes",
        "description": "Fires after all built-in meta boxes have been added.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "add_meta_boxes_{$post_type}",
        "description": "Fires after all built-in meta boxes have been added, contextually for the given post type.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "do_meta_boxes",
        "description": "Fires after meta boxes have been added.",
        "arguments": [
            {
                "type": "string",
                "name": "$post_type",
                "description": "Post type of the post."
            },
            {
                "type": "string",
                "name": "$context",
                "description": "string  Meta box context."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "do_meta_boxes",
        "description": "This action is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "do_meta_boxes",
        "description": "This action is documented in wp-admin\/edit-form-advanced.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "post_edit_form_tag",
        "description": "Fires inside the post editor form tag.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_form_top",
        "description": "Fires at the beginning of the edit form.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "enter_title_here",
        "description": "Filters the title field placeholder text.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "Placeholder text. Default 'Enter title here'."
            },
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "filter"
    },
    {
        "text": "edit_form_before_permalink",
        "description": "Fires before the permalink field in the edit form.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_form_after_title",
        "description": "Fires after the title field.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_form_after_editor",
        "description": "Fires after the content editor.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "submitpage_box",
        "description": "Fires before meta boxes with 'side' context are output for the 'page' post type.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "submitpost_box",
        "description": "Fires before meta boxes with 'side' context are output for all post types other than 'page'.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_page_form",
        "description": "Fires after 'normal' context meta boxes have been output for the 'page' post type.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "edit_form_advanced",
        "description": "Fires after 'normal' context meta boxes have been output for all post types other than 'page'.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "dbx_post_sidebar",
        "description": "Fires after all meta box sections have been output, before the closing #post-body div.",
        "arguments": [
            {
                "type": "\\WP_Post",
                "name": "$post",
                "description": "Post object."
            }
        ],
        "type": "action"
    },
    {
        "text": "customize_controls_init",
        "description": "Fires when Customizer controls are initialized, before scripts are enqueued.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "customize_controls_enqueue_scripts",
        "description": "Enqueue Customizer control scripts.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "customize_controls_print_styles",
        "description": "Fires when Customizer control styles are printed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "customize_controls_print_scripts",
        "description": "Fires when Customizer control scripts are printed.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "customize_controls_print_footer_scripts",
        "description": "Prints templates, control scripts, and settings in the footer.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_create_file_in_uploads",
        "description": "This filter is documented in wp-admin\/custom-header.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_header_image_attachment_metadata",
        "description": "Filters the header image attachment metadata.",
        "arguments": [
            {
                "type": "array",
                "name": "$metadata",
                "description": "Attachment metadata."
            }
        ],
        "type": "filter"
    },
    {
        "text": "wp_create_file_in_uploads",
        "description": "This filter is documented in wp-admin\/custom-header.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_create_file_in_uploads",
        "description": "Fires after the header image is set or an error is returned.",
        "arguments": [
            {
                "type": "string",
                "name": "$file",
                "description": "Path to the file."
            },
            {
                "type": "int",
                "name": "$attachment_id",
                "description": "Attachment ID."
            }
        ],
        "type": "action"
    },
    {
        "text": "wp_create_file_in_uploads",
        "description": "This filter is documented in wp-admin\/custom-header.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "custom_header_options",
        "description": "Fires just before the submit button in the custom header options form.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "image_size_names_choose",
        "description": "This filter is documented in wp-admin\/includes\/media.php",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "wp_create_file_in_uploads",
        "description": "This action is documented in wp-admin\/custom-header.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "comment_edit_redirect",
        "description": "Filters the URI the user is redirected to after editing a comment in the admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$location",
                "description": "The URI the user will be redirected to."
            },
            {
                "type": "int",
                "name": "$comment_id",
                "description": "The ID of the comment being edited."
            }
        ],
        "type": "filter"
    },
    {
        "text": "async_upload_{$type}",
        "description": "Filters the returned ID of an uploaded attachment.",
        "arguments": [
            {
                "type": "int",
                "name": "$id",
                "description": "Uploaded attachment ID."
            }
        ],
        "type": "filter"
    },
    {
        "text": "after_db_upgrade",
        "description": "Fires on the next page load after a successful DB upgrade.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "do_mu_upgrade",
        "description": "In WordPress Administration Screens",
        "arguments": [],
        "type": "filter"
    },
    {
        "text": "after_mu_upgrade",
        "description": "This action is documented in wp-admin\/network\/upgrade.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_init",
        "description": "Fires as an admin screen or script is being initialized.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "load-{$page_hook}",
        "description": "Fires before a particular screen is loaded.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "{$page_hook}",
        "description": "Used to call the registered callback for a plugin screen.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "load-{$plugin_page}",
        "description": "Fires before a particular screen is loaded.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "load-importer-{$importer}",
        "description": "Fires before an importer screen is loaded.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "force_filtered_html_on_import",
        "description": "Whether to filter imported data through kses on import.",
        "arguments": [
            {
                "type": "bool",
                "name": "$force",
                "description": "Whether to force data to be filtered through kses. Default false."
            }
        ],
        "type": "filter"
    },
    {
        "text": "load-{$pagenow}",
        "description": "Fires before a particular screen is loaded.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "load-page-new.php",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "load-page.php",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "load-categories.php",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "load-edit-link-categories.php",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "load-edit-tags.php",
        "description": "",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_action_{$_REQUEST['action']}",
        "description": "Fires when an 'action' request variable is sent.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_init",
        "description": "This action is documented in wp-admin\/admin.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_post_nopriv",
        "description": "Fires on a non-authenticated admin post request where no action was supplied.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_post_nopriv_{$action}",
        "description": "Fires on a non-authenticated admin post request for the given action.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_post",
        "description": "Fires on an authenticated admin post request where no action was supplied.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_post_{$action}",
        "description": "Fires on an authenticated admin post request for the given action.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_title",
        "description": "Filters the title tag content for an admin page.",
        "arguments": [
            {
                "type": "string",
                "name": "$admin_title",
                "description": "The page title, with extra context added."
            },
            {
                "type": "string",
                "name": "$title",
                "description": "The original page title."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_enqueue_scripts",
        "description": "Enqueue scripts for all admin pages.",
        "arguments": [
            {
                "type": "string",
                "name": "$hook_suffix",
                "description": "The current admin page."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_print_styles-{$hook_suffix}",
        "description": "Fires when styles are printed for a specific admin page based on $hook_suffix.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_styles",
        "description": "Fires when styles are printed for all admin pages.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts-{$hook_suffix}",
        "description": "Fires when scripts are printed for a specific admin page based on $hook_suffix.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_print_scripts",
        "description": "Fires when scripts are printed for all admin pages.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_head-{$hook_suffix}",
        "description": "Fires in head section for a specific admin page.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_head",
        "description": "Fires in head section for all admin pages.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_body_class",
        "description": "Filters the CSS classes for the body tag in the admin.",
        "arguments": [
            {
                "type": "string",
                "name": "$classes",
                "description": "Space-separated list of CSS classes."
            }
        ],
        "type": "filter"
    },
    {
        "text": "in_admin_header",
        "description": "Fires at the beginning of the content section in an admin page.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "network_admin_notices",
        "description": "Prints network admin screen notices.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "user_admin_notices",
        "description": "Prints user admin screen notices.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_notices",
        "description": "Prints admin screen notices.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "all_admin_notices",
        "description": "Prints generic admin screen notices.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "in_admin_footer",
        "description": "Fires after the opening tag for the admin footer.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_footer_text",
        "description": "Filters the \"Thank you\" text displayed in the admin footer.",
        "arguments": [
            {
                "type": "string",
                "name": "$text",
                "description": "The content that will be printed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "update_footer",
        "description": "Filters the version\/update text displayed in the admin footer.",
        "arguments": [
            {
                "type": "string",
                "name": "$content",
                "description": "The content that will be printed."
            }
        ],
        "type": "filter"
    },
    {
        "text": "admin_footer",
        "description": "Prints scripts or data before the default footer scripts.",
        "arguments": [
            {
                "type": "string",
                "name": "$data",
                "description": "The data to print."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_print_footer_scripts-{$hook_suffix}",
        "description": "Prints scripts and data queued for the footer.",
        "arguments": [
            {
                "type": "string",
                "name": "$hook_suffix",
                "description": "The current admin page."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_print_footer_scripts",
        "description": "Prints any scripts and data queued for the footer.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "admin_footer-{$hook_suffix}",
        "description": "Prints scripts or data after the default footer scripts.",
        "arguments": [
            {
                "type": "string",
                "name": "$hook_suffix",
                "description": "The current admin page."
            }
        ],
        "type": "action"
    },
    {
        "text": "admin_init",
        "description": "This action is documented in wp-admin\/admin.php",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_ajax_{$_REQUEST['action']}",
        "description": "Fires authenticated Ajax actions for logged-in users.",
        "arguments": [],
        "type": "action"
    },
    {
        "text": "wp_ajax_nopriv_{$_REQUEST['action']}",
        "description": "Fires non-authenticated Ajax actions for logged-out users.",
        "arguments": [],
        "type": "action"
    }
]